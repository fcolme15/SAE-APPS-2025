
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d08  08008d08  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d10  08008d10  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008d18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000074  08008d8c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08008d8c  0000a414  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010617  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002368  00000000  00000000  0001a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000add  00000000  00000000  0001d830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d477  00000000  00000000  0001e30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102e0  00000000  00000000  0003b784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c070f  00000000  00000000  0004ba64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  0010c1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008994 	.word	0x08008994

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08008994 	.word	0x08008994

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0008      	movs	r0, r1
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 faed 	bl	80009ec <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 fa6d 	bl	80008fc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fadf 	bl	80009ec <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fad5 	bl	80009ec <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fa7b 	bl	800094c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 fa71 	bl	800094c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_uldivmod>:
 8000478:	2b00      	cmp	r3, #0
 800047a:	d111      	bne.n	80004a0 <__aeabi_uldivmod+0x28>
 800047c:	2a00      	cmp	r2, #0
 800047e:	d10f      	bne.n	80004a0 <__aeabi_uldivmod+0x28>
 8000480:	2900      	cmp	r1, #0
 8000482:	d100      	bne.n	8000486 <__aeabi_uldivmod+0xe>
 8000484:	2800      	cmp	r0, #0
 8000486:	d002      	beq.n	800048e <__aeabi_uldivmod+0x16>
 8000488:	2100      	movs	r1, #0
 800048a:	43c9      	mvns	r1, r1
 800048c:	0008      	movs	r0, r1
 800048e:	b407      	push	{r0, r1, r2}
 8000490:	4802      	ldr	r0, [pc, #8]	@ (800049c <__aeabi_uldivmod+0x24>)
 8000492:	a102      	add	r1, pc, #8	@ (adr r1, 800049c <__aeabi_uldivmod+0x24>)
 8000494:	1840      	adds	r0, r0, r1
 8000496:	9002      	str	r0, [sp, #8]
 8000498:	bd03      	pop	{r0, r1, pc}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	ffffff65 	.word	0xffffff65
 80004a0:	b403      	push	{r0, r1}
 80004a2:	4668      	mov	r0, sp
 80004a4:	b501      	push	{r0, lr}
 80004a6:	9802      	ldr	r0, [sp, #8]
 80004a8:	f000 f83c 	bl	8000524 <__udivmoddi4>
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	469e      	mov	lr, r3
 80004b0:	b002      	add	sp, #8
 80004b2:	bc0c      	pop	{r2, r3}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_f2uiz>:
 80004b8:	219e      	movs	r1, #158	@ 0x9e
 80004ba:	b510      	push	{r4, lr}
 80004bc:	05c9      	lsls	r1, r1, #23
 80004be:	1c04      	adds	r4, r0, #0
 80004c0:	f7ff ffd0 	bl	8000464 <__aeabi_fcmpge>
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d103      	bne.n	80004d0 <__aeabi_f2uiz+0x18>
 80004c8:	1c20      	adds	r0, r4, #0
 80004ca:	f000 fdbf 	bl	800104c <__aeabi_f2iz>
 80004ce:	bd10      	pop	{r4, pc}
 80004d0:	219e      	movs	r1, #158	@ 0x9e
 80004d2:	1c20      	adds	r0, r4, #0
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	f000 fc15 	bl	8000d04 <__aeabi_fsub>
 80004da:	f000 fdb7 	bl	800104c <__aeabi_f2iz>
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	061b      	lsls	r3, r3, #24
 80004e2:	469c      	mov	ip, r3
 80004e4:	4460      	add	r0, ip
 80004e6:	e7f2      	b.n	80004ce <__aeabi_f2uiz+0x16>

080004e8 <__aeabi_d2uiz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2200      	movs	r2, #0
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <__aeabi_d2uiz+0x38>)
 80004ee:	0004      	movs	r4, r0
 80004f0:	000d      	movs	r5, r1
 80004f2:	f002 f87d 	bl	80025f0 <__aeabi_dcmpge>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d104      	bne.n	8000504 <__aeabi_d2uiz+0x1c>
 80004fa:	0020      	movs	r0, r4
 80004fc:	0029      	movs	r1, r5
 80004fe:	f001 ffd9 	bl	80024b4 <__aeabi_d2iz>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <__aeabi_d2uiz+0x38>)
 8000506:	2200      	movs	r2, #0
 8000508:	0020      	movs	r0, r4
 800050a:	0029      	movs	r1, r5
 800050c:	f001 fc36 	bl	8001d7c <__aeabi_dsub>
 8000510:	f001 ffd0 	bl	80024b4 <__aeabi_d2iz>
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	061b      	lsls	r3, r3, #24
 8000518:	469c      	mov	ip, r3
 800051a:	4460      	add	r0, ip
 800051c:	e7f1      	b.n	8000502 <__aeabi_d2uiz+0x1a>
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	41e00000 	.word	0x41e00000

08000524 <__udivmoddi4>:
 8000524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000526:	4657      	mov	r7, sl
 8000528:	464e      	mov	r6, r9
 800052a:	4645      	mov	r5, r8
 800052c:	46de      	mov	lr, fp
 800052e:	b5e0      	push	{r5, r6, r7, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	000d      	movs	r5, r1
 8000534:	4692      	mov	sl, r2
 8000536:	4699      	mov	r9, r3
 8000538:	b083      	sub	sp, #12
 800053a:	428b      	cmp	r3, r1
 800053c:	d830      	bhi.n	80005a0 <__udivmoddi4+0x7c>
 800053e:	d02d      	beq.n	800059c <__udivmoddi4+0x78>
 8000540:	4649      	mov	r1, r9
 8000542:	4650      	mov	r0, sl
 8000544:	f002 f87c 	bl	8002640 <__clzdi2>
 8000548:	0029      	movs	r1, r5
 800054a:	0006      	movs	r6, r0
 800054c:	0020      	movs	r0, r4
 800054e:	f002 f877 	bl	8002640 <__clzdi2>
 8000552:	1a33      	subs	r3, r6, r0
 8000554:	4698      	mov	r8, r3
 8000556:	3b20      	subs	r3, #32
 8000558:	d434      	bmi.n	80005c4 <__udivmoddi4+0xa0>
 800055a:	469b      	mov	fp, r3
 800055c:	4653      	mov	r3, sl
 800055e:	465a      	mov	r2, fp
 8000560:	4093      	lsls	r3, r2
 8000562:	4642      	mov	r2, r8
 8000564:	001f      	movs	r7, r3
 8000566:	4653      	mov	r3, sl
 8000568:	4093      	lsls	r3, r2
 800056a:	001e      	movs	r6, r3
 800056c:	42af      	cmp	r7, r5
 800056e:	d83b      	bhi.n	80005e8 <__udivmoddi4+0xc4>
 8000570:	42af      	cmp	r7, r5
 8000572:	d100      	bne.n	8000576 <__udivmoddi4+0x52>
 8000574:	e079      	b.n	800066a <__udivmoddi4+0x146>
 8000576:	465b      	mov	r3, fp
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	41bd      	sbcs	r5, r7
 800057c:	2b00      	cmp	r3, #0
 800057e:	da00      	bge.n	8000582 <__udivmoddi4+0x5e>
 8000580:	e076      	b.n	8000670 <__udivmoddi4+0x14c>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	465a      	mov	r2, fp
 800058e:	4093      	lsls	r3, r2
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	4642      	mov	r2, r8
 8000596:	4093      	lsls	r3, r2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	e029      	b.n	80005f0 <__udivmoddi4+0xcc>
 800059c:	4282      	cmp	r2, r0
 800059e:	d9cf      	bls.n	8000540 <__udivmoddi4+0x1c>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <__udivmoddi4+0x8e>
 80005ae:	601c      	str	r4, [r3, #0]
 80005b0:	605d      	str	r5, [r3, #4]
 80005b2:	9800      	ldr	r0, [sp, #0]
 80005b4:	9901      	ldr	r1, [sp, #4]
 80005b6:	b003      	add	sp, #12
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	46bb      	mov	fp, r7
 80005bc:	46b2      	mov	sl, r6
 80005be:	46a9      	mov	r9, r5
 80005c0:	46a0      	mov	r8, r4
 80005c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c4:	4642      	mov	r2, r8
 80005c6:	469b      	mov	fp, r3
 80005c8:	2320      	movs	r3, #32
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	4652      	mov	r2, sl
 80005ce:	40da      	lsrs	r2, r3
 80005d0:	4641      	mov	r1, r8
 80005d2:	0013      	movs	r3, r2
 80005d4:	464a      	mov	r2, r9
 80005d6:	408a      	lsls	r2, r1
 80005d8:	0017      	movs	r7, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	431f      	orrs	r7, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	001e      	movs	r6, r3
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d9c3      	bls.n	8000570 <__udivmoddi4+0x4c>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2300      	movs	r3, #0
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	4643      	mov	r3, r8
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0d8      	beq.n	80005a8 <__udivmoddi4+0x84>
 80005f6:	07fb      	lsls	r3, r7, #31
 80005f8:	0872      	lsrs	r2, r6, #1
 80005fa:	431a      	orrs	r2, r3
 80005fc:	4646      	mov	r6, r8
 80005fe:	087b      	lsrs	r3, r7, #1
 8000600:	e00e      	b.n	8000620 <__udivmoddi4+0xfc>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d101      	bne.n	800060a <__udivmoddi4+0xe6>
 8000606:	42a2      	cmp	r2, r4
 8000608:	d80c      	bhi.n	8000624 <__udivmoddi4+0x100>
 800060a:	1aa4      	subs	r4, r4, r2
 800060c:	419d      	sbcs	r5, r3
 800060e:	2001      	movs	r0, #1
 8000610:	1924      	adds	r4, r4, r4
 8000612:	416d      	adcs	r5, r5
 8000614:	2100      	movs	r1, #0
 8000616:	3e01      	subs	r6, #1
 8000618:	1824      	adds	r4, r4, r0
 800061a:	414d      	adcs	r5, r1
 800061c:	2e00      	cmp	r6, #0
 800061e:	d006      	beq.n	800062e <__udivmoddi4+0x10a>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d9ee      	bls.n	8000602 <__udivmoddi4+0xde>
 8000624:	3e01      	subs	r6, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1f8      	bne.n	8000620 <__udivmoddi4+0xfc>
 800062e:	9800      	ldr	r0, [sp, #0]
 8000630:	9901      	ldr	r1, [sp, #4]
 8000632:	465b      	mov	r3, fp
 8000634:	1900      	adds	r0, r0, r4
 8000636:	4169      	adcs	r1, r5
 8000638:	2b00      	cmp	r3, #0
 800063a:	db24      	blt.n	8000686 <__udivmoddi4+0x162>
 800063c:	002b      	movs	r3, r5
 800063e:	465a      	mov	r2, fp
 8000640:	4644      	mov	r4, r8
 8000642:	40d3      	lsrs	r3, r2
 8000644:	002a      	movs	r2, r5
 8000646:	40e2      	lsrs	r2, r4
 8000648:	001c      	movs	r4, r3
 800064a:	465b      	mov	r3, fp
 800064c:	0015      	movs	r5, r2
 800064e:	2b00      	cmp	r3, #0
 8000650:	db2a      	blt.n	80006a8 <__udivmoddi4+0x184>
 8000652:	0026      	movs	r6, r4
 8000654:	409e      	lsls	r6, r3
 8000656:	0033      	movs	r3, r6
 8000658:	0026      	movs	r6, r4
 800065a:	4647      	mov	r7, r8
 800065c:	40be      	lsls	r6, r7
 800065e:	0032      	movs	r2, r6
 8000660:	1a80      	subs	r0, r0, r2
 8000662:	4199      	sbcs	r1, r3
 8000664:	9000      	str	r0, [sp, #0]
 8000666:	9101      	str	r1, [sp, #4]
 8000668:	e79e      	b.n	80005a8 <__udivmoddi4+0x84>
 800066a:	42a3      	cmp	r3, r4
 800066c:	d8bc      	bhi.n	80005e8 <__udivmoddi4+0xc4>
 800066e:	e782      	b.n	8000576 <__udivmoddi4+0x52>
 8000670:	4642      	mov	r2, r8
 8000672:	2320      	movs	r3, #32
 8000674:	2100      	movs	r1, #0
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	9100      	str	r1, [sp, #0]
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	2201      	movs	r2, #1
 8000680:	40da      	lsrs	r2, r3
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	e785      	b.n	8000592 <__udivmoddi4+0x6e>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	1a9b      	subs	r3, r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	4646      	mov	r6, r8
 8000690:	409a      	lsls	r2, r3
 8000692:	0023      	movs	r3, r4
 8000694:	40f3      	lsrs	r3, r6
 8000696:	4644      	mov	r4, r8
 8000698:	4313      	orrs	r3, r2
 800069a:	002a      	movs	r2, r5
 800069c:	40e2      	lsrs	r2, r4
 800069e:	001c      	movs	r4, r3
 80006a0:	465b      	mov	r3, fp
 80006a2:	0015      	movs	r5, r2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dad4      	bge.n	8000652 <__udivmoddi4+0x12e>
 80006a8:	4642      	mov	r2, r8
 80006aa:	002f      	movs	r7, r5
 80006ac:	2320      	movs	r3, #32
 80006ae:	0026      	movs	r6, r4
 80006b0:	4097      	lsls	r7, r2
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	40de      	lsrs	r6, r3
 80006b6:	003b      	movs	r3, r7
 80006b8:	4333      	orrs	r3, r6
 80006ba:	e7cd      	b.n	8000658 <__udivmoddi4+0x134>

080006bc <__aeabi_fdiv>:
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	464f      	mov	r7, r9
 80006c0:	4646      	mov	r6, r8
 80006c2:	46d6      	mov	lr, sl
 80006c4:	0244      	lsls	r4, r0, #9
 80006c6:	b5c0      	push	{r6, r7, lr}
 80006c8:	0047      	lsls	r7, r0, #1
 80006ca:	1c0e      	adds	r6, r1, #0
 80006cc:	0a64      	lsrs	r4, r4, #9
 80006ce:	0e3f      	lsrs	r7, r7, #24
 80006d0:	0fc5      	lsrs	r5, r0, #31
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d03c      	beq.n	8000750 <__aeabi_fdiv+0x94>
 80006d6:	2fff      	cmp	r7, #255	@ 0xff
 80006d8:	d042      	beq.n	8000760 <__aeabi_fdiv+0xa4>
 80006da:	2300      	movs	r3, #0
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	4699      	mov	r9, r3
 80006e0:	469a      	mov	sl, r3
 80006e2:	00e4      	lsls	r4, r4, #3
 80006e4:	04d2      	lsls	r2, r2, #19
 80006e6:	4314      	orrs	r4, r2
 80006e8:	3f7f      	subs	r7, #127	@ 0x7f
 80006ea:	0273      	lsls	r3, r6, #9
 80006ec:	0a5b      	lsrs	r3, r3, #9
 80006ee:	4698      	mov	r8, r3
 80006f0:	0073      	lsls	r3, r6, #1
 80006f2:	0e1b      	lsrs	r3, r3, #24
 80006f4:	0ff6      	lsrs	r6, r6, #31
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d01b      	beq.n	8000732 <__aeabi_fdiv+0x76>
 80006fa:	2bff      	cmp	r3, #255	@ 0xff
 80006fc:	d013      	beq.n	8000726 <__aeabi_fdiv+0x6a>
 80006fe:	4642      	mov	r2, r8
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	00d2      	lsls	r2, r2, #3
 8000704:	04c9      	lsls	r1, r1, #19
 8000706:	4311      	orrs	r1, r2
 8000708:	4688      	mov	r8, r1
 800070a:	2000      	movs	r0, #0
 800070c:	3b7f      	subs	r3, #127	@ 0x7f
 800070e:	0029      	movs	r1, r5
 8000710:	1aff      	subs	r7, r7, r3
 8000712:	464b      	mov	r3, r9
 8000714:	4071      	eors	r1, r6
 8000716:	b2c9      	uxtb	r1, r1
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d900      	bls.n	800071e <__aeabi_fdiv+0x62>
 800071c:	e0b5      	b.n	800088a <__aeabi_fdiv+0x1ce>
 800071e:	4a74      	ldr	r2, [pc, #464]	@ (80008f0 <__aeabi_fdiv+0x234>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	58d3      	ldr	r3, [r2, r3]
 8000724:	469f      	mov	pc, r3
 8000726:	4643      	mov	r3, r8
 8000728:	2b00      	cmp	r3, #0
 800072a:	d13f      	bne.n	80007ac <__aeabi_fdiv+0xf0>
 800072c:	3fff      	subs	r7, #255	@ 0xff
 800072e:	3302      	adds	r3, #2
 8000730:	e003      	b.n	800073a <__aeabi_fdiv+0x7e>
 8000732:	4643      	mov	r3, r8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d12d      	bne.n	8000794 <__aeabi_fdiv+0xd8>
 8000738:	2301      	movs	r3, #1
 800073a:	0029      	movs	r1, r5
 800073c:	464a      	mov	r2, r9
 800073e:	4071      	eors	r1, r6
 8000740:	b2c9      	uxtb	r1, r1
 8000742:	431a      	orrs	r2, r3
 8000744:	2a0e      	cmp	r2, #14
 8000746:	d838      	bhi.n	80007ba <__aeabi_fdiv+0xfe>
 8000748:	486a      	ldr	r0, [pc, #424]	@ (80008f4 <__aeabi_fdiv+0x238>)
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	5882      	ldr	r2, [r0, r2]
 800074e:	4697      	mov	pc, r2
 8000750:	2c00      	cmp	r4, #0
 8000752:	d113      	bne.n	800077c <__aeabi_fdiv+0xc0>
 8000754:	2304      	movs	r3, #4
 8000756:	4699      	mov	r9, r3
 8000758:	3b03      	subs	r3, #3
 800075a:	2700      	movs	r7, #0
 800075c:	469a      	mov	sl, r3
 800075e:	e7c4      	b.n	80006ea <__aeabi_fdiv+0x2e>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d105      	bne.n	8000770 <__aeabi_fdiv+0xb4>
 8000764:	2308      	movs	r3, #8
 8000766:	4699      	mov	r9, r3
 8000768:	3b06      	subs	r3, #6
 800076a:	27ff      	movs	r7, #255	@ 0xff
 800076c:	469a      	mov	sl, r3
 800076e:	e7bc      	b.n	80006ea <__aeabi_fdiv+0x2e>
 8000770:	230c      	movs	r3, #12
 8000772:	4699      	mov	r9, r3
 8000774:	3b09      	subs	r3, #9
 8000776:	27ff      	movs	r7, #255	@ 0xff
 8000778:	469a      	mov	sl, r3
 800077a:	e7b6      	b.n	80006ea <__aeabi_fdiv+0x2e>
 800077c:	0020      	movs	r0, r4
 800077e:	f001 ff41 	bl	8002604 <__clzsi2>
 8000782:	2776      	movs	r7, #118	@ 0x76
 8000784:	1f43      	subs	r3, r0, #5
 8000786:	409c      	lsls	r4, r3
 8000788:	2300      	movs	r3, #0
 800078a:	427f      	negs	r7, r7
 800078c:	4699      	mov	r9, r3
 800078e:	469a      	mov	sl, r3
 8000790:	1a3f      	subs	r7, r7, r0
 8000792:	e7aa      	b.n	80006ea <__aeabi_fdiv+0x2e>
 8000794:	4640      	mov	r0, r8
 8000796:	f001 ff35 	bl	8002604 <__clzsi2>
 800079a:	4642      	mov	r2, r8
 800079c:	1f43      	subs	r3, r0, #5
 800079e:	409a      	lsls	r2, r3
 80007a0:	2376      	movs	r3, #118	@ 0x76
 80007a2:	425b      	negs	r3, r3
 80007a4:	1a1b      	subs	r3, r3, r0
 80007a6:	4690      	mov	r8, r2
 80007a8:	2000      	movs	r0, #0
 80007aa:	e7b0      	b.n	800070e <__aeabi_fdiv+0x52>
 80007ac:	2303      	movs	r3, #3
 80007ae:	464a      	mov	r2, r9
 80007b0:	431a      	orrs	r2, r3
 80007b2:	4691      	mov	r9, r2
 80007b4:	2003      	movs	r0, #3
 80007b6:	33fc      	adds	r3, #252	@ 0xfc
 80007b8:	e7a9      	b.n	800070e <__aeabi_fdiv+0x52>
 80007ba:	000d      	movs	r5, r1
 80007bc:	20ff      	movs	r0, #255	@ 0xff
 80007be:	2200      	movs	r2, #0
 80007c0:	05c0      	lsls	r0, r0, #23
 80007c2:	07ed      	lsls	r5, r5, #31
 80007c4:	4310      	orrs	r0, r2
 80007c6:	4328      	orrs	r0, r5
 80007c8:	bce0      	pop	{r5, r6, r7}
 80007ca:	46ba      	mov	sl, r7
 80007cc:	46b1      	mov	r9, r6
 80007ce:	46a8      	mov	r8, r5
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d2:	000d      	movs	r5, r1
 80007d4:	2000      	movs	r0, #0
 80007d6:	2200      	movs	r2, #0
 80007d8:	e7f2      	b.n	80007c0 <__aeabi_fdiv+0x104>
 80007da:	4653      	mov	r3, sl
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d0ed      	beq.n	80007bc <__aeabi_fdiv+0x100>
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d033      	beq.n	800084c <__aeabi_fdiv+0x190>
 80007e4:	46a0      	mov	r8, r4
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d105      	bne.n	80007f6 <__aeabi_fdiv+0x13a>
 80007ea:	2000      	movs	r0, #0
 80007ec:	2200      	movs	r2, #0
 80007ee:	e7e7      	b.n	80007c0 <__aeabi_fdiv+0x104>
 80007f0:	0035      	movs	r5, r6
 80007f2:	2803      	cmp	r0, #3
 80007f4:	d07a      	beq.n	80008ec <__aeabi_fdiv+0x230>
 80007f6:	003b      	movs	r3, r7
 80007f8:	337f      	adds	r3, #127	@ 0x7f
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	dd2d      	ble.n	800085a <__aeabi_fdiv+0x19e>
 80007fe:	4642      	mov	r2, r8
 8000800:	0752      	lsls	r2, r2, #29
 8000802:	d007      	beq.n	8000814 <__aeabi_fdiv+0x158>
 8000804:	220f      	movs	r2, #15
 8000806:	4641      	mov	r1, r8
 8000808:	400a      	ands	r2, r1
 800080a:	2a04      	cmp	r2, #4
 800080c:	d002      	beq.n	8000814 <__aeabi_fdiv+0x158>
 800080e:	2204      	movs	r2, #4
 8000810:	4694      	mov	ip, r2
 8000812:	44e0      	add	r8, ip
 8000814:	4642      	mov	r2, r8
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	d505      	bpl.n	8000826 <__aeabi_fdiv+0x16a>
 800081a:	4642      	mov	r2, r8
 800081c:	4b36      	ldr	r3, [pc, #216]	@ (80008f8 <__aeabi_fdiv+0x23c>)
 800081e:	401a      	ands	r2, r3
 8000820:	003b      	movs	r3, r7
 8000822:	4690      	mov	r8, r2
 8000824:	3380      	adds	r3, #128	@ 0x80
 8000826:	2bfe      	cmp	r3, #254	@ 0xfe
 8000828:	dcc8      	bgt.n	80007bc <__aeabi_fdiv+0x100>
 800082a:	4642      	mov	r2, r8
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	0a52      	lsrs	r2, r2, #9
 8000830:	b2d8      	uxtb	r0, r3
 8000832:	e7c5      	b.n	80007c0 <__aeabi_fdiv+0x104>
 8000834:	2280      	movs	r2, #128	@ 0x80
 8000836:	2500      	movs	r5, #0
 8000838:	20ff      	movs	r0, #255	@ 0xff
 800083a:	03d2      	lsls	r2, r2, #15
 800083c:	e7c0      	b.n	80007c0 <__aeabi_fdiv+0x104>
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	03d2      	lsls	r2, r2, #15
 8000842:	4214      	tst	r4, r2
 8000844:	d002      	beq.n	800084c <__aeabi_fdiv+0x190>
 8000846:	4643      	mov	r3, r8
 8000848:	4213      	tst	r3, r2
 800084a:	d049      	beq.n	80008e0 <__aeabi_fdiv+0x224>
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	03d2      	lsls	r2, r2, #15
 8000850:	4322      	orrs	r2, r4
 8000852:	0252      	lsls	r2, r2, #9
 8000854:	20ff      	movs	r0, #255	@ 0xff
 8000856:	0a52      	lsrs	r2, r2, #9
 8000858:	e7b2      	b.n	80007c0 <__aeabi_fdiv+0x104>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dcc3      	bgt.n	80007ea <__aeabi_fdiv+0x12e>
 8000862:	4642      	mov	r2, r8
 8000864:	40da      	lsrs	r2, r3
 8000866:	4643      	mov	r3, r8
 8000868:	379e      	adds	r7, #158	@ 0x9e
 800086a:	40bb      	lsls	r3, r7
 800086c:	1e59      	subs	r1, r3, #1
 800086e:	418b      	sbcs	r3, r1
 8000870:	431a      	orrs	r2, r3
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fdiv+0x1c4>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fdiv+0x1c4>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d529      	bpl.n	80008d8 <__aeabi_fdiv+0x21c>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e79a      	b.n	80007c0 <__aeabi_fdiv+0x104>
 800088a:	4642      	mov	r2, r8
 800088c:	0163      	lsls	r3, r4, #5
 800088e:	0155      	lsls	r5, r2, #5
 8000890:	42ab      	cmp	r3, r5
 8000892:	d215      	bcs.n	80008c0 <__aeabi_fdiv+0x204>
 8000894:	201b      	movs	r0, #27
 8000896:	2200      	movs	r2, #0
 8000898:	3f01      	subs	r7, #1
 800089a:	2601      	movs	r6, #1
 800089c:	001c      	movs	r4, r3
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	2c00      	cmp	r4, #0
 80008a4:	db01      	blt.n	80008aa <__aeabi_fdiv+0x1ee>
 80008a6:	429d      	cmp	r5, r3
 80008a8:	d801      	bhi.n	80008ae <__aeabi_fdiv+0x1f2>
 80008aa:	1b5b      	subs	r3, r3, r5
 80008ac:	4332      	orrs	r2, r6
 80008ae:	3801      	subs	r0, #1
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1f3      	bne.n	800089c <__aeabi_fdiv+0x1e0>
 80008b4:	1e58      	subs	r0, r3, #1
 80008b6:	4183      	sbcs	r3, r0
 80008b8:	4313      	orrs	r3, r2
 80008ba:	4698      	mov	r8, r3
 80008bc:	000d      	movs	r5, r1
 80008be:	e79a      	b.n	80007f6 <__aeabi_fdiv+0x13a>
 80008c0:	201a      	movs	r0, #26
 80008c2:	2201      	movs	r2, #1
 80008c4:	1b5b      	subs	r3, r3, r5
 80008c6:	e7e8      	b.n	800089a <__aeabi_fdiv+0x1de>
 80008c8:	3b02      	subs	r3, #2
 80008ca:	425a      	negs	r2, r3
 80008cc:	4153      	adcs	r3, r2
 80008ce:	425b      	negs	r3, r3
 80008d0:	0035      	movs	r5, r6
 80008d2:	2200      	movs	r2, #0
 80008d4:	b2d8      	uxtb	r0, r3
 80008d6:	e773      	b.n	80007c0 <__aeabi_fdiv+0x104>
 80008d8:	0192      	lsls	r2, r2, #6
 80008da:	2000      	movs	r0, #0
 80008dc:	0a52      	lsrs	r2, r2, #9
 80008de:	e76f      	b.n	80007c0 <__aeabi_fdiv+0x104>
 80008e0:	431a      	orrs	r2, r3
 80008e2:	0252      	lsls	r2, r2, #9
 80008e4:	0035      	movs	r5, r6
 80008e6:	20ff      	movs	r0, #255	@ 0xff
 80008e8:	0a52      	lsrs	r2, r2, #9
 80008ea:	e769      	b.n	80007c0 <__aeabi_fdiv+0x104>
 80008ec:	4644      	mov	r4, r8
 80008ee:	e7ad      	b.n	800084c <__aeabi_fdiv+0x190>
 80008f0:	08008bc0 	.word	0x08008bc0
 80008f4:	08008c00 	.word	0x08008c00
 80008f8:	f7ffffff 	.word	0xf7ffffff

080008fc <__eqsf2>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	0042      	lsls	r2, r0, #1
 8000900:	024e      	lsls	r6, r1, #9
 8000902:	004c      	lsls	r4, r1, #1
 8000904:	0245      	lsls	r5, r0, #9
 8000906:	0a6d      	lsrs	r5, r5, #9
 8000908:	0e12      	lsrs	r2, r2, #24
 800090a:	0fc3      	lsrs	r3, r0, #31
 800090c:	0a76      	lsrs	r6, r6, #9
 800090e:	0e24      	lsrs	r4, r4, #24
 8000910:	0fc9      	lsrs	r1, r1, #31
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d010      	beq.n	8000938 <__eqsf2+0x3c>
 8000916:	2cff      	cmp	r4, #255	@ 0xff
 8000918:	d00c      	beq.n	8000934 <__eqsf2+0x38>
 800091a:	2001      	movs	r0, #1
 800091c:	42a2      	cmp	r2, r4
 800091e:	d10a      	bne.n	8000936 <__eqsf2+0x3a>
 8000920:	42b5      	cmp	r5, r6
 8000922:	d108      	bne.n	8000936 <__eqsf2+0x3a>
 8000924:	428b      	cmp	r3, r1
 8000926:	d00f      	beq.n	8000948 <__eqsf2+0x4c>
 8000928:	2a00      	cmp	r2, #0
 800092a:	d104      	bne.n	8000936 <__eqsf2+0x3a>
 800092c:	0028      	movs	r0, r5
 800092e:	1e43      	subs	r3, r0, #1
 8000930:	4198      	sbcs	r0, r3
 8000932:	e000      	b.n	8000936 <__eqsf2+0x3a>
 8000934:	2001      	movs	r0, #1
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	2001      	movs	r0, #1
 800093a:	2cff      	cmp	r4, #255	@ 0xff
 800093c:	d1fb      	bne.n	8000936 <__eqsf2+0x3a>
 800093e:	4335      	orrs	r5, r6
 8000940:	d1f9      	bne.n	8000936 <__eqsf2+0x3a>
 8000942:	404b      	eors	r3, r1
 8000944:	0018      	movs	r0, r3
 8000946:	e7f6      	b.n	8000936 <__eqsf2+0x3a>
 8000948:	2000      	movs	r0, #0
 800094a:	e7f4      	b.n	8000936 <__eqsf2+0x3a>

0800094c <__gesf2>:
 800094c:	b530      	push	{r4, r5, lr}
 800094e:	0042      	lsls	r2, r0, #1
 8000950:	0244      	lsls	r4, r0, #9
 8000952:	024d      	lsls	r5, r1, #9
 8000954:	0fc3      	lsrs	r3, r0, #31
 8000956:	0048      	lsls	r0, r1, #1
 8000958:	0a64      	lsrs	r4, r4, #9
 800095a:	0e12      	lsrs	r2, r2, #24
 800095c:	0a6d      	lsrs	r5, r5, #9
 800095e:	0e00      	lsrs	r0, r0, #24
 8000960:	0fc9      	lsrs	r1, r1, #31
 8000962:	2aff      	cmp	r2, #255	@ 0xff
 8000964:	d019      	beq.n	800099a <__gesf2+0x4e>
 8000966:	28ff      	cmp	r0, #255	@ 0xff
 8000968:	d00b      	beq.n	8000982 <__gesf2+0x36>
 800096a:	2a00      	cmp	r2, #0
 800096c:	d11e      	bne.n	80009ac <__gesf2+0x60>
 800096e:	2800      	cmp	r0, #0
 8000970:	d10b      	bne.n	800098a <__gesf2+0x3e>
 8000972:	2d00      	cmp	r5, #0
 8000974:	d027      	beq.n	80009c6 <__gesf2+0x7a>
 8000976:	2c00      	cmp	r4, #0
 8000978:	d134      	bne.n	80009e4 <__gesf2+0x98>
 800097a:	2900      	cmp	r1, #0
 800097c:	d02f      	beq.n	80009de <__gesf2+0x92>
 800097e:	0008      	movs	r0, r1
 8000980:	bd30      	pop	{r4, r5, pc}
 8000982:	2d00      	cmp	r5, #0
 8000984:	d128      	bne.n	80009d8 <__gesf2+0x8c>
 8000986:	2a00      	cmp	r2, #0
 8000988:	d101      	bne.n	800098e <__gesf2+0x42>
 800098a:	2c00      	cmp	r4, #0
 800098c:	d0f5      	beq.n	800097a <__gesf2+0x2e>
 800098e:	428b      	cmp	r3, r1
 8000990:	d107      	bne.n	80009a2 <__gesf2+0x56>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d023      	beq.n	80009de <__gesf2+0x92>
 8000996:	0018      	movs	r0, r3
 8000998:	e7f2      	b.n	8000980 <__gesf2+0x34>
 800099a:	2c00      	cmp	r4, #0
 800099c:	d11c      	bne.n	80009d8 <__gesf2+0x8c>
 800099e:	28ff      	cmp	r0, #255	@ 0xff
 80009a0:	d014      	beq.n	80009cc <__gesf2+0x80>
 80009a2:	1e58      	subs	r0, r3, #1
 80009a4:	2302      	movs	r3, #2
 80009a6:	4018      	ands	r0, r3
 80009a8:	3801      	subs	r0, #1
 80009aa:	e7e9      	b.n	8000980 <__gesf2+0x34>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d0f8      	beq.n	80009a2 <__gesf2+0x56>
 80009b0:	428b      	cmp	r3, r1
 80009b2:	d1f6      	bne.n	80009a2 <__gesf2+0x56>
 80009b4:	4282      	cmp	r2, r0
 80009b6:	dcf4      	bgt.n	80009a2 <__gesf2+0x56>
 80009b8:	dbeb      	blt.n	8000992 <__gesf2+0x46>
 80009ba:	42ac      	cmp	r4, r5
 80009bc:	d8f1      	bhi.n	80009a2 <__gesf2+0x56>
 80009be:	2000      	movs	r0, #0
 80009c0:	42ac      	cmp	r4, r5
 80009c2:	d2dd      	bcs.n	8000980 <__gesf2+0x34>
 80009c4:	e7e5      	b.n	8000992 <__gesf2+0x46>
 80009c6:	2c00      	cmp	r4, #0
 80009c8:	d0da      	beq.n	8000980 <__gesf2+0x34>
 80009ca:	e7ea      	b.n	80009a2 <__gesf2+0x56>
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d103      	bne.n	80009d8 <__gesf2+0x8c>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d1e6      	bne.n	80009a2 <__gesf2+0x56>
 80009d4:	2000      	movs	r0, #0
 80009d6:	e7d3      	b.n	8000980 <__gesf2+0x34>
 80009d8:	2002      	movs	r0, #2
 80009da:	4240      	negs	r0, r0
 80009dc:	e7d0      	b.n	8000980 <__gesf2+0x34>
 80009de:	2001      	movs	r0, #1
 80009e0:	4240      	negs	r0, r0
 80009e2:	e7cd      	b.n	8000980 <__gesf2+0x34>
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d0e8      	beq.n	80009ba <__gesf2+0x6e>
 80009e8:	e7db      	b.n	80009a2 <__gesf2+0x56>
 80009ea:	46c0      	nop			@ (mov r8, r8)

080009ec <__lesf2>:
 80009ec:	b530      	push	{r4, r5, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	0244      	lsls	r4, r0, #9
 80009f2:	024d      	lsls	r5, r1, #9
 80009f4:	0fc3      	lsrs	r3, r0, #31
 80009f6:	0048      	lsls	r0, r1, #1
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	0e12      	lsrs	r2, r2, #24
 80009fc:	0a6d      	lsrs	r5, r5, #9
 80009fe:	0e00      	lsrs	r0, r0, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d01a      	beq.n	8000a3c <__lesf2+0x50>
 8000a06:	28ff      	cmp	r0, #255	@ 0xff
 8000a08:	d00e      	beq.n	8000a28 <__lesf2+0x3c>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d11e      	bne.n	8000a4c <__lesf2+0x60>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d10e      	bne.n	8000a30 <__lesf2+0x44>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d02a      	beq.n	8000a6c <__lesf2+0x80>
 8000a16:	2c00      	cmp	r4, #0
 8000a18:	d00c      	beq.n	8000a34 <__lesf2+0x48>
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d01d      	beq.n	8000a5a <__lesf2+0x6e>
 8000a1e:	1e58      	subs	r0, r3, #1
 8000a20:	2302      	movs	r3, #2
 8000a22:	4018      	ands	r0, r3
 8000a24:	3801      	subs	r0, #1
 8000a26:	e010      	b.n	8000a4a <__lesf2+0x5e>
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d10d      	bne.n	8000a48 <__lesf2+0x5c>
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d120      	bne.n	8000a72 <__lesf2+0x86>
 8000a30:	2c00      	cmp	r4, #0
 8000a32:	d11e      	bne.n	8000a72 <__lesf2+0x86>
 8000a34:	2900      	cmp	r1, #0
 8000a36:	d023      	beq.n	8000a80 <__lesf2+0x94>
 8000a38:	0008      	movs	r0, r1
 8000a3a:	e006      	b.n	8000a4a <__lesf2+0x5e>
 8000a3c:	2c00      	cmp	r4, #0
 8000a3e:	d103      	bne.n	8000a48 <__lesf2+0x5c>
 8000a40:	28ff      	cmp	r0, #255	@ 0xff
 8000a42:	d1ec      	bne.n	8000a1e <__lesf2+0x32>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d017      	beq.n	8000a78 <__lesf2+0x8c>
 8000a48:	2002      	movs	r0, #2
 8000a4a:	bd30      	pop	{r4, r5, pc}
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d0e6      	beq.n	8000a1e <__lesf2+0x32>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d1e4      	bne.n	8000a1e <__lesf2+0x32>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	dce2      	bgt.n	8000a1e <__lesf2+0x32>
 8000a58:	db04      	blt.n	8000a64 <__lesf2+0x78>
 8000a5a:	42ac      	cmp	r4, r5
 8000a5c:	d8df      	bhi.n	8000a1e <__lesf2+0x32>
 8000a5e:	2000      	movs	r0, #0
 8000a60:	42ac      	cmp	r4, r5
 8000a62:	d2f2      	bcs.n	8000a4a <__lesf2+0x5e>
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <__lesf2+0x94>
 8000a68:	0018      	movs	r0, r3
 8000a6a:	e7ee      	b.n	8000a4a <__lesf2+0x5e>
 8000a6c:	2c00      	cmp	r4, #0
 8000a6e:	d0ec      	beq.n	8000a4a <__lesf2+0x5e>
 8000a70:	e7d5      	b.n	8000a1e <__lesf2+0x32>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d1d3      	bne.n	8000a1e <__lesf2+0x32>
 8000a76:	e7f5      	b.n	8000a64 <__lesf2+0x78>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d0e5      	beq.n	8000a4a <__lesf2+0x5e>
 8000a7e:	e7ce      	b.n	8000a1e <__lesf2+0x32>
 8000a80:	2001      	movs	r0, #1
 8000a82:	4240      	negs	r0, r0
 8000a84:	e7e1      	b.n	8000a4a <__lesf2+0x5e>
 8000a86:	46c0      	nop			@ (mov r8, r8)

08000a88 <__aeabi_fmul>:
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	464f      	mov	r7, r9
 8000a8c:	4646      	mov	r6, r8
 8000a8e:	46d6      	mov	lr, sl
 8000a90:	0243      	lsls	r3, r0, #9
 8000a92:	0a5b      	lsrs	r3, r3, #9
 8000a94:	0045      	lsls	r5, r0, #1
 8000a96:	b5c0      	push	{r6, r7, lr}
 8000a98:	4699      	mov	r9, r3
 8000a9a:	1c0f      	adds	r7, r1, #0
 8000a9c:	0e2d      	lsrs	r5, r5, #24
 8000a9e:	0fc6      	lsrs	r6, r0, #31
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fmul+0x1e>
 8000aa4:	e088      	b.n	8000bb8 <__aeabi_fmul+0x130>
 8000aa6:	2dff      	cmp	r5, #255	@ 0xff
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fmul+0x24>
 8000aaa:	e08d      	b.n	8000bc8 <__aeabi_fmul+0x140>
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	04d2      	lsls	r2, r2, #19
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	4691      	mov	r9, r2
 8000ab8:	4698      	mov	r8, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	3d7f      	subs	r5, #127	@ 0x7f
 8000abe:	027c      	lsls	r4, r7, #9
 8000ac0:	007b      	lsls	r3, r7, #1
 8000ac2:	0a64      	lsrs	r4, r4, #9
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	0fff      	lsrs	r7, r7, #31
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d068      	beq.n	8000b9e <__aeabi_fmul+0x116>
 8000acc:	2bff      	cmp	r3, #255	@ 0xff
 8000ace:	d021      	beq.n	8000b14 <__aeabi_fmul+0x8c>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	00e4      	lsls	r4, r4, #3
 8000ad4:	04d2      	lsls	r2, r2, #19
 8000ad6:	4314      	orrs	r4, r2
 8000ad8:	4642      	mov	r2, r8
 8000ada:	3b7f      	subs	r3, #127	@ 0x7f
 8000adc:	195b      	adds	r3, r3, r5
 8000ade:	2100      	movs	r1, #0
 8000ae0:	1c5d      	adds	r5, r3, #1
 8000ae2:	2a0a      	cmp	r2, #10
 8000ae4:	dc2e      	bgt.n	8000b44 <__aeabi_fmul+0xbc>
 8000ae6:	407e      	eors	r6, r7
 8000ae8:	4642      	mov	r2, r8
 8000aea:	2a02      	cmp	r2, #2
 8000aec:	dc23      	bgt.n	8000b36 <__aeabi_fmul+0xae>
 8000aee:	3a01      	subs	r2, #1
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	d900      	bls.n	8000af6 <__aeabi_fmul+0x6e>
 8000af4:	e0bd      	b.n	8000c72 <__aeabi_fmul+0x1ea>
 8000af6:	2902      	cmp	r1, #2
 8000af8:	d06e      	beq.n	8000bd8 <__aeabi_fmul+0x150>
 8000afa:	2901      	cmp	r1, #1
 8000afc:	d12c      	bne.n	8000b58 <__aeabi_fmul+0xd0>
 8000afe:	2000      	movs	r0, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	05c0      	lsls	r0, r0, #23
 8000b04:	07f6      	lsls	r6, r6, #31
 8000b06:	4310      	orrs	r0, r2
 8000b08:	4330      	orrs	r0, r6
 8000b0a:	bce0      	pop	{r5, r6, r7}
 8000b0c:	46ba      	mov	sl, r7
 8000b0e:	46b1      	mov	r9, r6
 8000b10:	46a8      	mov	r8, r5
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b14:	002b      	movs	r3, r5
 8000b16:	33ff      	adds	r3, #255	@ 0xff
 8000b18:	2c00      	cmp	r4, #0
 8000b1a:	d065      	beq.n	8000be8 <__aeabi_fmul+0x160>
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	4641      	mov	r1, r8
 8000b20:	4311      	orrs	r1, r2
 8000b22:	0032      	movs	r2, r6
 8000b24:	3501      	adds	r5, #1
 8000b26:	4688      	mov	r8, r1
 8000b28:	407a      	eors	r2, r7
 8000b2a:	35ff      	adds	r5, #255	@ 0xff
 8000b2c:	290a      	cmp	r1, #10
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_fmul+0xaa>
 8000b30:	e0d8      	b.n	8000ce4 <__aeabi_fmul+0x25c>
 8000b32:	0016      	movs	r6, r2
 8000b34:	2103      	movs	r1, #3
 8000b36:	4640      	mov	r0, r8
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4082      	lsls	r2, r0
 8000b3c:	20a6      	movs	r0, #166	@ 0xa6
 8000b3e:	00c0      	lsls	r0, r0, #3
 8000b40:	4202      	tst	r2, r0
 8000b42:	d020      	beq.n	8000b86 <__aeabi_fmul+0xfe>
 8000b44:	4653      	mov	r3, sl
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d046      	beq.n	8000bd8 <__aeabi_fmul+0x150>
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fmul+0xc8>
 8000b4e:	e0bb      	b.n	8000cc8 <__aeabi_fmul+0x240>
 8000b50:	4651      	mov	r1, sl
 8000b52:	464c      	mov	r4, r9
 8000b54:	2901      	cmp	r1, #1
 8000b56:	d0d2      	beq.n	8000afe <__aeabi_fmul+0x76>
 8000b58:	002b      	movs	r3, r5
 8000b5a:	337f      	adds	r3, #127	@ 0x7f
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	dd70      	ble.n	8000c42 <__aeabi_fmul+0x1ba>
 8000b60:	0762      	lsls	r2, r4, #29
 8000b62:	d004      	beq.n	8000b6e <__aeabi_fmul+0xe6>
 8000b64:	220f      	movs	r2, #15
 8000b66:	4022      	ands	r2, r4
 8000b68:	2a04      	cmp	r2, #4
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fmul+0xe6>
 8000b6c:	3404      	adds	r4, #4
 8000b6e:	0122      	lsls	r2, r4, #4
 8000b70:	d503      	bpl.n	8000b7a <__aeabi_fmul+0xf2>
 8000b72:	4b63      	ldr	r3, [pc, #396]	@ (8000d00 <__aeabi_fmul+0x278>)
 8000b74:	401c      	ands	r4, r3
 8000b76:	002b      	movs	r3, r5
 8000b78:	3380      	adds	r3, #128	@ 0x80
 8000b7a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b7c:	dc2c      	bgt.n	8000bd8 <__aeabi_fmul+0x150>
 8000b7e:	01a2      	lsls	r2, r4, #6
 8000b80:	0a52      	lsrs	r2, r2, #9
 8000b82:	b2d8      	uxtb	r0, r3
 8000b84:	e7bd      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000b86:	2090      	movs	r0, #144	@ 0x90
 8000b88:	0080      	lsls	r0, r0, #2
 8000b8a:	4202      	tst	r2, r0
 8000b8c:	d127      	bne.n	8000bde <__aeabi_fmul+0x156>
 8000b8e:	38b9      	subs	r0, #185	@ 0xb9
 8000b90:	38ff      	subs	r0, #255	@ 0xff
 8000b92:	4210      	tst	r0, r2
 8000b94:	d06d      	beq.n	8000c72 <__aeabi_fmul+0x1ea>
 8000b96:	003e      	movs	r6, r7
 8000b98:	46a1      	mov	r9, r4
 8000b9a:	468a      	mov	sl, r1
 8000b9c:	e7d2      	b.n	8000b44 <__aeabi_fmul+0xbc>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d141      	bne.n	8000c26 <__aeabi_fmul+0x19e>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	4642      	mov	r2, r8
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	4690      	mov	r8, r2
 8000baa:	002b      	movs	r3, r5
 8000bac:	4642      	mov	r2, r8
 8000bae:	2101      	movs	r1, #1
 8000bb0:	1c5d      	adds	r5, r3, #1
 8000bb2:	2a0a      	cmp	r2, #10
 8000bb4:	dd97      	ble.n	8000ae6 <__aeabi_fmul+0x5e>
 8000bb6:	e7c5      	b.n	8000b44 <__aeabi_fmul+0xbc>
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d126      	bne.n	8000c0a <__aeabi_fmul+0x182>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	e77a      	b.n	8000abe <__aeabi_fmul+0x36>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d118      	bne.n	8000bfe <__aeabi_fmul+0x176>
 8000bcc:	2308      	movs	r3, #8
 8000bce:	4698      	mov	r8, r3
 8000bd0:	3b06      	subs	r3, #6
 8000bd2:	25ff      	movs	r5, #255	@ 0xff
 8000bd4:	469a      	mov	sl, r3
 8000bd6:	e772      	b.n	8000abe <__aeabi_fmul+0x36>
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	2200      	movs	r2, #0
 8000bdc:	e791      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	2600      	movs	r6, #0
 8000be2:	20ff      	movs	r0, #255	@ 0xff
 8000be4:	03d2      	lsls	r2, r2, #15
 8000be6:	e78c      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000be8:	4641      	mov	r1, r8
 8000bea:	2202      	movs	r2, #2
 8000bec:	3501      	adds	r5, #1
 8000bee:	4311      	orrs	r1, r2
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	35ff      	adds	r5, #255	@ 0xff
 8000bf4:	290a      	cmp	r1, #10
 8000bf6:	dca5      	bgt.n	8000b44 <__aeabi_fmul+0xbc>
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	407e      	eors	r6, r7
 8000bfc:	e774      	b.n	8000ae8 <__aeabi_fmul+0x60>
 8000bfe:	230c      	movs	r3, #12
 8000c00:	4698      	mov	r8, r3
 8000c02:	3b09      	subs	r3, #9
 8000c04:	25ff      	movs	r5, #255	@ 0xff
 8000c06:	469a      	mov	sl, r3
 8000c08:	e759      	b.n	8000abe <__aeabi_fmul+0x36>
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fcfa 	bl	8002604 <__clzsi2>
 8000c10:	464a      	mov	r2, r9
 8000c12:	1f43      	subs	r3, r0, #5
 8000c14:	2576      	movs	r5, #118	@ 0x76
 8000c16:	409a      	lsls	r2, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	426d      	negs	r5, r5
 8000c1c:	4691      	mov	r9, r2
 8000c1e:	4698      	mov	r8, r3
 8000c20:	469a      	mov	sl, r3
 8000c22:	1a2d      	subs	r5, r5, r0
 8000c24:	e74b      	b.n	8000abe <__aeabi_fmul+0x36>
 8000c26:	0020      	movs	r0, r4
 8000c28:	f001 fcec 	bl	8002604 <__clzsi2>
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	1f43      	subs	r3, r0, #5
 8000c30:	409c      	lsls	r4, r3
 8000c32:	1a2b      	subs	r3, r5, r0
 8000c34:	3b76      	subs	r3, #118	@ 0x76
 8000c36:	2100      	movs	r1, #0
 8000c38:	1c5d      	adds	r5, r3, #1
 8000c3a:	2a0a      	cmp	r2, #10
 8000c3c:	dc00      	bgt.n	8000c40 <__aeabi_fmul+0x1b8>
 8000c3e:	e752      	b.n	8000ae6 <__aeabi_fmul+0x5e>
 8000c40:	e780      	b.n	8000b44 <__aeabi_fmul+0xbc>
 8000c42:	2201      	movs	r2, #1
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b1b      	cmp	r3, #27
 8000c48:	dd00      	ble.n	8000c4c <__aeabi_fmul+0x1c4>
 8000c4a:	e758      	b.n	8000afe <__aeabi_fmul+0x76>
 8000c4c:	359e      	adds	r5, #158	@ 0x9e
 8000c4e:	0022      	movs	r2, r4
 8000c50:	40ac      	lsls	r4, r5
 8000c52:	40da      	lsrs	r2, r3
 8000c54:	1e63      	subs	r3, r4, #1
 8000c56:	419c      	sbcs	r4, r3
 8000c58:	4322      	orrs	r2, r4
 8000c5a:	0753      	lsls	r3, r2, #29
 8000c5c:	d004      	beq.n	8000c68 <__aeabi_fmul+0x1e0>
 8000c5e:	230f      	movs	r3, #15
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d000      	beq.n	8000c68 <__aeabi_fmul+0x1e0>
 8000c66:	3204      	adds	r2, #4
 8000c68:	0153      	lsls	r3, r2, #5
 8000c6a:	d537      	bpl.n	8000cdc <__aeabi_fmul+0x254>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	e747      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	464a      	mov	r2, r9
 8000c76:	0424      	lsls	r4, r4, #16
 8000c78:	0c24      	lsrs	r4, r4, #16
 8000c7a:	0027      	movs	r7, r4
 8000c7c:	0c10      	lsrs	r0, r2, #16
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	0c12      	lsrs	r2, r2, #16
 8000c82:	4344      	muls	r4, r0
 8000c84:	4357      	muls	r7, r2
 8000c86:	4348      	muls	r0, r1
 8000c88:	4351      	muls	r1, r2
 8000c8a:	0c3a      	lsrs	r2, r7, #16
 8000c8c:	1909      	adds	r1, r1, r4
 8000c8e:	1852      	adds	r2, r2, r1
 8000c90:	4294      	cmp	r4, r2
 8000c92:	d903      	bls.n	8000c9c <__aeabi_fmul+0x214>
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	0249      	lsls	r1, r1, #9
 8000c98:	468c      	mov	ip, r1
 8000c9a:	4460      	add	r0, ip
 8000c9c:	043f      	lsls	r7, r7, #16
 8000c9e:	0411      	lsls	r1, r2, #16
 8000ca0:	0c3f      	lsrs	r7, r7, #16
 8000ca2:	19c9      	adds	r1, r1, r7
 8000ca4:	018c      	lsls	r4, r1, #6
 8000ca6:	1e67      	subs	r7, r4, #1
 8000ca8:	41bc      	sbcs	r4, r7
 8000caa:	0c12      	lsrs	r2, r2, #16
 8000cac:	0e89      	lsrs	r1, r1, #26
 8000cae:	1812      	adds	r2, r2, r0
 8000cb0:	430c      	orrs	r4, r1
 8000cb2:	0192      	lsls	r2, r2, #6
 8000cb4:	4314      	orrs	r4, r2
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	d50e      	bpl.n	8000cd8 <__aeabi_fmul+0x250>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	0862      	lsrs	r2, r4, #1
 8000cbe:	401c      	ands	r4, r3
 8000cc0:	4314      	orrs	r4, r2
 8000cc2:	e749      	b.n	8000b58 <__aeabi_fmul+0xd0>
 8000cc4:	003e      	movs	r6, r7
 8000cc6:	46a1      	mov	r9, r4
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	464b      	mov	r3, r9
 8000ccc:	03d2      	lsls	r2, r2, #15
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	0252      	lsls	r2, r2, #9
 8000cd2:	20ff      	movs	r0, #255	@ 0xff
 8000cd4:	0a52      	lsrs	r2, r2, #9
 8000cd6:	e714      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000cd8:	001d      	movs	r5, r3
 8000cda:	e73d      	b.n	8000b58 <__aeabi_fmul+0xd0>
 8000cdc:	0192      	lsls	r2, r2, #6
 8000cde:	2000      	movs	r0, #0
 8000ce0:	0a52      	lsrs	r2, r2, #9
 8000ce2:	e70e      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000ce4:	290f      	cmp	r1, #15
 8000ce6:	d1ed      	bne.n	8000cc4 <__aeabi_fmul+0x23c>
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	464b      	mov	r3, r9
 8000cec:	03d2      	lsls	r2, r2, #15
 8000cee:	4213      	tst	r3, r2
 8000cf0:	d0ea      	beq.n	8000cc8 <__aeabi_fmul+0x240>
 8000cf2:	4214      	tst	r4, r2
 8000cf4:	d1e8      	bne.n	8000cc8 <__aeabi_fmul+0x240>
 8000cf6:	003e      	movs	r6, r7
 8000cf8:	20ff      	movs	r0, #255	@ 0xff
 8000cfa:	4322      	orrs	r2, r4
 8000cfc:	e701      	b.n	8000b02 <__aeabi_fmul+0x7a>
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	f7ffffff 	.word	0xf7ffffff

08000d04 <__aeabi_fsub>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4647      	mov	r7, r8
 8000d08:	46ce      	mov	lr, r9
 8000d0a:	024e      	lsls	r6, r1, #9
 8000d0c:	0243      	lsls	r3, r0, #9
 8000d0e:	0045      	lsls	r5, r0, #1
 8000d10:	0a72      	lsrs	r2, r6, #9
 8000d12:	0fc4      	lsrs	r4, r0, #31
 8000d14:	0048      	lsls	r0, r1, #1
 8000d16:	b580      	push	{r7, lr}
 8000d18:	4694      	mov	ip, r2
 8000d1a:	0a5f      	lsrs	r7, r3, #9
 8000d1c:	0e2d      	lsrs	r5, r5, #24
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	0e00      	lsrs	r0, r0, #24
 8000d22:	0fc9      	lsrs	r1, r1, #31
 8000d24:	09b6      	lsrs	r6, r6, #6
 8000d26:	28ff      	cmp	r0, #255	@ 0xff
 8000d28:	d024      	beq.n	8000d74 <__aeabi_fsub+0x70>
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4051      	eors	r1, r2
 8000d2e:	1a2a      	subs	r2, r5, r0
 8000d30:	428c      	cmp	r4, r1
 8000d32:	d00f      	beq.n	8000d54 <__aeabi_fsub+0x50>
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	dc00      	bgt.n	8000d3a <__aeabi_fsub+0x36>
 8000d38:	e16a      	b.n	8001010 <__aeabi_fsub+0x30c>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d135      	bne.n	8000daa <__aeabi_fsub+0xa6>
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x40>
 8000d42:	e0a2      	b.n	8000e8a <__aeabi_fsub+0x186>
 8000d44:	1e51      	subs	r1, r2, #1
 8000d46:	2a01      	cmp	r2, #1
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x48>
 8000d4a:	e124      	b.n	8000f96 <__aeabi_fsub+0x292>
 8000d4c:	2aff      	cmp	r2, #255	@ 0xff
 8000d4e:	d021      	beq.n	8000d94 <__aeabi_fsub+0x90>
 8000d50:	000a      	movs	r2, r1
 8000d52:	e02f      	b.n	8000db4 <__aeabi_fsub+0xb0>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	dc00      	bgt.n	8000d5a <__aeabi_fsub+0x56>
 8000d58:	e167      	b.n	800102a <__aeabi_fsub+0x326>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d05e      	beq.n	8000e1c <__aeabi_fsub+0x118>
 8000d5e:	2dff      	cmp	r5, #255	@ 0xff
 8000d60:	d018      	beq.n	8000d94 <__aeabi_fsub+0x90>
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	04c9      	lsls	r1, r1, #19
 8000d66:	430e      	orrs	r6, r1
 8000d68:	2a1b      	cmp	r2, #27
 8000d6a:	dc00      	bgt.n	8000d6e <__aeabi_fsub+0x6a>
 8000d6c:	e076      	b.n	8000e5c <__aeabi_fsub+0x158>
 8000d6e:	002a      	movs	r2, r5
 8000d70:	3301      	adds	r3, #1
 8000d72:	e032      	b.n	8000dda <__aeabi_fsub+0xd6>
 8000d74:	002a      	movs	r2, r5
 8000d76:	3aff      	subs	r2, #255	@ 0xff
 8000d78:	4691      	mov	r9, r2
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	d042      	beq.n	8000e04 <__aeabi_fsub+0x100>
 8000d7e:	428c      	cmp	r4, r1
 8000d80:	d055      	beq.n	8000e2e <__aeabi_fsub+0x12a>
 8000d82:	464a      	mov	r2, r9
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_fsub+0x86>
 8000d88:	e09c      	b.n	8000ec4 <__aeabi_fsub+0x1c0>
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_fsub+0x8c>
 8000d8e:	e077      	b.n	8000e80 <__aeabi_fsub+0x17c>
 8000d90:	000c      	movs	r4, r1
 8000d92:	0033      	movs	r3, r6
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fsub+0x98>
 8000d9a:	e06e      	b.n	8000e7a <__aeabi_fsub+0x176>
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	03d2      	lsls	r2, r2, #15
 8000da0:	4313      	orrs	r3, r2
 8000da2:	025b      	lsls	r3, r3, #9
 8000da4:	20ff      	movs	r0, #255	@ 0xff
 8000da6:	0a5b      	lsrs	r3, r3, #9
 8000da8:	e024      	b.n	8000df4 <__aeabi_fsub+0xf0>
 8000daa:	2dff      	cmp	r5, #255	@ 0xff
 8000dac:	d0f2      	beq.n	8000d94 <__aeabi_fsub+0x90>
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	04c9      	lsls	r1, r1, #19
 8000db2:	430e      	orrs	r6, r1
 8000db4:	2101      	movs	r1, #1
 8000db6:	2a1b      	cmp	r2, #27
 8000db8:	dc08      	bgt.n	8000dcc <__aeabi_fsub+0xc8>
 8000dba:	0031      	movs	r1, r6
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	40d1      	lsrs	r1, r2
 8000dc0:	1a82      	subs	r2, r0, r2
 8000dc2:	4096      	lsls	r6, r2
 8000dc4:	0032      	movs	r2, r6
 8000dc6:	1e50      	subs	r0, r2, #1
 8000dc8:	4182      	sbcs	r2, r0
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	015a      	lsls	r2, r3, #5
 8000dd0:	d460      	bmi.n	8000e94 <__aeabi_fsub+0x190>
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	002a      	movs	r2, r5
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	d057      	beq.n	8000e8a <__aeabi_fsub+0x186>
 8000dda:	210f      	movs	r1, #15
 8000ddc:	4019      	ands	r1, r3
 8000dde:	2904      	cmp	r1, #4
 8000de0:	d000      	beq.n	8000de4 <__aeabi_fsub+0xe0>
 8000de2:	3304      	adds	r3, #4
 8000de4:	0159      	lsls	r1, r3, #5
 8000de6:	d550      	bpl.n	8000e8a <__aeabi_fsub+0x186>
 8000de8:	1c50      	adds	r0, r2, #1
 8000dea:	2afe      	cmp	r2, #254	@ 0xfe
 8000dec:	d045      	beq.n	8000e7a <__aeabi_fsub+0x176>
 8000dee:	019b      	lsls	r3, r3, #6
 8000df0:	b2c0      	uxtb	r0, r0
 8000df2:	0a5b      	lsrs	r3, r3, #9
 8000df4:	05c0      	lsls	r0, r0, #23
 8000df6:	4318      	orrs	r0, r3
 8000df8:	07e4      	lsls	r4, r4, #31
 8000dfa:	4320      	orrs	r0, r4
 8000dfc:	bcc0      	pop	{r6, r7}
 8000dfe:	46b9      	mov	r9, r7
 8000e00:	46b0      	mov	r8, r6
 8000e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e04:	2201      	movs	r2, #1
 8000e06:	4051      	eors	r1, r2
 8000e08:	428c      	cmp	r4, r1
 8000e0a:	d1ba      	bne.n	8000d82 <__aeabi_fsub+0x7e>
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	d010      	beq.n	8000e34 <__aeabi_fsub+0x130>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x114>
 8000e16:	e098      	b.n	8000f4a <__aeabi_fsub+0x246>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e7bb      	b.n	8000d94 <__aeabi_fsub+0x90>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d034      	beq.n	8000e8a <__aeabi_fsub+0x186>
 8000e20:	1e51      	subs	r1, r2, #1
 8000e22:	2a01      	cmp	r2, #1
 8000e24:	d06e      	beq.n	8000f04 <__aeabi_fsub+0x200>
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d0b4      	beq.n	8000d94 <__aeabi_fsub+0x90>
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	e79c      	b.n	8000d68 <__aeabi_fsub+0x64>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_fsub+0x130>
 8000e32:	e088      	b.n	8000f46 <__aeabi_fsub+0x242>
 8000e34:	20fe      	movs	r0, #254	@ 0xfe
 8000e36:	1c6a      	adds	r2, r5, #1
 8000e38:	4210      	tst	r0, r2
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x13a>
 8000e3c:	e092      	b.n	8000f64 <__aeabi_fsub+0x260>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fsub+0x140>
 8000e42:	e0a4      	b.n	8000f8e <__aeabi_fsub+0x28a>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x146>
 8000e48:	e0cb      	b.n	8000fe2 <__aeabi_fsub+0x2de>
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x14c>
 8000e4e:	e0ca      	b.n	8000fe6 <__aeabi_fsub+0x2e2>
 8000e50:	2200      	movs	r2, #0
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	025b      	lsls	r3, r3, #9
 8000e56:	0a5b      	lsrs	r3, r3, #9
 8000e58:	b2d0      	uxtb	r0, r2
 8000e5a:	e7cb      	b.n	8000df4 <__aeabi_fsub+0xf0>
 8000e5c:	0031      	movs	r1, r6
 8000e5e:	2020      	movs	r0, #32
 8000e60:	40d1      	lsrs	r1, r2
 8000e62:	1a82      	subs	r2, r0, r2
 8000e64:	4096      	lsls	r6, r2
 8000e66:	0032      	movs	r2, r6
 8000e68:	1e50      	subs	r0, r2, #1
 8000e6a:	4182      	sbcs	r2, r0
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	015a      	lsls	r2, r3, #5
 8000e72:	d5ae      	bpl.n	8000dd2 <__aeabi_fsub+0xce>
 8000e74:	1c6a      	adds	r2, r5, #1
 8000e76:	2dfe      	cmp	r5, #254	@ 0xfe
 8000e78:	d14a      	bne.n	8000f10 <__aeabi_fsub+0x20c>
 8000e7a:	20ff      	movs	r0, #255	@ 0xff
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e7b9      	b.n	8000df4 <__aeabi_fsub+0xf0>
 8000e80:	22ff      	movs	r2, #255	@ 0xff
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d14b      	bne.n	8000f1e <__aeabi_fsub+0x21a>
 8000e86:	000c      	movs	r4, r1
 8000e88:	0033      	movs	r3, r6
 8000e8a:	08db      	lsrs	r3, r3, #3
 8000e8c:	2aff      	cmp	r2, #255	@ 0xff
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_fsub+0x18e>
 8000e90:	e781      	b.n	8000d96 <__aeabi_fsub+0x92>
 8000e92:	e7df      	b.n	8000e54 <__aeabi_fsub+0x150>
 8000e94:	019f      	lsls	r7, r3, #6
 8000e96:	09bf      	lsrs	r7, r7, #6
 8000e98:	0038      	movs	r0, r7
 8000e9a:	f001 fbb3 	bl	8002604 <__clzsi2>
 8000e9e:	3805      	subs	r0, #5
 8000ea0:	4087      	lsls	r7, r0
 8000ea2:	4285      	cmp	r5, r0
 8000ea4:	dc21      	bgt.n	8000eea <__aeabi_fsub+0x1e6>
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	1b42      	subs	r2, r0, r5
 8000eac:	3201      	adds	r2, #1
 8000eae:	40d3      	lsrs	r3, r2
 8000eb0:	1a8a      	subs	r2, r1, r2
 8000eb2:	4097      	lsls	r7, r2
 8000eb4:	1e7a      	subs	r2, r7, #1
 8000eb6:	4197      	sbcs	r7, r2
 8000eb8:	2200      	movs	r2, #0
 8000eba:	433b      	orrs	r3, r7
 8000ebc:	0759      	lsls	r1, r3, #29
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_fsub+0x1be>
 8000ec0:	e78b      	b.n	8000dda <__aeabi_fsub+0xd6>
 8000ec2:	e78f      	b.n	8000de4 <__aeabi_fsub+0xe0>
 8000ec4:	20fe      	movs	r0, #254	@ 0xfe
 8000ec6:	1c6a      	adds	r2, r5, #1
 8000ec8:	4210      	tst	r0, r2
 8000eca:	d112      	bne.n	8000ef2 <__aeabi_fsub+0x1ee>
 8000ecc:	2d00      	cmp	r5, #0
 8000ece:	d152      	bne.n	8000f76 <__aeabi_fsub+0x272>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d07c      	beq.n	8000fce <__aeabi_fsub+0x2ca>
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	d0bb      	beq.n	8000e50 <__aeabi_fsub+0x14c>
 8000ed8:	1b9a      	subs	r2, r3, r6
 8000eda:	0150      	lsls	r0, r2, #5
 8000edc:	d400      	bmi.n	8000ee0 <__aeabi_fsub+0x1dc>
 8000ede:	e08b      	b.n	8000ff8 <__aeabi_fsub+0x2f4>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	1af3      	subs	r3, r6, r3
 8000ee6:	400c      	ands	r4, r1
 8000ee8:	e7e8      	b.n	8000ebc <__aeabi_fsub+0x1b8>
 8000eea:	4b56      	ldr	r3, [pc, #344]	@ (8001044 <__aeabi_fsub+0x340>)
 8000eec:	1a2a      	subs	r2, r5, r0
 8000eee:	403b      	ands	r3, r7
 8000ef0:	e7e4      	b.n	8000ebc <__aeabi_fsub+0x1b8>
 8000ef2:	1b9f      	subs	r7, r3, r6
 8000ef4:	017a      	lsls	r2, r7, #5
 8000ef6:	d446      	bmi.n	8000f86 <__aeabi_fsub+0x282>
 8000ef8:	2f00      	cmp	r7, #0
 8000efa:	d1cd      	bne.n	8000e98 <__aeabi_fsub+0x194>
 8000efc:	2400      	movs	r4, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	2300      	movs	r3, #0
 8000f02:	e777      	b.n	8000df4 <__aeabi_fsub+0xf0>
 8000f04:	199b      	adds	r3, r3, r6
 8000f06:	2501      	movs	r5, #1
 8000f08:	3201      	adds	r2, #1
 8000f0a:	0159      	lsls	r1, r3, #5
 8000f0c:	d400      	bmi.n	8000f10 <__aeabi_fsub+0x20c>
 8000f0e:	e760      	b.n	8000dd2 <__aeabi_fsub+0xce>
 8000f10:	2101      	movs	r1, #1
 8000f12:	484d      	ldr	r0, [pc, #308]	@ (8001048 <__aeabi_fsub+0x344>)
 8000f14:	4019      	ands	r1, r3
 8000f16:	085b      	lsrs	r3, r3, #1
 8000f18:	4003      	ands	r3, r0
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	e7ce      	b.n	8000ebc <__aeabi_fsub+0x1b8>
 8000f1e:	1e57      	subs	r7, r2, #1
 8000f20:	2a01      	cmp	r2, #1
 8000f22:	d05a      	beq.n	8000fda <__aeabi_fsub+0x2d6>
 8000f24:	000c      	movs	r4, r1
 8000f26:	2aff      	cmp	r2, #255	@ 0xff
 8000f28:	d033      	beq.n	8000f92 <__aeabi_fsub+0x28e>
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2f1b      	cmp	r7, #27
 8000f2e:	dc07      	bgt.n	8000f40 <__aeabi_fsub+0x23c>
 8000f30:	2120      	movs	r1, #32
 8000f32:	1bc9      	subs	r1, r1, r7
 8000f34:	001a      	movs	r2, r3
 8000f36:	408b      	lsls	r3, r1
 8000f38:	40fa      	lsrs	r2, r7
 8000f3a:	1e59      	subs	r1, r3, #1
 8000f3c:	418b      	sbcs	r3, r1
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	0005      	movs	r5, r0
 8000f42:	1ab3      	subs	r3, r6, r2
 8000f44:	e743      	b.n	8000dce <__aeabi_fsub+0xca>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d123      	bne.n	8000f92 <__aeabi_fsub+0x28e>
 8000f4a:	22ff      	movs	r2, #255	@ 0xff
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d09b      	beq.n	8000e88 <__aeabi_fsub+0x184>
 8000f50:	1e51      	subs	r1, r2, #1
 8000f52:	2a01      	cmp	r2, #1
 8000f54:	d0d6      	beq.n	8000f04 <__aeabi_fsub+0x200>
 8000f56:	2aff      	cmp	r2, #255	@ 0xff
 8000f58:	d01b      	beq.n	8000f92 <__aeabi_fsub+0x28e>
 8000f5a:	291b      	cmp	r1, #27
 8000f5c:	dd2c      	ble.n	8000fb8 <__aeabi_fsub+0x2b4>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	1c73      	adds	r3, r6, #1
 8000f62:	e73a      	b.n	8000dda <__aeabi_fsub+0xd6>
 8000f64:	2aff      	cmp	r2, #255	@ 0xff
 8000f66:	d088      	beq.n	8000e7a <__aeabi_fsub+0x176>
 8000f68:	199b      	adds	r3, r3, r6
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	0759      	lsls	r1, r3, #29
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_fsub+0x26e>
 8000f70:	e733      	b.n	8000dda <__aeabi_fsub+0xd6>
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	e76e      	b.n	8000e54 <__aeabi_fsub+0x150>
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d110      	bne.n	8000f9c <__aeabi_fsub+0x298>
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d043      	beq.n	8001006 <__aeabi_fsub+0x302>
 8000f7e:	2401      	movs	r4, #1
 8000f80:	0033      	movs	r3, r6
 8000f82:	400c      	ands	r4, r1
 8000f84:	e706      	b.n	8000d94 <__aeabi_fsub+0x90>
 8000f86:	2401      	movs	r4, #1
 8000f88:	1af7      	subs	r7, r6, r3
 8000f8a:	400c      	ands	r4, r1
 8000f8c:	e784      	b.n	8000e98 <__aeabi_fsub+0x194>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fsub+0x298>
 8000f92:	0033      	movs	r3, r6
 8000f94:	e6fe      	b.n	8000d94 <__aeabi_fsub+0x90>
 8000f96:	2501      	movs	r5, #1
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	e718      	b.n	8000dce <__aeabi_fsub+0xca>
 8000f9c:	2e00      	cmp	r6, #0
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_fsub+0x29e>
 8000fa0:	e6f8      	b.n	8000d94 <__aeabi_fsub+0x90>
 8000fa2:	2280      	movs	r2, #128	@ 0x80
 8000fa4:	03d2      	lsls	r2, r2, #15
 8000fa6:	4297      	cmp	r7, r2
 8000fa8:	d304      	bcc.n	8000fb4 <__aeabi_fsub+0x2b0>
 8000faa:	4594      	cmp	ip, r2
 8000fac:	d202      	bcs.n	8000fb4 <__aeabi_fsub+0x2b0>
 8000fae:	2401      	movs	r4, #1
 8000fb0:	0033      	movs	r3, r6
 8000fb2:	400c      	ands	r4, r1
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	e6f1      	b.n	8000d9c <__aeabi_fsub+0x98>
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2520      	movs	r5, #32
 8000fbc:	40ca      	lsrs	r2, r1
 8000fbe:	1a69      	subs	r1, r5, r1
 8000fc0:	408b      	lsls	r3, r1
 8000fc2:	1e59      	subs	r1, r3, #1
 8000fc4:	418b      	sbcs	r3, r1
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	0005      	movs	r5, r0
 8000fca:	199b      	adds	r3, r3, r6
 8000fcc:	e750      	b.n	8000e70 <__aeabi_fsub+0x16c>
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d094      	beq.n	8000efc <__aeabi_fsub+0x1f8>
 8000fd2:	2401      	movs	r4, #1
 8000fd4:	0033      	movs	r3, r6
 8000fd6:	400c      	ands	r4, r1
 8000fd8:	e73a      	b.n	8000e50 <__aeabi_fsub+0x14c>
 8000fda:	000c      	movs	r4, r1
 8000fdc:	2501      	movs	r5, #1
 8000fde:	1af3      	subs	r3, r6, r3
 8000fe0:	e6f5      	b.n	8000dce <__aeabi_fsub+0xca>
 8000fe2:	0033      	movs	r3, r6
 8000fe4:	e734      	b.n	8000e50 <__aeabi_fsub+0x14c>
 8000fe6:	199b      	adds	r3, r3, r6
 8000fe8:	2200      	movs	r2, #0
 8000fea:	0159      	lsls	r1, r3, #5
 8000fec:	d5c1      	bpl.n	8000f72 <__aeabi_fsub+0x26e>
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <__aeabi_fsub+0x340>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	e72d      	b.n	8000e54 <__aeabi_fsub+0x150>
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x2fa>
 8000ffc:	e77e      	b.n	8000efc <__aeabi_fsub+0x1f8>
 8000ffe:	0013      	movs	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	08db      	lsrs	r3, r3, #3
 8001004:	e726      	b.n	8000e54 <__aeabi_fsub+0x150>
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	2400      	movs	r4, #0
 800100a:	20ff      	movs	r0, #255	@ 0xff
 800100c:	03db      	lsls	r3, r3, #15
 800100e:	e6f1      	b.n	8000df4 <__aeabi_fsub+0xf0>
 8001010:	2a00      	cmp	r2, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x312>
 8001014:	e756      	b.n	8000ec4 <__aeabi_fsub+0x1c0>
 8001016:	1b47      	subs	r7, r0, r5
 8001018:	003a      	movs	r2, r7
 800101a:	2d00      	cmp	r5, #0
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0x31c>
 800101e:	e730      	b.n	8000e82 <__aeabi_fsub+0x17e>
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	04d2      	lsls	r2, r2, #19
 8001024:	000c      	movs	r4, r1
 8001026:	4313      	orrs	r3, r2
 8001028:	e77f      	b.n	8000f2a <__aeabi_fsub+0x226>
 800102a:	2a00      	cmp	r2, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x32c>
 800102e:	e701      	b.n	8000e34 <__aeabi_fsub+0x130>
 8001030:	1b41      	subs	r1, r0, r5
 8001032:	2d00      	cmp	r5, #0
 8001034:	d101      	bne.n	800103a <__aeabi_fsub+0x336>
 8001036:	000a      	movs	r2, r1
 8001038:	e788      	b.n	8000f4c <__aeabi_fsub+0x248>
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	04d2      	lsls	r2, r2, #19
 800103e:	4313      	orrs	r3, r2
 8001040:	e78b      	b.n	8000f5a <__aeabi_fsub+0x256>
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	fbffffff 	.word	0xfbffffff
 8001048:	7dffffff 	.word	0x7dffffff

0800104c <__aeabi_f2iz>:
 800104c:	0241      	lsls	r1, r0, #9
 800104e:	0042      	lsls	r2, r0, #1
 8001050:	0fc3      	lsrs	r3, r0, #31
 8001052:	0a49      	lsrs	r1, r1, #9
 8001054:	2000      	movs	r0, #0
 8001056:	0e12      	lsrs	r2, r2, #24
 8001058:	2a7e      	cmp	r2, #126	@ 0x7e
 800105a:	dd03      	ble.n	8001064 <__aeabi_f2iz+0x18>
 800105c:	2a9d      	cmp	r2, #157	@ 0x9d
 800105e:	dd02      	ble.n	8001066 <__aeabi_f2iz+0x1a>
 8001060:	4a09      	ldr	r2, [pc, #36]	@ (8001088 <__aeabi_f2iz+0x3c>)
 8001062:	1898      	adds	r0, r3, r2
 8001064:	4770      	bx	lr
 8001066:	2080      	movs	r0, #128	@ 0x80
 8001068:	0400      	lsls	r0, r0, #16
 800106a:	4301      	orrs	r1, r0
 800106c:	2a95      	cmp	r2, #149	@ 0x95
 800106e:	dc07      	bgt.n	8001080 <__aeabi_f2iz+0x34>
 8001070:	2096      	movs	r0, #150	@ 0x96
 8001072:	1a82      	subs	r2, r0, r2
 8001074:	40d1      	lsrs	r1, r2
 8001076:	4248      	negs	r0, r1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f3      	bne.n	8001064 <__aeabi_f2iz+0x18>
 800107c:	0008      	movs	r0, r1
 800107e:	e7f1      	b.n	8001064 <__aeabi_f2iz+0x18>
 8001080:	3a96      	subs	r2, #150	@ 0x96
 8001082:	4091      	lsls	r1, r2
 8001084:	e7f7      	b.n	8001076 <__aeabi_f2iz+0x2a>
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	7fffffff 	.word	0x7fffffff

0800108c <__aeabi_i2f>:
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	2800      	cmp	r0, #0
 8001090:	d013      	beq.n	80010ba <__aeabi_i2f+0x2e>
 8001092:	17c3      	asrs	r3, r0, #31
 8001094:	18c5      	adds	r5, r0, r3
 8001096:	405d      	eors	r5, r3
 8001098:	0fc4      	lsrs	r4, r0, #31
 800109a:	0028      	movs	r0, r5
 800109c:	f001 fab2 	bl	8002604 <__clzsi2>
 80010a0:	239e      	movs	r3, #158	@ 0x9e
 80010a2:	0001      	movs	r1, r0
 80010a4:	1a1b      	subs	r3, r3, r0
 80010a6:	2b96      	cmp	r3, #150	@ 0x96
 80010a8:	dc0f      	bgt.n	80010ca <__aeabi_i2f+0x3e>
 80010aa:	2808      	cmp	r0, #8
 80010ac:	d034      	beq.n	8001118 <__aeabi_i2f+0x8c>
 80010ae:	3908      	subs	r1, #8
 80010b0:	408d      	lsls	r5, r1
 80010b2:	026d      	lsls	r5, r5, #9
 80010b4:	0a6d      	lsrs	r5, r5, #9
 80010b6:	b2d8      	uxtb	r0, r3
 80010b8:	e002      	b.n	80010c0 <__aeabi_i2f+0x34>
 80010ba:	2400      	movs	r4, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	2500      	movs	r5, #0
 80010c0:	05c0      	lsls	r0, r0, #23
 80010c2:	4328      	orrs	r0, r5
 80010c4:	07e4      	lsls	r4, r4, #31
 80010c6:	4320      	orrs	r0, r4
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	2b99      	cmp	r3, #153	@ 0x99
 80010cc:	dc16      	bgt.n	80010fc <__aeabi_i2f+0x70>
 80010ce:	1f42      	subs	r2, r0, #5
 80010d0:	2805      	cmp	r0, #5
 80010d2:	d000      	beq.n	80010d6 <__aeabi_i2f+0x4a>
 80010d4:	4095      	lsls	r5, r2
 80010d6:	002a      	movs	r2, r5
 80010d8:	4811      	ldr	r0, [pc, #68]	@ (8001120 <__aeabi_i2f+0x94>)
 80010da:	4002      	ands	r2, r0
 80010dc:	076e      	lsls	r6, r5, #29
 80010de:	d009      	beq.n	80010f4 <__aeabi_i2f+0x68>
 80010e0:	260f      	movs	r6, #15
 80010e2:	4035      	ands	r5, r6
 80010e4:	2d04      	cmp	r5, #4
 80010e6:	d005      	beq.n	80010f4 <__aeabi_i2f+0x68>
 80010e8:	3204      	adds	r2, #4
 80010ea:	0155      	lsls	r5, r2, #5
 80010ec:	d502      	bpl.n	80010f4 <__aeabi_i2f+0x68>
 80010ee:	239f      	movs	r3, #159	@ 0x9f
 80010f0:	4002      	ands	r2, r0
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	0192      	lsls	r2, r2, #6
 80010f6:	0a55      	lsrs	r5, r2, #9
 80010f8:	b2d8      	uxtb	r0, r3
 80010fa:	e7e1      	b.n	80010c0 <__aeabi_i2f+0x34>
 80010fc:	2205      	movs	r2, #5
 80010fe:	1a12      	subs	r2, r2, r0
 8001100:	0028      	movs	r0, r5
 8001102:	40d0      	lsrs	r0, r2
 8001104:	0002      	movs	r2, r0
 8001106:	0008      	movs	r0, r1
 8001108:	301b      	adds	r0, #27
 800110a:	4085      	lsls	r5, r0
 800110c:	0028      	movs	r0, r5
 800110e:	1e45      	subs	r5, r0, #1
 8001110:	41a8      	sbcs	r0, r5
 8001112:	4302      	orrs	r2, r0
 8001114:	0015      	movs	r5, r2
 8001116:	e7de      	b.n	80010d6 <__aeabi_i2f+0x4a>
 8001118:	026d      	lsls	r5, r5, #9
 800111a:	2096      	movs	r0, #150	@ 0x96
 800111c:	0a6d      	lsrs	r5, r5, #9
 800111e:	e7cf      	b.n	80010c0 <__aeabi_i2f+0x34>
 8001120:	fbffffff 	.word	0xfbffffff

08001124 <__aeabi_dadd>:
 8001124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001126:	4657      	mov	r7, sl
 8001128:	464e      	mov	r6, r9
 800112a:	4645      	mov	r5, r8
 800112c:	46de      	mov	lr, fp
 800112e:	b5e0      	push	{r5, r6, r7, lr}
 8001130:	b083      	sub	sp, #12
 8001132:	9000      	str	r0, [sp, #0]
 8001134:	9101      	str	r1, [sp, #4]
 8001136:	030c      	lsls	r4, r1, #12
 8001138:	004f      	lsls	r7, r1, #1
 800113a:	0fce      	lsrs	r6, r1, #31
 800113c:	0a61      	lsrs	r1, r4, #9
 800113e:	9c00      	ldr	r4, [sp, #0]
 8001140:	031d      	lsls	r5, r3, #12
 8001142:	0f64      	lsrs	r4, r4, #29
 8001144:	430c      	orrs	r4, r1
 8001146:	9900      	ldr	r1, [sp, #0]
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	00c8      	lsls	r0, r1, #3
 800114e:	0059      	lsls	r1, r3, #1
 8001150:	0d4b      	lsrs	r3, r1, #21
 8001152:	4699      	mov	r9, r3
 8001154:	9a00      	ldr	r2, [sp, #0]
 8001156:	9b01      	ldr	r3, [sp, #4]
 8001158:	0a6d      	lsrs	r5, r5, #9
 800115a:	0fd9      	lsrs	r1, r3, #31
 800115c:	0f53      	lsrs	r3, r2, #29
 800115e:	432b      	orrs	r3, r5
 8001160:	469a      	mov	sl, r3
 8001162:	9b00      	ldr	r3, [sp, #0]
 8001164:	0d7f      	lsrs	r7, r7, #21
 8001166:	00da      	lsls	r2, r3, #3
 8001168:	4694      	mov	ip, r2
 800116a:	464a      	mov	r2, r9
 800116c:	46b0      	mov	r8, r6
 800116e:	1aba      	subs	r2, r7, r2
 8001170:	428e      	cmp	r6, r1
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x52>
 8001174:	e0b0      	b.n	80012d8 <__aeabi_dadd+0x1b4>
 8001176:	2a00      	cmp	r2, #0
 8001178:	dc00      	bgt.n	800117c <__aeabi_dadd+0x58>
 800117a:	e078      	b.n	800126e <__aeabi_dadd+0x14a>
 800117c:	4649      	mov	r1, r9
 800117e:	2900      	cmp	r1, #0
 8001180:	d100      	bne.n	8001184 <__aeabi_dadd+0x60>
 8001182:	e0e9      	b.n	8001358 <__aeabi_dadd+0x234>
 8001184:	49c9      	ldr	r1, [pc, #804]	@ (80014ac <__aeabi_dadd+0x388>)
 8001186:	428f      	cmp	r7, r1
 8001188:	d100      	bne.n	800118c <__aeabi_dadd+0x68>
 800118a:	e195      	b.n	80014b8 <__aeabi_dadd+0x394>
 800118c:	2501      	movs	r5, #1
 800118e:	2a38      	cmp	r2, #56	@ 0x38
 8001190:	dc16      	bgt.n	80011c0 <__aeabi_dadd+0x9c>
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	4653      	mov	r3, sl
 8001196:	0409      	lsls	r1, r1, #16
 8001198:	430b      	orrs	r3, r1
 800119a:	469a      	mov	sl, r3
 800119c:	2a1f      	cmp	r2, #31
 800119e:	dd00      	ble.n	80011a2 <__aeabi_dadd+0x7e>
 80011a0:	e1e7      	b.n	8001572 <__aeabi_dadd+0x44e>
 80011a2:	2120      	movs	r1, #32
 80011a4:	4655      	mov	r5, sl
 80011a6:	1a8b      	subs	r3, r1, r2
 80011a8:	4661      	mov	r1, ip
 80011aa:	409d      	lsls	r5, r3
 80011ac:	40d1      	lsrs	r1, r2
 80011ae:	430d      	orrs	r5, r1
 80011b0:	4661      	mov	r1, ip
 80011b2:	4099      	lsls	r1, r3
 80011b4:	1e4b      	subs	r3, r1, #1
 80011b6:	4199      	sbcs	r1, r3
 80011b8:	4653      	mov	r3, sl
 80011ba:	40d3      	lsrs	r3, r2
 80011bc:	430d      	orrs	r5, r1
 80011be:	1ae4      	subs	r4, r4, r3
 80011c0:	1b45      	subs	r5, r0, r5
 80011c2:	42a8      	cmp	r0, r5
 80011c4:	4180      	sbcs	r0, r0
 80011c6:	4240      	negs	r0, r0
 80011c8:	1a24      	subs	r4, r4, r0
 80011ca:	0223      	lsls	r3, r4, #8
 80011cc:	d400      	bmi.n	80011d0 <__aeabi_dadd+0xac>
 80011ce:	e10f      	b.n	80013f0 <__aeabi_dadd+0x2cc>
 80011d0:	0264      	lsls	r4, r4, #9
 80011d2:	0a64      	lsrs	r4, r4, #9
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_dadd+0xb6>
 80011d8:	e139      	b.n	800144e <__aeabi_dadd+0x32a>
 80011da:	0020      	movs	r0, r4
 80011dc:	f001 fa12 	bl	8002604 <__clzsi2>
 80011e0:	0003      	movs	r3, r0
 80011e2:	3b08      	subs	r3, #8
 80011e4:	2120      	movs	r1, #32
 80011e6:	0028      	movs	r0, r5
 80011e8:	1aca      	subs	r2, r1, r3
 80011ea:	40d0      	lsrs	r0, r2
 80011ec:	409c      	lsls	r4, r3
 80011ee:	0002      	movs	r2, r0
 80011f0:	409d      	lsls	r5, r3
 80011f2:	4322      	orrs	r2, r4
 80011f4:	429f      	cmp	r7, r3
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dadd+0xd6>
 80011f8:	e173      	b.n	80014e2 <__aeabi_dadd+0x3be>
 80011fa:	1bd8      	subs	r0, r3, r7
 80011fc:	3001      	adds	r0, #1
 80011fe:	1a09      	subs	r1, r1, r0
 8001200:	002c      	movs	r4, r5
 8001202:	408d      	lsls	r5, r1
 8001204:	40c4      	lsrs	r4, r0
 8001206:	1e6b      	subs	r3, r5, #1
 8001208:	419d      	sbcs	r5, r3
 800120a:	0013      	movs	r3, r2
 800120c:	40c2      	lsrs	r2, r0
 800120e:	408b      	lsls	r3, r1
 8001210:	4325      	orrs	r5, r4
 8001212:	2700      	movs	r7, #0
 8001214:	0014      	movs	r4, r2
 8001216:	431d      	orrs	r5, r3
 8001218:	076b      	lsls	r3, r5, #29
 800121a:	d009      	beq.n	8001230 <__aeabi_dadd+0x10c>
 800121c:	230f      	movs	r3, #15
 800121e:	402b      	ands	r3, r5
 8001220:	2b04      	cmp	r3, #4
 8001222:	d005      	beq.n	8001230 <__aeabi_dadd+0x10c>
 8001224:	1d2b      	adds	r3, r5, #4
 8001226:	42ab      	cmp	r3, r5
 8001228:	41ad      	sbcs	r5, r5
 800122a:	426d      	negs	r5, r5
 800122c:	1964      	adds	r4, r4, r5
 800122e:	001d      	movs	r5, r3
 8001230:	0223      	lsls	r3, r4, #8
 8001232:	d400      	bmi.n	8001236 <__aeabi_dadd+0x112>
 8001234:	e12d      	b.n	8001492 <__aeabi_dadd+0x36e>
 8001236:	4a9d      	ldr	r2, [pc, #628]	@ (80014ac <__aeabi_dadd+0x388>)
 8001238:	3701      	adds	r7, #1
 800123a:	4297      	cmp	r7, r2
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x11c>
 800123e:	e0d3      	b.n	80013e8 <__aeabi_dadd+0x2c4>
 8001240:	4646      	mov	r6, r8
 8001242:	499b      	ldr	r1, [pc, #620]	@ (80014b0 <__aeabi_dadd+0x38c>)
 8001244:	08ed      	lsrs	r5, r5, #3
 8001246:	4021      	ands	r1, r4
 8001248:	074a      	lsls	r2, r1, #29
 800124a:	432a      	orrs	r2, r5
 800124c:	057c      	lsls	r4, r7, #21
 800124e:	024d      	lsls	r5, r1, #9
 8001250:	0b2d      	lsrs	r5, r5, #12
 8001252:	0d64      	lsrs	r4, r4, #21
 8001254:	0524      	lsls	r4, r4, #20
 8001256:	432c      	orrs	r4, r5
 8001258:	07f6      	lsls	r6, r6, #31
 800125a:	4334      	orrs	r4, r6
 800125c:	0010      	movs	r0, r2
 800125e:	0021      	movs	r1, r4
 8001260:	b003      	add	sp, #12
 8001262:	bcf0      	pop	{r4, r5, r6, r7}
 8001264:	46bb      	mov	fp, r7
 8001266:	46b2      	mov	sl, r6
 8001268:	46a9      	mov	r9, r5
 800126a:	46a0      	mov	r8, r4
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126e:	2a00      	cmp	r2, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x150>
 8001272:	e084      	b.n	800137e <__aeabi_dadd+0x25a>
 8001274:	464a      	mov	r2, r9
 8001276:	1bd2      	subs	r2, r2, r7
 8001278:	2f00      	cmp	r7, #0
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x15a>
 800127c:	e16d      	b.n	800155a <__aeabi_dadd+0x436>
 800127e:	0025      	movs	r5, r4
 8001280:	4305      	orrs	r5, r0
 8001282:	d100      	bne.n	8001286 <__aeabi_dadd+0x162>
 8001284:	e127      	b.n	80014d6 <__aeabi_dadd+0x3b2>
 8001286:	1e56      	subs	r6, r2, #1
 8001288:	2a01      	cmp	r2, #1
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x16a>
 800128c:	e23b      	b.n	8001706 <__aeabi_dadd+0x5e2>
 800128e:	4d87      	ldr	r5, [pc, #540]	@ (80014ac <__aeabi_dadd+0x388>)
 8001290:	42aa      	cmp	r2, r5
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x172>
 8001294:	e26a      	b.n	800176c <__aeabi_dadd+0x648>
 8001296:	2501      	movs	r5, #1
 8001298:	2e38      	cmp	r6, #56	@ 0x38
 800129a:	dc12      	bgt.n	80012c2 <__aeabi_dadd+0x19e>
 800129c:	0032      	movs	r2, r6
 800129e:	2a1f      	cmp	r2, #31
 80012a0:	dd00      	ble.n	80012a4 <__aeabi_dadd+0x180>
 80012a2:	e1f8      	b.n	8001696 <__aeabi_dadd+0x572>
 80012a4:	2620      	movs	r6, #32
 80012a6:	0025      	movs	r5, r4
 80012a8:	1ab6      	subs	r6, r6, r2
 80012aa:	0007      	movs	r7, r0
 80012ac:	4653      	mov	r3, sl
 80012ae:	40b0      	lsls	r0, r6
 80012b0:	40d4      	lsrs	r4, r2
 80012b2:	40b5      	lsls	r5, r6
 80012b4:	40d7      	lsrs	r7, r2
 80012b6:	1e46      	subs	r6, r0, #1
 80012b8:	41b0      	sbcs	r0, r6
 80012ba:	1b1b      	subs	r3, r3, r4
 80012bc:	469a      	mov	sl, r3
 80012be:	433d      	orrs	r5, r7
 80012c0:	4305      	orrs	r5, r0
 80012c2:	4662      	mov	r2, ip
 80012c4:	1b55      	subs	r5, r2, r5
 80012c6:	45ac      	cmp	ip, r5
 80012c8:	4192      	sbcs	r2, r2
 80012ca:	4653      	mov	r3, sl
 80012cc:	4252      	negs	r2, r2
 80012ce:	000e      	movs	r6, r1
 80012d0:	464f      	mov	r7, r9
 80012d2:	4688      	mov	r8, r1
 80012d4:	1a9c      	subs	r4, r3, r2
 80012d6:	e778      	b.n	80011ca <__aeabi_dadd+0xa6>
 80012d8:	2a00      	cmp	r2, #0
 80012da:	dc00      	bgt.n	80012de <__aeabi_dadd+0x1ba>
 80012dc:	e08e      	b.n	80013fc <__aeabi_dadd+0x2d8>
 80012de:	4649      	mov	r1, r9
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d175      	bne.n	80013d0 <__aeabi_dadd+0x2ac>
 80012e4:	4661      	mov	r1, ip
 80012e6:	4653      	mov	r3, sl
 80012e8:	4319      	orrs	r1, r3
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x1ca>
 80012ec:	e0f6      	b.n	80014dc <__aeabi_dadd+0x3b8>
 80012ee:	1e51      	subs	r1, r2, #1
 80012f0:	2a01      	cmp	r2, #1
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x1d2>
 80012f4:	e191      	b.n	800161a <__aeabi_dadd+0x4f6>
 80012f6:	4d6d      	ldr	r5, [pc, #436]	@ (80014ac <__aeabi_dadd+0x388>)
 80012f8:	42aa      	cmp	r2, r5
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x1da>
 80012fc:	e0dc      	b.n	80014b8 <__aeabi_dadd+0x394>
 80012fe:	2501      	movs	r5, #1
 8001300:	2938      	cmp	r1, #56	@ 0x38
 8001302:	dc14      	bgt.n	800132e <__aeabi_dadd+0x20a>
 8001304:	000a      	movs	r2, r1
 8001306:	2a1f      	cmp	r2, #31
 8001308:	dd00      	ble.n	800130c <__aeabi_dadd+0x1e8>
 800130a:	e1a2      	b.n	8001652 <__aeabi_dadd+0x52e>
 800130c:	2120      	movs	r1, #32
 800130e:	4653      	mov	r3, sl
 8001310:	1a89      	subs	r1, r1, r2
 8001312:	408b      	lsls	r3, r1
 8001314:	001d      	movs	r5, r3
 8001316:	4663      	mov	r3, ip
 8001318:	40d3      	lsrs	r3, r2
 800131a:	431d      	orrs	r5, r3
 800131c:	4663      	mov	r3, ip
 800131e:	408b      	lsls	r3, r1
 8001320:	0019      	movs	r1, r3
 8001322:	1e4b      	subs	r3, r1, #1
 8001324:	4199      	sbcs	r1, r3
 8001326:	4653      	mov	r3, sl
 8001328:	40d3      	lsrs	r3, r2
 800132a:	430d      	orrs	r5, r1
 800132c:	18e4      	adds	r4, r4, r3
 800132e:	182d      	adds	r5, r5, r0
 8001330:	4285      	cmp	r5, r0
 8001332:	4180      	sbcs	r0, r0
 8001334:	4240      	negs	r0, r0
 8001336:	1824      	adds	r4, r4, r0
 8001338:	0223      	lsls	r3, r4, #8
 800133a:	d559      	bpl.n	80013f0 <__aeabi_dadd+0x2cc>
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <__aeabi_dadd+0x388>)
 800133e:	3701      	adds	r7, #1
 8001340:	429f      	cmp	r7, r3
 8001342:	d051      	beq.n	80013e8 <__aeabi_dadd+0x2c4>
 8001344:	2101      	movs	r1, #1
 8001346:	4b5a      	ldr	r3, [pc, #360]	@ (80014b0 <__aeabi_dadd+0x38c>)
 8001348:	086a      	lsrs	r2, r5, #1
 800134a:	401c      	ands	r4, r3
 800134c:	4029      	ands	r1, r5
 800134e:	430a      	orrs	r2, r1
 8001350:	07e5      	lsls	r5, r4, #31
 8001352:	4315      	orrs	r5, r2
 8001354:	0864      	lsrs	r4, r4, #1
 8001356:	e75f      	b.n	8001218 <__aeabi_dadd+0xf4>
 8001358:	4661      	mov	r1, ip
 800135a:	4653      	mov	r3, sl
 800135c:	4319      	orrs	r1, r3
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x23e>
 8001360:	e0bc      	b.n	80014dc <__aeabi_dadd+0x3b8>
 8001362:	1e51      	subs	r1, r2, #1
 8001364:	2a01      	cmp	r2, #1
 8001366:	d100      	bne.n	800136a <__aeabi_dadd+0x246>
 8001368:	e164      	b.n	8001634 <__aeabi_dadd+0x510>
 800136a:	4d50      	ldr	r5, [pc, #320]	@ (80014ac <__aeabi_dadd+0x388>)
 800136c:	42aa      	cmp	r2, r5
 800136e:	d100      	bne.n	8001372 <__aeabi_dadd+0x24e>
 8001370:	e16a      	b.n	8001648 <__aeabi_dadd+0x524>
 8001372:	2501      	movs	r5, #1
 8001374:	2938      	cmp	r1, #56	@ 0x38
 8001376:	dd00      	ble.n	800137a <__aeabi_dadd+0x256>
 8001378:	e722      	b.n	80011c0 <__aeabi_dadd+0x9c>
 800137a:	000a      	movs	r2, r1
 800137c:	e70e      	b.n	800119c <__aeabi_dadd+0x78>
 800137e:	4a4d      	ldr	r2, [pc, #308]	@ (80014b4 <__aeabi_dadd+0x390>)
 8001380:	1c7d      	adds	r5, r7, #1
 8001382:	4215      	tst	r5, r2
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x264>
 8001386:	e0d0      	b.n	800152a <__aeabi_dadd+0x406>
 8001388:	0025      	movs	r5, r4
 800138a:	4662      	mov	r2, ip
 800138c:	4653      	mov	r3, sl
 800138e:	4305      	orrs	r5, r0
 8001390:	431a      	orrs	r2, r3
 8001392:	2f00      	cmp	r7, #0
 8001394:	d000      	beq.n	8001398 <__aeabi_dadd+0x274>
 8001396:	e137      	b.n	8001608 <__aeabi_dadd+0x4e4>
 8001398:	2d00      	cmp	r5, #0
 800139a:	d100      	bne.n	800139e <__aeabi_dadd+0x27a>
 800139c:	e1a8      	b.n	80016f0 <__aeabi_dadd+0x5cc>
 800139e:	2a00      	cmp	r2, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dadd+0x280>
 80013a2:	e16a      	b.n	800167a <__aeabi_dadd+0x556>
 80013a4:	4663      	mov	r3, ip
 80013a6:	1ac5      	subs	r5, r0, r3
 80013a8:	4653      	mov	r3, sl
 80013aa:	1ae2      	subs	r2, r4, r3
 80013ac:	42a8      	cmp	r0, r5
 80013ae:	419b      	sbcs	r3, r3
 80013b0:	425b      	negs	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	021a      	lsls	r2, r3, #8
 80013b6:	d400      	bmi.n	80013ba <__aeabi_dadd+0x296>
 80013b8:	e203      	b.n	80017c2 <__aeabi_dadd+0x69e>
 80013ba:	4663      	mov	r3, ip
 80013bc:	1a1d      	subs	r5, r3, r0
 80013be:	45ac      	cmp	ip, r5
 80013c0:	4192      	sbcs	r2, r2
 80013c2:	4653      	mov	r3, sl
 80013c4:	4252      	negs	r2, r2
 80013c6:	1b1c      	subs	r4, r3, r4
 80013c8:	000e      	movs	r6, r1
 80013ca:	4688      	mov	r8, r1
 80013cc:	1aa4      	subs	r4, r4, r2
 80013ce:	e723      	b.n	8001218 <__aeabi_dadd+0xf4>
 80013d0:	4936      	ldr	r1, [pc, #216]	@ (80014ac <__aeabi_dadd+0x388>)
 80013d2:	428f      	cmp	r7, r1
 80013d4:	d070      	beq.n	80014b8 <__aeabi_dadd+0x394>
 80013d6:	2501      	movs	r5, #1
 80013d8:	2a38      	cmp	r2, #56	@ 0x38
 80013da:	dca8      	bgt.n	800132e <__aeabi_dadd+0x20a>
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	4653      	mov	r3, sl
 80013e0:	0409      	lsls	r1, r1, #16
 80013e2:	430b      	orrs	r3, r1
 80013e4:	469a      	mov	sl, r3
 80013e6:	e78e      	b.n	8001306 <__aeabi_dadd+0x1e2>
 80013e8:	003c      	movs	r4, r7
 80013ea:	2500      	movs	r5, #0
 80013ec:	2200      	movs	r2, #0
 80013ee:	e731      	b.n	8001254 <__aeabi_dadd+0x130>
 80013f0:	2307      	movs	r3, #7
 80013f2:	402b      	ands	r3, r5
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d000      	beq.n	80013fa <__aeabi_dadd+0x2d6>
 80013f8:	e710      	b.n	800121c <__aeabi_dadd+0xf8>
 80013fa:	e093      	b.n	8001524 <__aeabi_dadd+0x400>
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	d074      	beq.n	80014ea <__aeabi_dadd+0x3c6>
 8001400:	464a      	mov	r2, r9
 8001402:	1bd2      	subs	r2, r2, r7
 8001404:	2f00      	cmp	r7, #0
 8001406:	d100      	bne.n	800140a <__aeabi_dadd+0x2e6>
 8001408:	e0c7      	b.n	800159a <__aeabi_dadd+0x476>
 800140a:	4928      	ldr	r1, [pc, #160]	@ (80014ac <__aeabi_dadd+0x388>)
 800140c:	4589      	cmp	r9, r1
 800140e:	d100      	bne.n	8001412 <__aeabi_dadd+0x2ee>
 8001410:	e185      	b.n	800171e <__aeabi_dadd+0x5fa>
 8001412:	2501      	movs	r5, #1
 8001414:	2a38      	cmp	r2, #56	@ 0x38
 8001416:	dc12      	bgt.n	800143e <__aeabi_dadd+0x31a>
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	0409      	lsls	r1, r1, #16
 800141c:	430c      	orrs	r4, r1
 800141e:	2a1f      	cmp	r2, #31
 8001420:	dd00      	ble.n	8001424 <__aeabi_dadd+0x300>
 8001422:	e1ab      	b.n	800177c <__aeabi_dadd+0x658>
 8001424:	2120      	movs	r1, #32
 8001426:	0025      	movs	r5, r4
 8001428:	1a89      	subs	r1, r1, r2
 800142a:	0007      	movs	r7, r0
 800142c:	4088      	lsls	r0, r1
 800142e:	408d      	lsls	r5, r1
 8001430:	40d7      	lsrs	r7, r2
 8001432:	1e41      	subs	r1, r0, #1
 8001434:	4188      	sbcs	r0, r1
 8001436:	40d4      	lsrs	r4, r2
 8001438:	433d      	orrs	r5, r7
 800143a:	4305      	orrs	r5, r0
 800143c:	44a2      	add	sl, r4
 800143e:	4465      	add	r5, ip
 8001440:	4565      	cmp	r5, ip
 8001442:	4192      	sbcs	r2, r2
 8001444:	4252      	negs	r2, r2
 8001446:	4452      	add	r2, sl
 8001448:	0014      	movs	r4, r2
 800144a:	464f      	mov	r7, r9
 800144c:	e774      	b.n	8001338 <__aeabi_dadd+0x214>
 800144e:	0028      	movs	r0, r5
 8001450:	f001 f8d8 	bl	8002604 <__clzsi2>
 8001454:	0003      	movs	r3, r0
 8001456:	3318      	adds	r3, #24
 8001458:	2b1f      	cmp	r3, #31
 800145a:	dc00      	bgt.n	800145e <__aeabi_dadd+0x33a>
 800145c:	e6c2      	b.n	80011e4 <__aeabi_dadd+0xc0>
 800145e:	002a      	movs	r2, r5
 8001460:	3808      	subs	r0, #8
 8001462:	4082      	lsls	r2, r0
 8001464:	429f      	cmp	r7, r3
 8001466:	dd00      	ble.n	800146a <__aeabi_dadd+0x346>
 8001468:	e0a9      	b.n	80015be <__aeabi_dadd+0x49a>
 800146a:	1bdb      	subs	r3, r3, r7
 800146c:	1c58      	adds	r0, r3, #1
 800146e:	281f      	cmp	r0, #31
 8001470:	dc00      	bgt.n	8001474 <__aeabi_dadd+0x350>
 8001472:	e1ac      	b.n	80017ce <__aeabi_dadd+0x6aa>
 8001474:	0015      	movs	r5, r2
 8001476:	3b1f      	subs	r3, #31
 8001478:	40dd      	lsrs	r5, r3
 800147a:	2820      	cmp	r0, #32
 800147c:	d005      	beq.n	800148a <__aeabi_dadd+0x366>
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	1a1b      	subs	r3, r3, r0
 8001482:	409a      	lsls	r2, r3
 8001484:	1e53      	subs	r3, r2, #1
 8001486:	419a      	sbcs	r2, r3
 8001488:	4315      	orrs	r5, r2
 800148a:	2307      	movs	r3, #7
 800148c:	2700      	movs	r7, #0
 800148e:	402b      	ands	r3, r5
 8001490:	e7b0      	b.n	80013f4 <__aeabi_dadd+0x2d0>
 8001492:	08ed      	lsrs	r5, r5, #3
 8001494:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <__aeabi_dadd+0x388>)
 8001496:	0762      	lsls	r2, r4, #29
 8001498:	432a      	orrs	r2, r5
 800149a:	08e4      	lsrs	r4, r4, #3
 800149c:	429f      	cmp	r7, r3
 800149e:	d00f      	beq.n	80014c0 <__aeabi_dadd+0x39c>
 80014a0:	0324      	lsls	r4, r4, #12
 80014a2:	0b25      	lsrs	r5, r4, #12
 80014a4:	057c      	lsls	r4, r7, #21
 80014a6:	0d64      	lsrs	r4, r4, #21
 80014a8:	e6d4      	b.n	8001254 <__aeabi_dadd+0x130>
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	000007ff 	.word	0x000007ff
 80014b0:	ff7fffff 	.word	0xff7fffff
 80014b4:	000007fe 	.word	0x000007fe
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	0762      	lsls	r2, r4, #29
 80014bc:	4302      	orrs	r2, r0
 80014be:	08e4      	lsrs	r4, r4, #3
 80014c0:	0013      	movs	r3, r2
 80014c2:	4323      	orrs	r3, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x3a4>
 80014c6:	e186      	b.n	80017d6 <__aeabi_dadd+0x6b2>
 80014c8:	2580      	movs	r5, #128	@ 0x80
 80014ca:	032d      	lsls	r5, r5, #12
 80014cc:	4325      	orrs	r5, r4
 80014ce:	032d      	lsls	r5, r5, #12
 80014d0:	4cc3      	ldr	r4, [pc, #780]	@ (80017e0 <__aeabi_dadd+0x6bc>)
 80014d2:	0b2d      	lsrs	r5, r5, #12
 80014d4:	e6be      	b.n	8001254 <__aeabi_dadd+0x130>
 80014d6:	4660      	mov	r0, ip
 80014d8:	4654      	mov	r4, sl
 80014da:	000e      	movs	r6, r1
 80014dc:	0017      	movs	r7, r2
 80014de:	08c5      	lsrs	r5, r0, #3
 80014e0:	e7d8      	b.n	8001494 <__aeabi_dadd+0x370>
 80014e2:	4cc0      	ldr	r4, [pc, #768]	@ (80017e4 <__aeabi_dadd+0x6c0>)
 80014e4:	1aff      	subs	r7, r7, r3
 80014e6:	4014      	ands	r4, r2
 80014e8:	e696      	b.n	8001218 <__aeabi_dadd+0xf4>
 80014ea:	4abf      	ldr	r2, [pc, #764]	@ (80017e8 <__aeabi_dadd+0x6c4>)
 80014ec:	1c79      	adds	r1, r7, #1
 80014ee:	4211      	tst	r1, r2
 80014f0:	d16b      	bne.n	80015ca <__aeabi_dadd+0x4a6>
 80014f2:	0022      	movs	r2, r4
 80014f4:	4302      	orrs	r2, r0
 80014f6:	2f00      	cmp	r7, #0
 80014f8:	d000      	beq.n	80014fc <__aeabi_dadd+0x3d8>
 80014fa:	e0db      	b.n	80016b4 <__aeabi_dadd+0x590>
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x3de>
 8001500:	e12d      	b.n	800175e <__aeabi_dadd+0x63a>
 8001502:	4662      	mov	r2, ip
 8001504:	4653      	mov	r3, sl
 8001506:	431a      	orrs	r2, r3
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x3e8>
 800150a:	e0b6      	b.n	800167a <__aeabi_dadd+0x556>
 800150c:	4663      	mov	r3, ip
 800150e:	18c5      	adds	r5, r0, r3
 8001510:	4285      	cmp	r5, r0
 8001512:	4180      	sbcs	r0, r0
 8001514:	4454      	add	r4, sl
 8001516:	4240      	negs	r0, r0
 8001518:	1824      	adds	r4, r4, r0
 800151a:	0223      	lsls	r3, r4, #8
 800151c:	d502      	bpl.n	8001524 <__aeabi_dadd+0x400>
 800151e:	000f      	movs	r7, r1
 8001520:	4bb0      	ldr	r3, [pc, #704]	@ (80017e4 <__aeabi_dadd+0x6c0>)
 8001522:	401c      	ands	r4, r3
 8001524:	003a      	movs	r2, r7
 8001526:	0028      	movs	r0, r5
 8001528:	e7d8      	b.n	80014dc <__aeabi_dadd+0x3b8>
 800152a:	4662      	mov	r2, ip
 800152c:	1a85      	subs	r5, r0, r2
 800152e:	42a8      	cmp	r0, r5
 8001530:	4192      	sbcs	r2, r2
 8001532:	4653      	mov	r3, sl
 8001534:	4252      	negs	r2, r2
 8001536:	4691      	mov	r9, r2
 8001538:	1ae3      	subs	r3, r4, r3
 800153a:	001a      	movs	r2, r3
 800153c:	464b      	mov	r3, r9
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	4691      	mov	r9, r2
 8001544:	021a      	lsls	r2, r3, #8
 8001546:	d454      	bmi.n	80015f2 <__aeabi_dadd+0x4ce>
 8001548:	464a      	mov	r2, r9
 800154a:	464c      	mov	r4, r9
 800154c:	432a      	orrs	r2, r5
 800154e:	d000      	beq.n	8001552 <__aeabi_dadd+0x42e>
 8001550:	e640      	b.n	80011d4 <__aeabi_dadd+0xb0>
 8001552:	2600      	movs	r6, #0
 8001554:	2400      	movs	r4, #0
 8001556:	2500      	movs	r5, #0
 8001558:	e67c      	b.n	8001254 <__aeabi_dadd+0x130>
 800155a:	4da1      	ldr	r5, [pc, #644]	@ (80017e0 <__aeabi_dadd+0x6bc>)
 800155c:	45a9      	cmp	r9, r5
 800155e:	d100      	bne.n	8001562 <__aeabi_dadd+0x43e>
 8001560:	e090      	b.n	8001684 <__aeabi_dadd+0x560>
 8001562:	2501      	movs	r5, #1
 8001564:	2a38      	cmp	r2, #56	@ 0x38
 8001566:	dd00      	ble.n	800156a <__aeabi_dadd+0x446>
 8001568:	e6ab      	b.n	80012c2 <__aeabi_dadd+0x19e>
 800156a:	2580      	movs	r5, #128	@ 0x80
 800156c:	042d      	lsls	r5, r5, #16
 800156e:	432c      	orrs	r4, r5
 8001570:	e695      	b.n	800129e <__aeabi_dadd+0x17a>
 8001572:	0011      	movs	r1, r2
 8001574:	4655      	mov	r5, sl
 8001576:	3920      	subs	r1, #32
 8001578:	40cd      	lsrs	r5, r1
 800157a:	46a9      	mov	r9, r5
 800157c:	2a20      	cmp	r2, #32
 800157e:	d006      	beq.n	800158e <__aeabi_dadd+0x46a>
 8001580:	2140      	movs	r1, #64	@ 0x40
 8001582:	4653      	mov	r3, sl
 8001584:	1a8a      	subs	r2, r1, r2
 8001586:	4093      	lsls	r3, r2
 8001588:	4662      	mov	r2, ip
 800158a:	431a      	orrs	r2, r3
 800158c:	4694      	mov	ip, r2
 800158e:	4665      	mov	r5, ip
 8001590:	1e6b      	subs	r3, r5, #1
 8001592:	419d      	sbcs	r5, r3
 8001594:	464b      	mov	r3, r9
 8001596:	431d      	orrs	r5, r3
 8001598:	e612      	b.n	80011c0 <__aeabi_dadd+0x9c>
 800159a:	0021      	movs	r1, r4
 800159c:	4301      	orrs	r1, r0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x47e>
 80015a0:	e0c4      	b.n	800172c <__aeabi_dadd+0x608>
 80015a2:	1e51      	subs	r1, r2, #1
 80015a4:	2a01      	cmp	r2, #1
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x486>
 80015a8:	e0fb      	b.n	80017a2 <__aeabi_dadd+0x67e>
 80015aa:	4d8d      	ldr	r5, [pc, #564]	@ (80017e0 <__aeabi_dadd+0x6bc>)
 80015ac:	42aa      	cmp	r2, r5
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dadd+0x48e>
 80015b0:	e0b5      	b.n	800171e <__aeabi_dadd+0x5fa>
 80015b2:	2501      	movs	r5, #1
 80015b4:	2938      	cmp	r1, #56	@ 0x38
 80015b6:	dd00      	ble.n	80015ba <__aeabi_dadd+0x496>
 80015b8:	e741      	b.n	800143e <__aeabi_dadd+0x31a>
 80015ba:	000a      	movs	r2, r1
 80015bc:	e72f      	b.n	800141e <__aeabi_dadd+0x2fa>
 80015be:	4c89      	ldr	r4, [pc, #548]	@ (80017e4 <__aeabi_dadd+0x6c0>)
 80015c0:	1aff      	subs	r7, r7, r3
 80015c2:	4014      	ands	r4, r2
 80015c4:	0762      	lsls	r2, r4, #29
 80015c6:	08e4      	lsrs	r4, r4, #3
 80015c8:	e76a      	b.n	80014a0 <__aeabi_dadd+0x37c>
 80015ca:	4a85      	ldr	r2, [pc, #532]	@ (80017e0 <__aeabi_dadd+0x6bc>)
 80015cc:	4291      	cmp	r1, r2
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x4ae>
 80015d0:	e0e3      	b.n	800179a <__aeabi_dadd+0x676>
 80015d2:	4663      	mov	r3, ip
 80015d4:	18c2      	adds	r2, r0, r3
 80015d6:	4282      	cmp	r2, r0
 80015d8:	4180      	sbcs	r0, r0
 80015da:	0023      	movs	r3, r4
 80015dc:	4240      	negs	r0, r0
 80015de:	4453      	add	r3, sl
 80015e0:	181b      	adds	r3, r3, r0
 80015e2:	07dd      	lsls	r5, r3, #31
 80015e4:	085c      	lsrs	r4, r3, #1
 80015e6:	2307      	movs	r3, #7
 80015e8:	0852      	lsrs	r2, r2, #1
 80015ea:	4315      	orrs	r5, r2
 80015ec:	000f      	movs	r7, r1
 80015ee:	402b      	ands	r3, r5
 80015f0:	e700      	b.n	80013f4 <__aeabi_dadd+0x2d0>
 80015f2:	4663      	mov	r3, ip
 80015f4:	1a1d      	subs	r5, r3, r0
 80015f6:	45ac      	cmp	ip, r5
 80015f8:	4192      	sbcs	r2, r2
 80015fa:	4653      	mov	r3, sl
 80015fc:	4252      	negs	r2, r2
 80015fe:	1b1c      	subs	r4, r3, r4
 8001600:	000e      	movs	r6, r1
 8001602:	4688      	mov	r8, r1
 8001604:	1aa4      	subs	r4, r4, r2
 8001606:	e5e5      	b.n	80011d4 <__aeabi_dadd+0xb0>
 8001608:	2d00      	cmp	r5, #0
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x4ea>
 800160c:	e091      	b.n	8001732 <__aeabi_dadd+0x60e>
 800160e:	2a00      	cmp	r2, #0
 8001610:	d138      	bne.n	8001684 <__aeabi_dadd+0x560>
 8001612:	2480      	movs	r4, #128	@ 0x80
 8001614:	2600      	movs	r6, #0
 8001616:	0324      	lsls	r4, r4, #12
 8001618:	e756      	b.n	80014c8 <__aeabi_dadd+0x3a4>
 800161a:	4663      	mov	r3, ip
 800161c:	18c5      	adds	r5, r0, r3
 800161e:	4285      	cmp	r5, r0
 8001620:	4180      	sbcs	r0, r0
 8001622:	4454      	add	r4, sl
 8001624:	4240      	negs	r0, r0
 8001626:	1824      	adds	r4, r4, r0
 8001628:	2701      	movs	r7, #1
 800162a:	0223      	lsls	r3, r4, #8
 800162c:	d400      	bmi.n	8001630 <__aeabi_dadd+0x50c>
 800162e:	e6df      	b.n	80013f0 <__aeabi_dadd+0x2cc>
 8001630:	2702      	movs	r7, #2
 8001632:	e687      	b.n	8001344 <__aeabi_dadd+0x220>
 8001634:	4663      	mov	r3, ip
 8001636:	1ac5      	subs	r5, r0, r3
 8001638:	42a8      	cmp	r0, r5
 800163a:	4180      	sbcs	r0, r0
 800163c:	4653      	mov	r3, sl
 800163e:	4240      	negs	r0, r0
 8001640:	1ae4      	subs	r4, r4, r3
 8001642:	2701      	movs	r7, #1
 8001644:	1a24      	subs	r4, r4, r0
 8001646:	e5c0      	b.n	80011ca <__aeabi_dadd+0xa6>
 8001648:	0762      	lsls	r2, r4, #29
 800164a:	08c0      	lsrs	r0, r0, #3
 800164c:	4302      	orrs	r2, r0
 800164e:	08e4      	lsrs	r4, r4, #3
 8001650:	e736      	b.n	80014c0 <__aeabi_dadd+0x39c>
 8001652:	0011      	movs	r1, r2
 8001654:	4653      	mov	r3, sl
 8001656:	3920      	subs	r1, #32
 8001658:	40cb      	lsrs	r3, r1
 800165a:	4699      	mov	r9, r3
 800165c:	2a20      	cmp	r2, #32
 800165e:	d006      	beq.n	800166e <__aeabi_dadd+0x54a>
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	4653      	mov	r3, sl
 8001664:	1a8a      	subs	r2, r1, r2
 8001666:	4093      	lsls	r3, r2
 8001668:	4662      	mov	r2, ip
 800166a:	431a      	orrs	r2, r3
 800166c:	4694      	mov	ip, r2
 800166e:	4665      	mov	r5, ip
 8001670:	1e6b      	subs	r3, r5, #1
 8001672:	419d      	sbcs	r5, r3
 8001674:	464b      	mov	r3, r9
 8001676:	431d      	orrs	r5, r3
 8001678:	e659      	b.n	800132e <__aeabi_dadd+0x20a>
 800167a:	0762      	lsls	r2, r4, #29
 800167c:	08c0      	lsrs	r0, r0, #3
 800167e:	4302      	orrs	r2, r0
 8001680:	08e4      	lsrs	r4, r4, #3
 8001682:	e70d      	b.n	80014a0 <__aeabi_dadd+0x37c>
 8001684:	4653      	mov	r3, sl
 8001686:	075a      	lsls	r2, r3, #29
 8001688:	4663      	mov	r3, ip
 800168a:	08d8      	lsrs	r0, r3, #3
 800168c:	4653      	mov	r3, sl
 800168e:	000e      	movs	r6, r1
 8001690:	4302      	orrs	r2, r0
 8001692:	08dc      	lsrs	r4, r3, #3
 8001694:	e714      	b.n	80014c0 <__aeabi_dadd+0x39c>
 8001696:	0015      	movs	r5, r2
 8001698:	0026      	movs	r6, r4
 800169a:	3d20      	subs	r5, #32
 800169c:	40ee      	lsrs	r6, r5
 800169e:	2a20      	cmp	r2, #32
 80016a0:	d003      	beq.n	80016aa <__aeabi_dadd+0x586>
 80016a2:	2540      	movs	r5, #64	@ 0x40
 80016a4:	1aaa      	subs	r2, r5, r2
 80016a6:	4094      	lsls	r4, r2
 80016a8:	4320      	orrs	r0, r4
 80016aa:	1e42      	subs	r2, r0, #1
 80016ac:	4190      	sbcs	r0, r2
 80016ae:	0005      	movs	r5, r0
 80016b0:	4335      	orrs	r5, r6
 80016b2:	e606      	b.n	80012c2 <__aeabi_dadd+0x19e>
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	d07c      	beq.n	80017b2 <__aeabi_dadd+0x68e>
 80016b8:	4662      	mov	r2, ip
 80016ba:	4653      	mov	r3, sl
 80016bc:	08c0      	lsrs	r0, r0, #3
 80016be:	431a      	orrs	r2, r3
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x5a0>
 80016c2:	e6fa      	b.n	80014ba <__aeabi_dadd+0x396>
 80016c4:	0762      	lsls	r2, r4, #29
 80016c6:	4310      	orrs	r0, r2
 80016c8:	2280      	movs	r2, #128	@ 0x80
 80016ca:	08e4      	lsrs	r4, r4, #3
 80016cc:	0312      	lsls	r2, r2, #12
 80016ce:	4214      	tst	r4, r2
 80016d0:	d008      	beq.n	80016e4 <__aeabi_dadd+0x5c0>
 80016d2:	08d9      	lsrs	r1, r3, #3
 80016d4:	4211      	tst	r1, r2
 80016d6:	d105      	bne.n	80016e4 <__aeabi_dadd+0x5c0>
 80016d8:	4663      	mov	r3, ip
 80016da:	08d8      	lsrs	r0, r3, #3
 80016dc:	4653      	mov	r3, sl
 80016de:	000c      	movs	r4, r1
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	4318      	orrs	r0, r3
 80016e4:	0f42      	lsrs	r2, r0, #29
 80016e6:	00c0      	lsls	r0, r0, #3
 80016e8:	08c0      	lsrs	r0, r0, #3
 80016ea:	0752      	lsls	r2, r2, #29
 80016ec:	4302      	orrs	r2, r0
 80016ee:	e6e7      	b.n	80014c0 <__aeabi_dadd+0x39c>
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dadd+0x5d2>
 80016f4:	e72d      	b.n	8001552 <__aeabi_dadd+0x42e>
 80016f6:	4663      	mov	r3, ip
 80016f8:	08d8      	lsrs	r0, r3, #3
 80016fa:	4653      	mov	r3, sl
 80016fc:	075a      	lsls	r2, r3, #29
 80016fe:	000e      	movs	r6, r1
 8001700:	4302      	orrs	r2, r0
 8001702:	08dc      	lsrs	r4, r3, #3
 8001704:	e6cc      	b.n	80014a0 <__aeabi_dadd+0x37c>
 8001706:	4663      	mov	r3, ip
 8001708:	1a1d      	subs	r5, r3, r0
 800170a:	45ac      	cmp	ip, r5
 800170c:	4192      	sbcs	r2, r2
 800170e:	4653      	mov	r3, sl
 8001710:	4252      	negs	r2, r2
 8001712:	1b1c      	subs	r4, r3, r4
 8001714:	000e      	movs	r6, r1
 8001716:	4688      	mov	r8, r1
 8001718:	1aa4      	subs	r4, r4, r2
 800171a:	3701      	adds	r7, #1
 800171c:	e555      	b.n	80011ca <__aeabi_dadd+0xa6>
 800171e:	4663      	mov	r3, ip
 8001720:	08d9      	lsrs	r1, r3, #3
 8001722:	4653      	mov	r3, sl
 8001724:	075a      	lsls	r2, r3, #29
 8001726:	430a      	orrs	r2, r1
 8001728:	08dc      	lsrs	r4, r3, #3
 800172a:	e6c9      	b.n	80014c0 <__aeabi_dadd+0x39c>
 800172c:	4660      	mov	r0, ip
 800172e:	4654      	mov	r4, sl
 8001730:	e6d4      	b.n	80014dc <__aeabi_dadd+0x3b8>
 8001732:	08c0      	lsrs	r0, r0, #3
 8001734:	2a00      	cmp	r2, #0
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x616>
 8001738:	e6bf      	b.n	80014ba <__aeabi_dadd+0x396>
 800173a:	0762      	lsls	r2, r4, #29
 800173c:	4310      	orrs	r0, r2
 800173e:	2280      	movs	r2, #128	@ 0x80
 8001740:	08e4      	lsrs	r4, r4, #3
 8001742:	0312      	lsls	r2, r2, #12
 8001744:	4214      	tst	r4, r2
 8001746:	d0cd      	beq.n	80016e4 <__aeabi_dadd+0x5c0>
 8001748:	08dd      	lsrs	r5, r3, #3
 800174a:	4215      	tst	r5, r2
 800174c:	d1ca      	bne.n	80016e4 <__aeabi_dadd+0x5c0>
 800174e:	4663      	mov	r3, ip
 8001750:	08d8      	lsrs	r0, r3, #3
 8001752:	4653      	mov	r3, sl
 8001754:	075b      	lsls	r3, r3, #29
 8001756:	000e      	movs	r6, r1
 8001758:	002c      	movs	r4, r5
 800175a:	4318      	orrs	r0, r3
 800175c:	e7c2      	b.n	80016e4 <__aeabi_dadd+0x5c0>
 800175e:	4663      	mov	r3, ip
 8001760:	08d9      	lsrs	r1, r3, #3
 8001762:	4653      	mov	r3, sl
 8001764:	075a      	lsls	r2, r3, #29
 8001766:	430a      	orrs	r2, r1
 8001768:	08dc      	lsrs	r4, r3, #3
 800176a:	e699      	b.n	80014a0 <__aeabi_dadd+0x37c>
 800176c:	4663      	mov	r3, ip
 800176e:	08d8      	lsrs	r0, r3, #3
 8001770:	4653      	mov	r3, sl
 8001772:	075a      	lsls	r2, r3, #29
 8001774:	000e      	movs	r6, r1
 8001776:	4302      	orrs	r2, r0
 8001778:	08dc      	lsrs	r4, r3, #3
 800177a:	e6a1      	b.n	80014c0 <__aeabi_dadd+0x39c>
 800177c:	0011      	movs	r1, r2
 800177e:	0027      	movs	r7, r4
 8001780:	3920      	subs	r1, #32
 8001782:	40cf      	lsrs	r7, r1
 8001784:	2a20      	cmp	r2, #32
 8001786:	d003      	beq.n	8001790 <__aeabi_dadd+0x66c>
 8001788:	2140      	movs	r1, #64	@ 0x40
 800178a:	1a8a      	subs	r2, r1, r2
 800178c:	4094      	lsls	r4, r2
 800178e:	4320      	orrs	r0, r4
 8001790:	1e42      	subs	r2, r0, #1
 8001792:	4190      	sbcs	r0, r2
 8001794:	0005      	movs	r5, r0
 8001796:	433d      	orrs	r5, r7
 8001798:	e651      	b.n	800143e <__aeabi_dadd+0x31a>
 800179a:	000c      	movs	r4, r1
 800179c:	2500      	movs	r5, #0
 800179e:	2200      	movs	r2, #0
 80017a0:	e558      	b.n	8001254 <__aeabi_dadd+0x130>
 80017a2:	4460      	add	r0, ip
 80017a4:	4560      	cmp	r0, ip
 80017a6:	4192      	sbcs	r2, r2
 80017a8:	4454      	add	r4, sl
 80017aa:	4252      	negs	r2, r2
 80017ac:	0005      	movs	r5, r0
 80017ae:	18a4      	adds	r4, r4, r2
 80017b0:	e73a      	b.n	8001628 <__aeabi_dadd+0x504>
 80017b2:	4653      	mov	r3, sl
 80017b4:	075a      	lsls	r2, r3, #29
 80017b6:	4663      	mov	r3, ip
 80017b8:	08d9      	lsrs	r1, r3, #3
 80017ba:	4653      	mov	r3, sl
 80017bc:	430a      	orrs	r2, r1
 80017be:	08dc      	lsrs	r4, r3, #3
 80017c0:	e67e      	b.n	80014c0 <__aeabi_dadd+0x39c>
 80017c2:	001a      	movs	r2, r3
 80017c4:	001c      	movs	r4, r3
 80017c6:	432a      	orrs	r2, r5
 80017c8:	d000      	beq.n	80017cc <__aeabi_dadd+0x6a8>
 80017ca:	e6ab      	b.n	8001524 <__aeabi_dadd+0x400>
 80017cc:	e6c1      	b.n	8001552 <__aeabi_dadd+0x42e>
 80017ce:	2120      	movs	r1, #32
 80017d0:	2500      	movs	r5, #0
 80017d2:	1a09      	subs	r1, r1, r0
 80017d4:	e519      	b.n	800120a <__aeabi_dadd+0xe6>
 80017d6:	2200      	movs	r2, #0
 80017d8:	2500      	movs	r5, #0
 80017da:	4c01      	ldr	r4, [pc, #4]	@ (80017e0 <__aeabi_dadd+0x6bc>)
 80017dc:	e53a      	b.n	8001254 <__aeabi_dadd+0x130>
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	000007ff 	.word	0x000007ff
 80017e4:	ff7fffff 	.word	0xff7fffff
 80017e8:	000007fe 	.word	0x000007fe

080017ec <__aeabi_dmul>:
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	4657      	mov	r7, sl
 80017f0:	46de      	mov	lr, fp
 80017f2:	464e      	mov	r6, r9
 80017f4:	4645      	mov	r5, r8
 80017f6:	b5e0      	push	{r5, r6, r7, lr}
 80017f8:	001f      	movs	r7, r3
 80017fa:	030b      	lsls	r3, r1, #12
 80017fc:	0b1b      	lsrs	r3, r3, #12
 80017fe:	0016      	movs	r6, r2
 8001800:	469a      	mov	sl, r3
 8001802:	0fca      	lsrs	r2, r1, #31
 8001804:	004b      	lsls	r3, r1, #1
 8001806:	0004      	movs	r4, r0
 8001808:	4693      	mov	fp, r2
 800180a:	b087      	sub	sp, #28
 800180c:	0d5b      	lsrs	r3, r3, #21
 800180e:	d100      	bne.n	8001812 <__aeabi_dmul+0x26>
 8001810:	e0d5      	b.n	80019be <__aeabi_dmul+0x1d2>
 8001812:	4abb      	ldr	r2, [pc, #748]	@ (8001b00 <__aeabi_dmul+0x314>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x2e>
 8001818:	e0f8      	b.n	8001a0c <__aeabi_dmul+0x220>
 800181a:	4651      	mov	r1, sl
 800181c:	0f42      	lsrs	r2, r0, #29
 800181e:	00c9      	lsls	r1, r1, #3
 8001820:	430a      	orrs	r2, r1
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	0409      	lsls	r1, r1, #16
 8001826:	4311      	orrs	r1, r2
 8001828:	00c2      	lsls	r2, r0, #3
 800182a:	4691      	mov	r9, r2
 800182c:	4ab5      	ldr	r2, [pc, #724]	@ (8001b04 <__aeabi_dmul+0x318>)
 800182e:	468a      	mov	sl, r1
 8001830:	189d      	adds	r5, r3, r2
 8001832:	2300      	movs	r3, #0
 8001834:	4698      	mov	r8, r3
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	033c      	lsls	r4, r7, #12
 800183a:	007b      	lsls	r3, r7, #1
 800183c:	0ffa      	lsrs	r2, r7, #31
 800183e:	0030      	movs	r0, r6
 8001840:	0b24      	lsrs	r4, r4, #12
 8001842:	0d5b      	lsrs	r3, r3, #21
 8001844:	9200      	str	r2, [sp, #0]
 8001846:	d100      	bne.n	800184a <__aeabi_dmul+0x5e>
 8001848:	e096      	b.n	8001978 <__aeabi_dmul+0x18c>
 800184a:	4aad      	ldr	r2, [pc, #692]	@ (8001b00 <__aeabi_dmul+0x314>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d031      	beq.n	80018b4 <__aeabi_dmul+0xc8>
 8001850:	0f72      	lsrs	r2, r6, #29
 8001852:	00e4      	lsls	r4, r4, #3
 8001854:	4322      	orrs	r2, r4
 8001856:	2480      	movs	r4, #128	@ 0x80
 8001858:	0424      	lsls	r4, r4, #16
 800185a:	4314      	orrs	r4, r2
 800185c:	4aa9      	ldr	r2, [pc, #676]	@ (8001b04 <__aeabi_dmul+0x318>)
 800185e:	00f0      	lsls	r0, r6, #3
 8001860:	4694      	mov	ip, r2
 8001862:	4463      	add	r3, ip
 8001864:	195b      	adds	r3, r3, r5
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	4642      	mov	r2, r8
 800186c:	2600      	movs	r6, #0
 800186e:	2a0a      	cmp	r2, #10
 8001870:	dc42      	bgt.n	80018f8 <__aeabi_dmul+0x10c>
 8001872:	465a      	mov	r2, fp
 8001874:	9900      	ldr	r1, [sp, #0]
 8001876:	404a      	eors	r2, r1
 8001878:	4693      	mov	fp, r2
 800187a:	4642      	mov	r2, r8
 800187c:	2a02      	cmp	r2, #2
 800187e:	dc32      	bgt.n	80018e6 <__aeabi_dmul+0xfa>
 8001880:	3a01      	subs	r2, #1
 8001882:	2a01      	cmp	r2, #1
 8001884:	d900      	bls.n	8001888 <__aeabi_dmul+0x9c>
 8001886:	e149      	b.n	8001b1c <__aeabi_dmul+0x330>
 8001888:	2e02      	cmp	r6, #2
 800188a:	d100      	bne.n	800188e <__aeabi_dmul+0xa2>
 800188c:	e0ca      	b.n	8001a24 <__aeabi_dmul+0x238>
 800188e:	2e01      	cmp	r6, #1
 8001890:	d13d      	bne.n	800190e <__aeabi_dmul+0x122>
 8001892:	2300      	movs	r3, #0
 8001894:	2400      	movs	r4, #0
 8001896:	2200      	movs	r2, #0
 8001898:	0010      	movs	r0, r2
 800189a:	465a      	mov	r2, fp
 800189c:	051b      	lsls	r3, r3, #20
 800189e:	4323      	orrs	r3, r4
 80018a0:	07d2      	lsls	r2, r2, #31
 80018a2:	4313      	orrs	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	b007      	add	sp, #28
 80018a8:	bcf0      	pop	{r4, r5, r6, r7}
 80018aa:	46bb      	mov	fp, r7
 80018ac:	46b2      	mov	sl, r6
 80018ae:	46a9      	mov	r9, r5
 80018b0:	46a0      	mov	r8, r4
 80018b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b4:	4b92      	ldr	r3, [pc, #584]	@ (8001b00 <__aeabi_dmul+0x314>)
 80018b6:	4326      	orrs	r6, r4
 80018b8:	18eb      	adds	r3, r5, r3
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dmul+0xd4>
 80018be:	e0bb      	b.n	8001a38 <__aeabi_dmul+0x24c>
 80018c0:	2203      	movs	r2, #3
 80018c2:	4641      	mov	r1, r8
 80018c4:	4311      	orrs	r1, r2
 80018c6:	465a      	mov	r2, fp
 80018c8:	4688      	mov	r8, r1
 80018ca:	9900      	ldr	r1, [sp, #0]
 80018cc:	404a      	eors	r2, r1
 80018ce:	2180      	movs	r1, #128	@ 0x80
 80018d0:	0109      	lsls	r1, r1, #4
 80018d2:	468c      	mov	ip, r1
 80018d4:	0029      	movs	r1, r5
 80018d6:	4461      	add	r1, ip
 80018d8:	9101      	str	r1, [sp, #4]
 80018da:	4641      	mov	r1, r8
 80018dc:	290a      	cmp	r1, #10
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dmul+0xf6>
 80018e0:	e233      	b.n	8001d4a <__aeabi_dmul+0x55e>
 80018e2:	4693      	mov	fp, r2
 80018e4:	2603      	movs	r6, #3
 80018e6:	4642      	mov	r2, r8
 80018e8:	2701      	movs	r7, #1
 80018ea:	4097      	lsls	r7, r2
 80018ec:	21a6      	movs	r1, #166	@ 0xa6
 80018ee:	003a      	movs	r2, r7
 80018f0:	00c9      	lsls	r1, r1, #3
 80018f2:	400a      	ands	r2, r1
 80018f4:	420f      	tst	r7, r1
 80018f6:	d031      	beq.n	800195c <__aeabi_dmul+0x170>
 80018f8:	9e02      	ldr	r6, [sp, #8]
 80018fa:	2e02      	cmp	r6, #2
 80018fc:	d100      	bne.n	8001900 <__aeabi_dmul+0x114>
 80018fe:	e235      	b.n	8001d6c <__aeabi_dmul+0x580>
 8001900:	2e03      	cmp	r6, #3
 8001902:	d100      	bne.n	8001906 <__aeabi_dmul+0x11a>
 8001904:	e1d2      	b.n	8001cac <__aeabi_dmul+0x4c0>
 8001906:	4654      	mov	r4, sl
 8001908:	4648      	mov	r0, r9
 800190a:	2e01      	cmp	r6, #1
 800190c:	d0c1      	beq.n	8001892 <__aeabi_dmul+0xa6>
 800190e:	9a01      	ldr	r2, [sp, #4]
 8001910:	4b7d      	ldr	r3, [pc, #500]	@ (8001b08 <__aeabi_dmul+0x31c>)
 8001912:	4694      	mov	ip, r2
 8001914:	4463      	add	r3, ip
 8001916:	2b00      	cmp	r3, #0
 8001918:	dc00      	bgt.n	800191c <__aeabi_dmul+0x130>
 800191a:	e0c0      	b.n	8001a9e <__aeabi_dmul+0x2b2>
 800191c:	0742      	lsls	r2, r0, #29
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x148>
 8001920:	220f      	movs	r2, #15
 8001922:	4002      	ands	r2, r0
 8001924:	2a04      	cmp	r2, #4
 8001926:	d005      	beq.n	8001934 <__aeabi_dmul+0x148>
 8001928:	1d02      	adds	r2, r0, #4
 800192a:	4282      	cmp	r2, r0
 800192c:	4180      	sbcs	r0, r0
 800192e:	4240      	negs	r0, r0
 8001930:	1824      	adds	r4, r4, r0
 8001932:	0010      	movs	r0, r2
 8001934:	01e2      	lsls	r2, r4, #7
 8001936:	d506      	bpl.n	8001946 <__aeabi_dmul+0x15a>
 8001938:	4b74      	ldr	r3, [pc, #464]	@ (8001b0c <__aeabi_dmul+0x320>)
 800193a:	9a01      	ldr	r2, [sp, #4]
 800193c:	401c      	ands	r4, r3
 800193e:	2380      	movs	r3, #128	@ 0x80
 8001940:	4694      	mov	ip, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4463      	add	r3, ip
 8001946:	4a72      	ldr	r2, [pc, #456]	@ (8001b10 <__aeabi_dmul+0x324>)
 8001948:	4293      	cmp	r3, r2
 800194a:	dc6b      	bgt.n	8001a24 <__aeabi_dmul+0x238>
 800194c:	0762      	lsls	r2, r4, #29
 800194e:	08c0      	lsrs	r0, r0, #3
 8001950:	0264      	lsls	r4, r4, #9
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	4302      	orrs	r2, r0
 8001956:	0b24      	lsrs	r4, r4, #12
 8001958:	0d5b      	lsrs	r3, r3, #21
 800195a:	e79d      	b.n	8001898 <__aeabi_dmul+0xac>
 800195c:	2190      	movs	r1, #144	@ 0x90
 800195e:	0089      	lsls	r1, r1, #2
 8001960:	420f      	tst	r7, r1
 8001962:	d163      	bne.n	8001a2c <__aeabi_dmul+0x240>
 8001964:	2288      	movs	r2, #136	@ 0x88
 8001966:	423a      	tst	r2, r7
 8001968:	d100      	bne.n	800196c <__aeabi_dmul+0x180>
 800196a:	e0d7      	b.n	8001b1c <__aeabi_dmul+0x330>
 800196c:	9b00      	ldr	r3, [sp, #0]
 800196e:	46a2      	mov	sl, r4
 8001970:	469b      	mov	fp, r3
 8001972:	4681      	mov	r9, r0
 8001974:	9602      	str	r6, [sp, #8]
 8001976:	e7bf      	b.n	80018f8 <__aeabi_dmul+0x10c>
 8001978:	0023      	movs	r3, r4
 800197a:	4333      	orrs	r3, r6
 800197c:	d100      	bne.n	8001980 <__aeabi_dmul+0x194>
 800197e:	e07f      	b.n	8001a80 <__aeabi_dmul+0x294>
 8001980:	2c00      	cmp	r4, #0
 8001982:	d100      	bne.n	8001986 <__aeabi_dmul+0x19a>
 8001984:	e1ad      	b.n	8001ce2 <__aeabi_dmul+0x4f6>
 8001986:	0020      	movs	r0, r4
 8001988:	f000 fe3c 	bl	8002604 <__clzsi2>
 800198c:	0002      	movs	r2, r0
 800198e:	0003      	movs	r3, r0
 8001990:	3a0b      	subs	r2, #11
 8001992:	201d      	movs	r0, #29
 8001994:	0019      	movs	r1, r3
 8001996:	1a82      	subs	r2, r0, r2
 8001998:	0030      	movs	r0, r6
 800199a:	3908      	subs	r1, #8
 800199c:	40d0      	lsrs	r0, r2
 800199e:	408c      	lsls	r4, r1
 80019a0:	4304      	orrs	r4, r0
 80019a2:	0030      	movs	r0, r6
 80019a4:	4088      	lsls	r0, r1
 80019a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b14 <__aeabi_dmul+0x328>)
 80019a8:	1aeb      	subs	r3, r5, r3
 80019aa:	4694      	mov	ip, r2
 80019ac:	4463      	add	r3, ip
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	9201      	str	r2, [sp, #4]
 80019b2:	4642      	mov	r2, r8
 80019b4:	2600      	movs	r6, #0
 80019b6:	2a0a      	cmp	r2, #10
 80019b8:	dc00      	bgt.n	80019bc <__aeabi_dmul+0x1d0>
 80019ba:	e75a      	b.n	8001872 <__aeabi_dmul+0x86>
 80019bc:	e79c      	b.n	80018f8 <__aeabi_dmul+0x10c>
 80019be:	4653      	mov	r3, sl
 80019c0:	4303      	orrs	r3, r0
 80019c2:	4699      	mov	r9, r3
 80019c4:	d054      	beq.n	8001a70 <__aeabi_dmul+0x284>
 80019c6:	4653      	mov	r3, sl
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x1e2>
 80019cc:	e177      	b.n	8001cbe <__aeabi_dmul+0x4d2>
 80019ce:	4650      	mov	r0, sl
 80019d0:	f000 fe18 	bl	8002604 <__clzsi2>
 80019d4:	230b      	movs	r3, #11
 80019d6:	425b      	negs	r3, r3
 80019d8:	469c      	mov	ip, r3
 80019da:	0002      	movs	r2, r0
 80019dc:	4484      	add	ip, r0
 80019de:	0011      	movs	r1, r2
 80019e0:	4650      	mov	r0, sl
 80019e2:	3908      	subs	r1, #8
 80019e4:	4088      	lsls	r0, r1
 80019e6:	231d      	movs	r3, #29
 80019e8:	4680      	mov	r8, r0
 80019ea:	4660      	mov	r0, ip
 80019ec:	1a1b      	subs	r3, r3, r0
 80019ee:	0020      	movs	r0, r4
 80019f0:	40d8      	lsrs	r0, r3
 80019f2:	0003      	movs	r3, r0
 80019f4:	4640      	mov	r0, r8
 80019f6:	4303      	orrs	r3, r0
 80019f8:	469a      	mov	sl, r3
 80019fa:	0023      	movs	r3, r4
 80019fc:	408b      	lsls	r3, r1
 80019fe:	4699      	mov	r9, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	4d44      	ldr	r5, [pc, #272]	@ (8001b14 <__aeabi_dmul+0x328>)
 8001a04:	4698      	mov	r8, r3
 8001a06:	1aad      	subs	r5, r5, r2
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	e715      	b.n	8001838 <__aeabi_dmul+0x4c>
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	4302      	orrs	r2, r0
 8001a10:	4691      	mov	r9, r2
 8001a12:	d126      	bne.n	8001a62 <__aeabi_dmul+0x276>
 8001a14:	2200      	movs	r2, #0
 8001a16:	001d      	movs	r5, r3
 8001a18:	2302      	movs	r3, #2
 8001a1a:	4692      	mov	sl, r2
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	4690      	mov	r8, r2
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	e709      	b.n	8001838 <__aeabi_dmul+0x4c>
 8001a24:	2400      	movs	r4, #0
 8001a26:	2200      	movs	r2, #0
 8001a28:	4b35      	ldr	r3, [pc, #212]	@ (8001b00 <__aeabi_dmul+0x314>)
 8001a2a:	e735      	b.n	8001898 <__aeabi_dmul+0xac>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2480      	movs	r4, #128	@ 0x80
 8001a30:	469b      	mov	fp, r3
 8001a32:	0324      	lsls	r4, r4, #12
 8001a34:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <__aeabi_dmul+0x314>)
 8001a36:	e72f      	b.n	8001898 <__aeabi_dmul+0xac>
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	4311      	orrs	r1, r2
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	4694      	mov	ip, r2
 8001a44:	002a      	movs	r2, r5
 8001a46:	4462      	add	r2, ip
 8001a48:	4688      	mov	r8, r1
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	290a      	cmp	r1, #10
 8001a4e:	dd00      	ble.n	8001a52 <__aeabi_dmul+0x266>
 8001a50:	e752      	b.n	80018f8 <__aeabi_dmul+0x10c>
 8001a52:	465a      	mov	r2, fp
 8001a54:	2000      	movs	r0, #0
 8001a56:	9900      	ldr	r1, [sp, #0]
 8001a58:	0004      	movs	r4, r0
 8001a5a:	404a      	eors	r2, r1
 8001a5c:	4693      	mov	fp, r2
 8001a5e:	2602      	movs	r6, #2
 8001a60:	e70b      	b.n	800187a <__aeabi_dmul+0x8e>
 8001a62:	220c      	movs	r2, #12
 8001a64:	001d      	movs	r5, r3
 8001a66:	2303      	movs	r3, #3
 8001a68:	4681      	mov	r9, r0
 8001a6a:	4690      	mov	r8, r2
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	e6e3      	b.n	8001838 <__aeabi_dmul+0x4c>
 8001a70:	2300      	movs	r3, #0
 8001a72:	469a      	mov	sl, r3
 8001a74:	3304      	adds	r3, #4
 8001a76:	4698      	mov	r8, r3
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	e6db      	b.n	8001838 <__aeabi_dmul+0x4c>
 8001a80:	4642      	mov	r2, r8
 8001a82:	3301      	adds	r3, #1
 8001a84:	431a      	orrs	r2, r3
 8001a86:	002b      	movs	r3, r5
 8001a88:	4690      	mov	r8, r2
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	9201      	str	r2, [sp, #4]
 8001a8e:	4642      	mov	r2, r8
 8001a90:	2400      	movs	r4, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	2601      	movs	r6, #1
 8001a96:	2a0a      	cmp	r2, #10
 8001a98:	dc00      	bgt.n	8001a9c <__aeabi_dmul+0x2b0>
 8001a9a:	e6ea      	b.n	8001872 <__aeabi_dmul+0x86>
 8001a9c:	e72c      	b.n	80018f8 <__aeabi_dmul+0x10c>
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	1ad2      	subs	r2, r2, r3
 8001aa2:	2a38      	cmp	r2, #56	@ 0x38
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dmul+0x2bc>
 8001aa6:	e6f4      	b.n	8001892 <__aeabi_dmul+0xa6>
 8001aa8:	2a1f      	cmp	r2, #31
 8001aaa:	dc00      	bgt.n	8001aae <__aeabi_dmul+0x2c2>
 8001aac:	e12a      	b.n	8001d04 <__aeabi_dmul+0x518>
 8001aae:	211f      	movs	r1, #31
 8001ab0:	4249      	negs	r1, r1
 8001ab2:	1acb      	subs	r3, r1, r3
 8001ab4:	0021      	movs	r1, r4
 8001ab6:	40d9      	lsrs	r1, r3
 8001ab8:	000b      	movs	r3, r1
 8001aba:	2a20      	cmp	r2, #32
 8001abc:	d005      	beq.n	8001aca <__aeabi_dmul+0x2de>
 8001abe:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <__aeabi_dmul+0x32c>)
 8001ac0:	9d01      	ldr	r5, [sp, #4]
 8001ac2:	4694      	mov	ip, r2
 8001ac4:	4465      	add	r5, ip
 8001ac6:	40ac      	lsls	r4, r5
 8001ac8:	4320      	orrs	r0, r4
 8001aca:	1e42      	subs	r2, r0, #1
 8001acc:	4190      	sbcs	r0, r2
 8001ace:	4318      	orrs	r0, r3
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	0019      	movs	r1, r3
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	4001      	ands	r1, r0
 8001ad8:	4203      	tst	r3, r0
 8001ada:	d00c      	beq.n	8001af6 <__aeabi_dmul+0x30a>
 8001adc:	230f      	movs	r3, #15
 8001ade:	4003      	ands	r3, r0
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dmul+0x2fa>
 8001ae4:	e140      	b.n	8001d68 <__aeabi_dmul+0x57c>
 8001ae6:	1d03      	adds	r3, r0, #4
 8001ae8:	4283      	cmp	r3, r0
 8001aea:	41a4      	sbcs	r4, r4
 8001aec:	0018      	movs	r0, r3
 8001aee:	4264      	negs	r4, r4
 8001af0:	0761      	lsls	r1, r4, #29
 8001af2:	0264      	lsls	r4, r4, #9
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	08c2      	lsrs	r2, r0, #3
 8001af8:	2300      	movs	r3, #0
 8001afa:	430a      	orrs	r2, r1
 8001afc:	e6cc      	b.n	8001898 <__aeabi_dmul+0xac>
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	000007ff 	.word	0x000007ff
 8001b04:	fffffc01 	.word	0xfffffc01
 8001b08:	000003ff 	.word	0x000003ff
 8001b0c:	feffffff 	.word	0xfeffffff
 8001b10:	000007fe 	.word	0x000007fe
 8001b14:	fffffc0d 	.word	0xfffffc0d
 8001b18:	0000043e 	.word	0x0000043e
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	464a      	mov	r2, r9
 8001b20:	0409      	lsls	r1, r1, #16
 8001b22:	0c09      	lsrs	r1, r1, #16
 8001b24:	000d      	movs	r5, r1
 8001b26:	0c16      	lsrs	r6, r2, #16
 8001b28:	0c02      	lsrs	r2, r0, #16
 8001b2a:	0400      	lsls	r0, r0, #16
 8001b2c:	0c00      	lsrs	r0, r0, #16
 8001b2e:	4345      	muls	r5, r0
 8001b30:	46ac      	mov	ip, r5
 8001b32:	0005      	movs	r5, r0
 8001b34:	4375      	muls	r5, r6
 8001b36:	46a8      	mov	r8, r5
 8001b38:	0015      	movs	r5, r2
 8001b3a:	000f      	movs	r7, r1
 8001b3c:	4375      	muls	r5, r6
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	9502      	str	r5, [sp, #8]
 8001b42:	002a      	movs	r2, r5
 8001b44:	9d00      	ldr	r5, [sp, #0]
 8001b46:	436f      	muls	r7, r5
 8001b48:	4665      	mov	r5, ip
 8001b4a:	0c2d      	lsrs	r5, r5, #16
 8001b4c:	46a9      	mov	r9, r5
 8001b4e:	4447      	add	r7, r8
 8001b50:	444f      	add	r7, r9
 8001b52:	45b8      	cmp	r8, r7
 8001b54:	d905      	bls.n	8001b62 <__aeabi_dmul+0x376>
 8001b56:	0015      	movs	r5, r2
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	0252      	lsls	r2, r2, #9
 8001b5c:	4690      	mov	r8, r2
 8001b5e:	4445      	add	r5, r8
 8001b60:	9502      	str	r5, [sp, #8]
 8001b62:	0c3d      	lsrs	r5, r7, #16
 8001b64:	9503      	str	r5, [sp, #12]
 8001b66:	4665      	mov	r5, ip
 8001b68:	042d      	lsls	r5, r5, #16
 8001b6a:	043f      	lsls	r7, r7, #16
 8001b6c:	0c2d      	lsrs	r5, r5, #16
 8001b6e:	46ac      	mov	ip, r5
 8001b70:	003d      	movs	r5, r7
 8001b72:	4465      	add	r5, ip
 8001b74:	9504      	str	r5, [sp, #16]
 8001b76:	0c25      	lsrs	r5, r4, #16
 8001b78:	0424      	lsls	r4, r4, #16
 8001b7a:	0c24      	lsrs	r4, r4, #16
 8001b7c:	46ac      	mov	ip, r5
 8001b7e:	0025      	movs	r5, r4
 8001b80:	4375      	muls	r5, r6
 8001b82:	46a8      	mov	r8, r5
 8001b84:	4665      	mov	r5, ip
 8001b86:	000f      	movs	r7, r1
 8001b88:	4369      	muls	r1, r5
 8001b8a:	4441      	add	r1, r8
 8001b8c:	4689      	mov	r9, r1
 8001b8e:	4367      	muls	r7, r4
 8001b90:	0c39      	lsrs	r1, r7, #16
 8001b92:	4449      	add	r1, r9
 8001b94:	436e      	muls	r6, r5
 8001b96:	4588      	cmp	r8, r1
 8001b98:	d903      	bls.n	8001ba2 <__aeabi_dmul+0x3b6>
 8001b9a:	2280      	movs	r2, #128	@ 0x80
 8001b9c:	0252      	lsls	r2, r2, #9
 8001b9e:	4690      	mov	r8, r2
 8001ba0:	4446      	add	r6, r8
 8001ba2:	0c0d      	lsrs	r5, r1, #16
 8001ba4:	46a8      	mov	r8, r5
 8001ba6:	0035      	movs	r5, r6
 8001ba8:	4445      	add	r5, r8
 8001baa:	9505      	str	r5, [sp, #20]
 8001bac:	9d03      	ldr	r5, [sp, #12]
 8001bae:	043f      	lsls	r7, r7, #16
 8001bb0:	46a8      	mov	r8, r5
 8001bb2:	0c3f      	lsrs	r7, r7, #16
 8001bb4:	0409      	lsls	r1, r1, #16
 8001bb6:	19c9      	adds	r1, r1, r7
 8001bb8:	4488      	add	r8, r1
 8001bba:	4645      	mov	r5, r8
 8001bbc:	9503      	str	r5, [sp, #12]
 8001bbe:	4655      	mov	r5, sl
 8001bc0:	042e      	lsls	r6, r5, #16
 8001bc2:	0c36      	lsrs	r6, r6, #16
 8001bc4:	0c2f      	lsrs	r7, r5, #16
 8001bc6:	0035      	movs	r5, r6
 8001bc8:	4345      	muls	r5, r0
 8001bca:	4378      	muls	r0, r7
 8001bcc:	4681      	mov	r9, r0
 8001bce:	0038      	movs	r0, r7
 8001bd0:	46a8      	mov	r8, r5
 8001bd2:	0c2d      	lsrs	r5, r5, #16
 8001bd4:	46aa      	mov	sl, r5
 8001bd6:	9a00      	ldr	r2, [sp, #0]
 8001bd8:	4350      	muls	r0, r2
 8001bda:	4372      	muls	r2, r6
 8001bdc:	444a      	add	r2, r9
 8001bde:	4452      	add	r2, sl
 8001be0:	4591      	cmp	r9, r2
 8001be2:	d903      	bls.n	8001bec <__aeabi_dmul+0x400>
 8001be4:	2580      	movs	r5, #128	@ 0x80
 8001be6:	026d      	lsls	r5, r5, #9
 8001be8:	46a9      	mov	r9, r5
 8001bea:	4448      	add	r0, r9
 8001bec:	0c15      	lsrs	r5, r2, #16
 8001bee:	46a9      	mov	r9, r5
 8001bf0:	4645      	mov	r5, r8
 8001bf2:	042d      	lsls	r5, r5, #16
 8001bf4:	0c2d      	lsrs	r5, r5, #16
 8001bf6:	46a8      	mov	r8, r5
 8001bf8:	4665      	mov	r5, ip
 8001bfa:	437d      	muls	r5, r7
 8001bfc:	0412      	lsls	r2, r2, #16
 8001bfe:	4448      	add	r0, r9
 8001c00:	4490      	add	r8, r2
 8001c02:	46a9      	mov	r9, r5
 8001c04:	0032      	movs	r2, r6
 8001c06:	4665      	mov	r5, ip
 8001c08:	4362      	muls	r2, r4
 8001c0a:	436e      	muls	r6, r5
 8001c0c:	437c      	muls	r4, r7
 8001c0e:	0c17      	lsrs	r7, r2, #16
 8001c10:	1936      	adds	r6, r6, r4
 8001c12:	19bf      	adds	r7, r7, r6
 8001c14:	42bc      	cmp	r4, r7
 8001c16:	d903      	bls.n	8001c20 <__aeabi_dmul+0x434>
 8001c18:	2480      	movs	r4, #128	@ 0x80
 8001c1a:	0264      	lsls	r4, r4, #9
 8001c1c:	46a4      	mov	ip, r4
 8001c1e:	44e1      	add	r9, ip
 8001c20:	9c02      	ldr	r4, [sp, #8]
 8001c22:	9e03      	ldr	r6, [sp, #12]
 8001c24:	46a4      	mov	ip, r4
 8001c26:	9d05      	ldr	r5, [sp, #20]
 8001c28:	4466      	add	r6, ip
 8001c2a:	428e      	cmp	r6, r1
 8001c2c:	4189      	sbcs	r1, r1
 8001c2e:	46ac      	mov	ip, r5
 8001c30:	0412      	lsls	r2, r2, #16
 8001c32:	043c      	lsls	r4, r7, #16
 8001c34:	0c12      	lsrs	r2, r2, #16
 8001c36:	18a2      	adds	r2, r4, r2
 8001c38:	4462      	add	r2, ip
 8001c3a:	4249      	negs	r1, r1
 8001c3c:	1854      	adds	r4, r2, r1
 8001c3e:	4446      	add	r6, r8
 8001c40:	46a4      	mov	ip, r4
 8001c42:	4546      	cmp	r6, r8
 8001c44:	41a4      	sbcs	r4, r4
 8001c46:	4682      	mov	sl, r0
 8001c48:	4264      	negs	r4, r4
 8001c4a:	46a0      	mov	r8, r4
 8001c4c:	42aa      	cmp	r2, r5
 8001c4e:	4192      	sbcs	r2, r2
 8001c50:	458c      	cmp	ip, r1
 8001c52:	4189      	sbcs	r1, r1
 8001c54:	44e2      	add	sl, ip
 8001c56:	44d0      	add	r8, sl
 8001c58:	4249      	negs	r1, r1
 8001c5a:	4252      	negs	r2, r2
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	45a0      	cmp	r8, r4
 8001c60:	41a4      	sbcs	r4, r4
 8001c62:	4582      	cmp	sl, r0
 8001c64:	4189      	sbcs	r1, r1
 8001c66:	4264      	negs	r4, r4
 8001c68:	4249      	negs	r1, r1
 8001c6a:	430c      	orrs	r4, r1
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	0c3f      	lsrs	r7, r7, #16
 8001c70:	19d2      	adds	r2, r2, r7
 8001c72:	1912      	adds	r2, r2, r4
 8001c74:	0dcc      	lsrs	r4, r1, #23
 8001c76:	9904      	ldr	r1, [sp, #16]
 8001c78:	0270      	lsls	r0, r6, #9
 8001c7a:	4308      	orrs	r0, r1
 8001c7c:	1e41      	subs	r1, r0, #1
 8001c7e:	4188      	sbcs	r0, r1
 8001c80:	4641      	mov	r1, r8
 8001c82:	444a      	add	r2, r9
 8001c84:	0df6      	lsrs	r6, r6, #23
 8001c86:	0252      	lsls	r2, r2, #9
 8001c88:	4330      	orrs	r0, r6
 8001c8a:	0249      	lsls	r1, r1, #9
 8001c8c:	4314      	orrs	r4, r2
 8001c8e:	4308      	orrs	r0, r1
 8001c90:	01d2      	lsls	r2, r2, #7
 8001c92:	d535      	bpl.n	8001d00 <__aeabi_dmul+0x514>
 8001c94:	2201      	movs	r2, #1
 8001c96:	0843      	lsrs	r3, r0, #1
 8001c98:	4002      	ands	r2, r0
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	07e0      	lsls	r0, r4, #31
 8001c9e:	4318      	orrs	r0, r3
 8001ca0:	0864      	lsrs	r4, r4, #1
 8001ca2:	e634      	b.n	800190e <__aeabi_dmul+0x122>
 8001ca4:	9b00      	ldr	r3, [sp, #0]
 8001ca6:	46a2      	mov	sl, r4
 8001ca8:	469b      	mov	fp, r3
 8001caa:	4681      	mov	r9, r0
 8001cac:	2480      	movs	r4, #128	@ 0x80
 8001cae:	4653      	mov	r3, sl
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	431c      	orrs	r4, r3
 8001cb4:	0324      	lsls	r4, r4, #12
 8001cb6:	464a      	mov	r2, r9
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <__aeabi_dmul+0x588>)
 8001cba:	0b24      	lsrs	r4, r4, #12
 8001cbc:	e5ec      	b.n	8001898 <__aeabi_dmul+0xac>
 8001cbe:	f000 fca1 	bl	8002604 <__clzsi2>
 8001cc2:	2315      	movs	r3, #21
 8001cc4:	469c      	mov	ip, r3
 8001cc6:	4484      	add	ip, r0
 8001cc8:	0002      	movs	r2, r0
 8001cca:	4663      	mov	r3, ip
 8001ccc:	3220      	adds	r2, #32
 8001cce:	2b1c      	cmp	r3, #28
 8001cd0:	dc00      	bgt.n	8001cd4 <__aeabi_dmul+0x4e8>
 8001cd2:	e684      	b.n	80019de <__aeabi_dmul+0x1f2>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	0023      	movs	r3, r4
 8001cda:	3808      	subs	r0, #8
 8001cdc:	4083      	lsls	r3, r0
 8001cde:	469a      	mov	sl, r3
 8001ce0:	e68e      	b.n	8001a00 <__aeabi_dmul+0x214>
 8001ce2:	f000 fc8f 	bl	8002604 <__clzsi2>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	0003      	movs	r3, r0
 8001cea:	3215      	adds	r2, #21
 8001cec:	3320      	adds	r3, #32
 8001cee:	2a1c      	cmp	r2, #28
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_dmul+0x508>
 8001cf2:	e64e      	b.n	8001992 <__aeabi_dmul+0x1a6>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	0034      	movs	r4, r6
 8001cf8:	3a08      	subs	r2, #8
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	4094      	lsls	r4, r2
 8001cfe:	e652      	b.n	80019a6 <__aeabi_dmul+0x1ba>
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	e604      	b.n	800190e <__aeabi_dmul+0x122>
 8001d04:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <__aeabi_dmul+0x58c>)
 8001d06:	0021      	movs	r1, r4
 8001d08:	469c      	mov	ip, r3
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	9d01      	ldr	r5, [sp, #4]
 8001d0e:	40d3      	lsrs	r3, r2
 8001d10:	4465      	add	r5, ip
 8001d12:	40a9      	lsls	r1, r5
 8001d14:	4319      	orrs	r1, r3
 8001d16:	0003      	movs	r3, r0
 8001d18:	40ab      	lsls	r3, r5
 8001d1a:	1e58      	subs	r0, r3, #1
 8001d1c:	4183      	sbcs	r3, r0
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	0008      	movs	r0, r1
 8001d22:	40d4      	lsrs	r4, r2
 8001d24:	074b      	lsls	r3, r1, #29
 8001d26:	d009      	beq.n	8001d3c <__aeabi_dmul+0x550>
 8001d28:	230f      	movs	r3, #15
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dmul+0x550>
 8001d30:	1d0b      	adds	r3, r1, #4
 8001d32:	428b      	cmp	r3, r1
 8001d34:	4180      	sbcs	r0, r0
 8001d36:	4240      	negs	r0, r0
 8001d38:	1824      	adds	r4, r4, r0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	0223      	lsls	r3, r4, #8
 8001d3e:	d400      	bmi.n	8001d42 <__aeabi_dmul+0x556>
 8001d40:	e6d6      	b.n	8001af0 <__aeabi_dmul+0x304>
 8001d42:	2301      	movs	r3, #1
 8001d44:	2400      	movs	r4, #0
 8001d46:	2200      	movs	r2, #0
 8001d48:	e5a6      	b.n	8001898 <__aeabi_dmul+0xac>
 8001d4a:	290f      	cmp	r1, #15
 8001d4c:	d1aa      	bne.n	8001ca4 <__aeabi_dmul+0x4b8>
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	4652      	mov	r2, sl
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	421a      	tst	r2, r3
 8001d56:	d0a9      	beq.n	8001cac <__aeabi_dmul+0x4c0>
 8001d58:	421c      	tst	r4, r3
 8001d5a:	d1a7      	bne.n	8001cac <__aeabi_dmul+0x4c0>
 8001d5c:	431c      	orrs	r4, r3
 8001d5e:	9b00      	ldr	r3, [sp, #0]
 8001d60:	0002      	movs	r2, r0
 8001d62:	469b      	mov	fp, r3
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <__aeabi_dmul+0x588>)
 8001d66:	e597      	b.n	8001898 <__aeabi_dmul+0xac>
 8001d68:	2400      	movs	r4, #0
 8001d6a:	e6c1      	b.n	8001af0 <__aeabi_dmul+0x304>
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4b01      	ldr	r3, [pc, #4]	@ (8001d74 <__aeabi_dmul+0x588>)
 8001d70:	0022      	movs	r2, r4
 8001d72:	e591      	b.n	8001898 <__aeabi_dmul+0xac>
 8001d74:	000007ff 	.word	0x000007ff
 8001d78:	0000041e 	.word	0x0000041e

08001d7c <__aeabi_dsub>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	464e      	mov	r6, r9
 8001d80:	4645      	mov	r5, r8
 8001d82:	46de      	mov	lr, fp
 8001d84:	4657      	mov	r7, sl
 8001d86:	b5e0      	push	{r5, r6, r7, lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	9000      	str	r0, [sp, #0]
 8001d8c:	9101      	str	r1, [sp, #4]
 8001d8e:	030c      	lsls	r4, r1, #12
 8001d90:	004f      	lsls	r7, r1, #1
 8001d92:	0fce      	lsrs	r6, r1, #31
 8001d94:	0a61      	lsrs	r1, r4, #9
 8001d96:	9c00      	ldr	r4, [sp, #0]
 8001d98:	46b0      	mov	r8, r6
 8001d9a:	0f64      	lsrs	r4, r4, #29
 8001d9c:	430c      	orrs	r4, r1
 8001d9e:	9900      	ldr	r1, [sp, #0]
 8001da0:	0d7f      	lsrs	r7, r7, #21
 8001da2:	00c8      	lsls	r0, r1, #3
 8001da4:	0011      	movs	r1, r2
 8001da6:	001a      	movs	r2, r3
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	469c      	mov	ip, r3
 8001dac:	9100      	str	r1, [sp, #0]
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	0051      	lsls	r1, r2, #1
 8001db2:	0d4b      	lsrs	r3, r1, #21
 8001db4:	4699      	mov	r9, r3
 8001db6:	9b01      	ldr	r3, [sp, #4]
 8001db8:	9d00      	ldr	r5, [sp, #0]
 8001dba:	0fd9      	lsrs	r1, r3, #31
 8001dbc:	4663      	mov	r3, ip
 8001dbe:	0f6a      	lsrs	r2, r5, #29
 8001dc0:	0a5b      	lsrs	r3, r3, #9
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	00ea      	lsls	r2, r5, #3
 8001dc6:	4694      	mov	ip, r2
 8001dc8:	4693      	mov	fp, r2
 8001dca:	4ac1      	ldr	r2, [pc, #772]	@ (80020d0 <__aeabi_dsub+0x354>)
 8001dcc:	9003      	str	r0, [sp, #12]
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	4591      	cmp	r9, r2
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x5a>
 8001dd4:	e0cd      	b.n	8001f72 <__aeabi_dsub+0x1f6>
 8001dd6:	2501      	movs	r5, #1
 8001dd8:	4069      	eors	r1, r5
 8001dda:	464d      	mov	r5, r9
 8001ddc:	1b7d      	subs	r5, r7, r5
 8001dde:	46aa      	mov	sl, r5
 8001de0:	428e      	cmp	r6, r1
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x6a>
 8001de4:	e080      	b.n	8001ee8 <__aeabi_dsub+0x16c>
 8001de6:	2d00      	cmp	r5, #0
 8001de8:	dc00      	bgt.n	8001dec <__aeabi_dsub+0x70>
 8001dea:	e335      	b.n	8002458 <__aeabi_dsub+0x6dc>
 8001dec:	4649      	mov	r1, r9
 8001dee:	2900      	cmp	r1, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0x78>
 8001df2:	e0df      	b.n	8001fb4 <__aeabi_dsub+0x238>
 8001df4:	4297      	cmp	r7, r2
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dsub+0x7e>
 8001df8:	e194      	b.n	8002124 <__aeabi_dsub+0x3a8>
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	2501      	movs	r5, #1
 8001dfe:	2a38      	cmp	r2, #56	@ 0x38
 8001e00:	dc19      	bgt.n	8001e36 <__aeabi_dsub+0xba>
 8001e02:	2280      	movs	r2, #128	@ 0x80
 8001e04:	9b02      	ldr	r3, [sp, #8]
 8001e06:	0412      	lsls	r2, r2, #16
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	4652      	mov	r2, sl
 8001e0e:	2a1f      	cmp	r2, #31
 8001e10:	dd00      	ble.n	8001e14 <__aeabi_dsub+0x98>
 8001e12:	e1e3      	b.n	80021dc <__aeabi_dsub+0x460>
 8001e14:	4653      	mov	r3, sl
 8001e16:	2220      	movs	r2, #32
 8001e18:	4661      	mov	r1, ip
 8001e1a:	9d02      	ldr	r5, [sp, #8]
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	4095      	lsls	r5, r2
 8001e20:	40d9      	lsrs	r1, r3
 8001e22:	430d      	orrs	r5, r1
 8001e24:	4661      	mov	r1, ip
 8001e26:	4091      	lsls	r1, r2
 8001e28:	000a      	movs	r2, r1
 8001e2a:	1e51      	subs	r1, r2, #1
 8001e2c:	418a      	sbcs	r2, r1
 8001e2e:	4315      	orrs	r5, r2
 8001e30:	9a02      	ldr	r2, [sp, #8]
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	1aa4      	subs	r4, r4, r2
 8001e36:	1b45      	subs	r5, r0, r5
 8001e38:	42a8      	cmp	r0, r5
 8001e3a:	4180      	sbcs	r0, r0
 8001e3c:	4240      	negs	r0, r0
 8001e3e:	1a24      	subs	r4, r4, r0
 8001e40:	0223      	lsls	r3, r4, #8
 8001e42:	d400      	bmi.n	8001e46 <__aeabi_dsub+0xca>
 8001e44:	e13d      	b.n	80020c2 <__aeabi_dsub+0x346>
 8001e46:	0264      	lsls	r4, r4, #9
 8001e48:	0a64      	lsrs	r4, r4, #9
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d100      	bne.n	8001e50 <__aeabi_dsub+0xd4>
 8001e4e:	e147      	b.n	80020e0 <__aeabi_dsub+0x364>
 8001e50:	0020      	movs	r0, r4
 8001e52:	f000 fbd7 	bl	8002604 <__clzsi2>
 8001e56:	0003      	movs	r3, r0
 8001e58:	3b08      	subs	r3, #8
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	0028      	movs	r0, r5
 8001e5e:	1aca      	subs	r2, r1, r3
 8001e60:	40d0      	lsrs	r0, r2
 8001e62:	409c      	lsls	r4, r3
 8001e64:	0002      	movs	r2, r0
 8001e66:	409d      	lsls	r5, r3
 8001e68:	4322      	orrs	r2, r4
 8001e6a:	429f      	cmp	r7, r3
 8001e6c:	dd00      	ble.n	8001e70 <__aeabi_dsub+0xf4>
 8001e6e:	e177      	b.n	8002160 <__aeabi_dsub+0x3e4>
 8001e70:	1bd8      	subs	r0, r3, r7
 8001e72:	3001      	adds	r0, #1
 8001e74:	1a09      	subs	r1, r1, r0
 8001e76:	002c      	movs	r4, r5
 8001e78:	408d      	lsls	r5, r1
 8001e7a:	40c4      	lsrs	r4, r0
 8001e7c:	1e6b      	subs	r3, r5, #1
 8001e7e:	419d      	sbcs	r5, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	40c2      	lsrs	r2, r0
 8001e84:	408b      	lsls	r3, r1
 8001e86:	4325      	orrs	r5, r4
 8001e88:	2700      	movs	r7, #0
 8001e8a:	0014      	movs	r4, r2
 8001e8c:	431d      	orrs	r5, r3
 8001e8e:	076b      	lsls	r3, r5, #29
 8001e90:	d009      	beq.n	8001ea6 <__aeabi_dsub+0x12a>
 8001e92:	230f      	movs	r3, #15
 8001e94:	402b      	ands	r3, r5
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d005      	beq.n	8001ea6 <__aeabi_dsub+0x12a>
 8001e9a:	1d2b      	adds	r3, r5, #4
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	41ad      	sbcs	r5, r5
 8001ea0:	426d      	negs	r5, r5
 8001ea2:	1964      	adds	r4, r4, r5
 8001ea4:	001d      	movs	r5, r3
 8001ea6:	0223      	lsls	r3, r4, #8
 8001ea8:	d400      	bmi.n	8001eac <__aeabi_dsub+0x130>
 8001eaa:	e140      	b.n	800212e <__aeabi_dsub+0x3b2>
 8001eac:	4a88      	ldr	r2, [pc, #544]	@ (80020d0 <__aeabi_dsub+0x354>)
 8001eae:	3701      	adds	r7, #1
 8001eb0:	4297      	cmp	r7, r2
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x13a>
 8001eb4:	e101      	b.n	80020ba <__aeabi_dsub+0x33e>
 8001eb6:	2601      	movs	r6, #1
 8001eb8:	4643      	mov	r3, r8
 8001eba:	4986      	ldr	r1, [pc, #536]	@ (80020d4 <__aeabi_dsub+0x358>)
 8001ebc:	08ed      	lsrs	r5, r5, #3
 8001ebe:	4021      	ands	r1, r4
 8001ec0:	074a      	lsls	r2, r1, #29
 8001ec2:	432a      	orrs	r2, r5
 8001ec4:	057c      	lsls	r4, r7, #21
 8001ec6:	024d      	lsls	r5, r1, #9
 8001ec8:	0b2d      	lsrs	r5, r5, #12
 8001eca:	0d64      	lsrs	r4, r4, #21
 8001ecc:	401e      	ands	r6, r3
 8001ece:	0524      	lsls	r4, r4, #20
 8001ed0:	432c      	orrs	r4, r5
 8001ed2:	07f6      	lsls	r6, r6, #31
 8001ed4:	4334      	orrs	r4, r6
 8001ed6:	0010      	movs	r0, r2
 8001ed8:	0021      	movs	r1, r4
 8001eda:	b005      	add	sp, #20
 8001edc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ede:	46bb      	mov	fp, r7
 8001ee0:	46b2      	mov	sl, r6
 8001ee2:	46a9      	mov	r9, r5
 8001ee4:	46a0      	mov	r8, r4
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee8:	2d00      	cmp	r5, #0
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_dsub+0x172>
 8001eec:	e2d0      	b.n	8002490 <__aeabi_dsub+0x714>
 8001eee:	4649      	mov	r1, r9
 8001ef0:	2900      	cmp	r1, #0
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_dsub+0x17a>
 8001ef4:	e0d4      	b.n	80020a0 <__aeabi_dsub+0x324>
 8001ef6:	4661      	mov	r1, ip
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	4319      	orrs	r1, r3
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x184>
 8001efe:	e12b      	b.n	8002158 <__aeabi_dsub+0x3dc>
 8001f00:	1e69      	subs	r1, r5, #1
 8001f02:	2d01      	cmp	r5, #1
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x18c>
 8001f06:	e1d9      	b.n	80022bc <__aeabi_dsub+0x540>
 8001f08:	4295      	cmp	r5, r2
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x192>
 8001f0c:	e10a      	b.n	8002124 <__aeabi_dsub+0x3a8>
 8001f0e:	2501      	movs	r5, #1
 8001f10:	2938      	cmp	r1, #56	@ 0x38
 8001f12:	dc17      	bgt.n	8001f44 <__aeabi_dsub+0x1c8>
 8001f14:	468a      	mov	sl, r1
 8001f16:	4653      	mov	r3, sl
 8001f18:	2b1f      	cmp	r3, #31
 8001f1a:	dd00      	ble.n	8001f1e <__aeabi_dsub+0x1a2>
 8001f1c:	e1e7      	b.n	80022ee <__aeabi_dsub+0x572>
 8001f1e:	2220      	movs	r2, #32
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	9b02      	ldr	r3, [sp, #8]
 8001f24:	4661      	mov	r1, ip
 8001f26:	4093      	lsls	r3, r2
 8001f28:	001d      	movs	r5, r3
 8001f2a:	4653      	mov	r3, sl
 8001f2c:	40d9      	lsrs	r1, r3
 8001f2e:	4663      	mov	r3, ip
 8001f30:	4093      	lsls	r3, r2
 8001f32:	001a      	movs	r2, r3
 8001f34:	430d      	orrs	r5, r1
 8001f36:	1e51      	subs	r1, r2, #1
 8001f38:	418a      	sbcs	r2, r1
 8001f3a:	4653      	mov	r3, sl
 8001f3c:	4315      	orrs	r5, r2
 8001f3e:	9a02      	ldr	r2, [sp, #8]
 8001f40:	40da      	lsrs	r2, r3
 8001f42:	18a4      	adds	r4, r4, r2
 8001f44:	182d      	adds	r5, r5, r0
 8001f46:	4285      	cmp	r5, r0
 8001f48:	4180      	sbcs	r0, r0
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	1824      	adds	r4, r4, r0
 8001f4e:	0223      	lsls	r3, r4, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x1d8>
 8001f52:	e0b6      	b.n	80020c2 <__aeabi_dsub+0x346>
 8001f54:	4b5e      	ldr	r3, [pc, #376]	@ (80020d0 <__aeabi_dsub+0x354>)
 8001f56:	3701      	adds	r7, #1
 8001f58:	429f      	cmp	r7, r3
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x1e2>
 8001f5c:	e0ad      	b.n	80020ba <__aeabi_dsub+0x33e>
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4b5c      	ldr	r3, [pc, #368]	@ (80020d4 <__aeabi_dsub+0x358>)
 8001f62:	086a      	lsrs	r2, r5, #1
 8001f64:	401c      	ands	r4, r3
 8001f66:	4029      	ands	r1, r5
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	07e5      	lsls	r5, r4, #31
 8001f6c:	4315      	orrs	r5, r2
 8001f6e:	0864      	lsrs	r4, r4, #1
 8001f70:	e78d      	b.n	8001e8e <__aeabi_dsub+0x112>
 8001f72:	4a59      	ldr	r2, [pc, #356]	@ (80020d8 <__aeabi_dsub+0x35c>)
 8001f74:	9b02      	ldr	r3, [sp, #8]
 8001f76:	4692      	mov	sl, r2
 8001f78:	4662      	mov	r2, ip
 8001f7a:	44ba      	add	sl, r7
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	d02c      	beq.n	8001fda <__aeabi_dsub+0x25e>
 8001f80:	428e      	cmp	r6, r1
 8001f82:	d02e      	beq.n	8001fe2 <__aeabi_dsub+0x266>
 8001f84:	4652      	mov	r2, sl
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d060      	beq.n	800204c <__aeabi_dsub+0x2d0>
 8001f8a:	2f00      	cmp	r7, #0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x214>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x3cc>
 8001f90:	4663      	mov	r3, ip
 8001f92:	000e      	movs	r6, r1
 8001f94:	9c02      	ldr	r4, [sp, #8]
 8001f96:	08d8      	lsrs	r0, r3, #3
 8001f98:	0762      	lsls	r2, r4, #29
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	08e4      	lsrs	r4, r4, #3
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	4323      	orrs	r3, r4
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x22a>
 8001fa4:	e254      	b.n	8002450 <__aeabi_dsub+0x6d4>
 8001fa6:	2580      	movs	r5, #128	@ 0x80
 8001fa8:	032d      	lsls	r5, r5, #12
 8001faa:	4325      	orrs	r5, r4
 8001fac:	032d      	lsls	r5, r5, #12
 8001fae:	4c48      	ldr	r4, [pc, #288]	@ (80020d0 <__aeabi_dsub+0x354>)
 8001fb0:	0b2d      	lsrs	r5, r5, #12
 8001fb2:	e78c      	b.n	8001ece <__aeabi_dsub+0x152>
 8001fb4:	4661      	mov	r1, ip
 8001fb6:	9b02      	ldr	r3, [sp, #8]
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	d100      	bne.n	8001fbe <__aeabi_dsub+0x242>
 8001fbc:	e0cc      	b.n	8002158 <__aeabi_dsub+0x3dc>
 8001fbe:	0029      	movs	r1, r5
 8001fc0:	3901      	subs	r1, #1
 8001fc2:	2d01      	cmp	r5, #1
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x24c>
 8001fc6:	e188      	b.n	80022da <__aeabi_dsub+0x55e>
 8001fc8:	4295      	cmp	r5, r2
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x252>
 8001fcc:	e0aa      	b.n	8002124 <__aeabi_dsub+0x3a8>
 8001fce:	2501      	movs	r5, #1
 8001fd0:	2938      	cmp	r1, #56	@ 0x38
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dsub+0x25a>
 8001fd4:	e72f      	b.n	8001e36 <__aeabi_dsub+0xba>
 8001fd6:	468a      	mov	sl, r1
 8001fd8:	e718      	b.n	8001e0c <__aeabi_dsub+0x90>
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4051      	eors	r1, r2
 8001fde:	428e      	cmp	r6, r1
 8001fe0:	d1d0      	bne.n	8001f84 <__aeabi_dsub+0x208>
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x26e>
 8001fe8:	e0be      	b.n	8002168 <__aeabi_dsub+0x3ec>
 8001fea:	2f00      	cmp	r7, #0
 8001fec:	d000      	beq.n	8001ff0 <__aeabi_dsub+0x274>
 8001fee:	e138      	b.n	8002262 <__aeabi_dsub+0x4e6>
 8001ff0:	46ca      	mov	sl, r9
 8001ff2:	0022      	movs	r2, r4
 8001ff4:	4302      	orrs	r2, r0
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x27e>
 8001ff8:	e1e2      	b.n	80023c0 <__aeabi_dsub+0x644>
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	1e59      	subs	r1, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x288>
 8002002:	e20d      	b.n	8002420 <__aeabi_dsub+0x6a4>
 8002004:	4a32      	ldr	r2, [pc, #200]	@ (80020d0 <__aeabi_dsub+0x354>)
 8002006:	4592      	cmp	sl, r2
 8002008:	d100      	bne.n	800200c <__aeabi_dsub+0x290>
 800200a:	e1d2      	b.n	80023b2 <__aeabi_dsub+0x636>
 800200c:	2701      	movs	r7, #1
 800200e:	2938      	cmp	r1, #56	@ 0x38
 8002010:	dc13      	bgt.n	800203a <__aeabi_dsub+0x2be>
 8002012:	291f      	cmp	r1, #31
 8002014:	dd00      	ble.n	8002018 <__aeabi_dsub+0x29c>
 8002016:	e1ee      	b.n	80023f6 <__aeabi_dsub+0x67a>
 8002018:	2220      	movs	r2, #32
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	1a52      	subs	r2, r2, r1
 800201e:	0025      	movs	r5, r4
 8002020:	0007      	movs	r7, r0
 8002022:	469a      	mov	sl, r3
 8002024:	40cc      	lsrs	r4, r1
 8002026:	4090      	lsls	r0, r2
 8002028:	4095      	lsls	r5, r2
 800202a:	40cf      	lsrs	r7, r1
 800202c:	44a2      	add	sl, r4
 800202e:	1e42      	subs	r2, r0, #1
 8002030:	4190      	sbcs	r0, r2
 8002032:	4653      	mov	r3, sl
 8002034:	432f      	orrs	r7, r5
 8002036:	4307      	orrs	r7, r0
 8002038:	9302      	str	r3, [sp, #8]
 800203a:	003d      	movs	r5, r7
 800203c:	4465      	add	r5, ip
 800203e:	4565      	cmp	r5, ip
 8002040:	4192      	sbcs	r2, r2
 8002042:	9b02      	ldr	r3, [sp, #8]
 8002044:	4252      	negs	r2, r2
 8002046:	464f      	mov	r7, r9
 8002048:	18d4      	adds	r4, r2, r3
 800204a:	e780      	b.n	8001f4e <__aeabi_dsub+0x1d2>
 800204c:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <__aeabi_dsub+0x360>)
 800204e:	1c7d      	adds	r5, r7, #1
 8002050:	4215      	tst	r5, r2
 8002052:	d000      	beq.n	8002056 <__aeabi_dsub+0x2da>
 8002054:	e0aa      	b.n	80021ac <__aeabi_dsub+0x430>
 8002056:	4662      	mov	r2, ip
 8002058:	0025      	movs	r5, r4
 800205a:	9b02      	ldr	r3, [sp, #8]
 800205c:	4305      	orrs	r5, r0
 800205e:	431a      	orrs	r2, r3
 8002060:	2f00      	cmp	r7, #0
 8002062:	d000      	beq.n	8002066 <__aeabi_dsub+0x2ea>
 8002064:	e0f5      	b.n	8002252 <__aeabi_dsub+0x4d6>
 8002066:	2d00      	cmp	r5, #0
 8002068:	d100      	bne.n	800206c <__aeabi_dsub+0x2f0>
 800206a:	e16b      	b.n	8002344 <__aeabi_dsub+0x5c8>
 800206c:	2a00      	cmp	r2, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x2f6>
 8002070:	e152      	b.n	8002318 <__aeabi_dsub+0x59c>
 8002072:	4663      	mov	r3, ip
 8002074:	1ac5      	subs	r5, r0, r3
 8002076:	9b02      	ldr	r3, [sp, #8]
 8002078:	1ae2      	subs	r2, r4, r3
 800207a:	42a8      	cmp	r0, r5
 800207c:	419b      	sbcs	r3, r3
 800207e:	425b      	negs	r3, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	021a      	lsls	r2, r3, #8
 8002084:	d400      	bmi.n	8002088 <__aeabi_dsub+0x30c>
 8002086:	e1d5      	b.n	8002434 <__aeabi_dsub+0x6b8>
 8002088:	4663      	mov	r3, ip
 800208a:	1a1d      	subs	r5, r3, r0
 800208c:	45ac      	cmp	ip, r5
 800208e:	4192      	sbcs	r2, r2
 8002090:	2601      	movs	r6, #1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	4252      	negs	r2, r2
 8002096:	1b1c      	subs	r4, r3, r4
 8002098:	4688      	mov	r8, r1
 800209a:	1aa4      	subs	r4, r4, r2
 800209c:	400e      	ands	r6, r1
 800209e:	e6f6      	b.n	8001e8e <__aeabi_dsub+0x112>
 80020a0:	4297      	cmp	r7, r2
 80020a2:	d03f      	beq.n	8002124 <__aeabi_dsub+0x3a8>
 80020a4:	4652      	mov	r2, sl
 80020a6:	2501      	movs	r5, #1
 80020a8:	2a38      	cmp	r2, #56	@ 0x38
 80020aa:	dd00      	ble.n	80020ae <__aeabi_dsub+0x332>
 80020ac:	e74a      	b.n	8001f44 <__aeabi_dsub+0x1c8>
 80020ae:	2280      	movs	r2, #128	@ 0x80
 80020b0:	9b02      	ldr	r3, [sp, #8]
 80020b2:	0412      	lsls	r2, r2, #16
 80020b4:	4313      	orrs	r3, r2
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	e72d      	b.n	8001f16 <__aeabi_dsub+0x19a>
 80020ba:	003c      	movs	r4, r7
 80020bc:	2500      	movs	r5, #0
 80020be:	2200      	movs	r2, #0
 80020c0:	e705      	b.n	8001ece <__aeabi_dsub+0x152>
 80020c2:	2307      	movs	r3, #7
 80020c4:	402b      	ands	r3, r5
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x350>
 80020ca:	e6e2      	b.n	8001e92 <__aeabi_dsub+0x116>
 80020cc:	e06b      	b.n	80021a6 <__aeabi_dsub+0x42a>
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	000007ff 	.word	0x000007ff
 80020d4:	ff7fffff 	.word	0xff7fffff
 80020d8:	fffff801 	.word	0xfffff801
 80020dc:	000007fe 	.word	0x000007fe
 80020e0:	0028      	movs	r0, r5
 80020e2:	f000 fa8f 	bl	8002604 <__clzsi2>
 80020e6:	0003      	movs	r3, r0
 80020e8:	3318      	adds	r3, #24
 80020ea:	2b1f      	cmp	r3, #31
 80020ec:	dc00      	bgt.n	80020f0 <__aeabi_dsub+0x374>
 80020ee:	e6b4      	b.n	8001e5a <__aeabi_dsub+0xde>
 80020f0:	002a      	movs	r2, r5
 80020f2:	3808      	subs	r0, #8
 80020f4:	4082      	lsls	r2, r0
 80020f6:	429f      	cmp	r7, r3
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dsub+0x380>
 80020fa:	e0b9      	b.n	8002270 <__aeabi_dsub+0x4f4>
 80020fc:	1bdb      	subs	r3, r3, r7
 80020fe:	1c58      	adds	r0, r3, #1
 8002100:	281f      	cmp	r0, #31
 8002102:	dc00      	bgt.n	8002106 <__aeabi_dsub+0x38a>
 8002104:	e1a0      	b.n	8002448 <__aeabi_dsub+0x6cc>
 8002106:	0015      	movs	r5, r2
 8002108:	3b1f      	subs	r3, #31
 800210a:	40dd      	lsrs	r5, r3
 800210c:	2820      	cmp	r0, #32
 800210e:	d005      	beq.n	800211c <__aeabi_dsub+0x3a0>
 8002110:	2340      	movs	r3, #64	@ 0x40
 8002112:	1a1b      	subs	r3, r3, r0
 8002114:	409a      	lsls	r2, r3
 8002116:	1e53      	subs	r3, r2, #1
 8002118:	419a      	sbcs	r2, r3
 800211a:	4315      	orrs	r5, r2
 800211c:	2307      	movs	r3, #7
 800211e:	2700      	movs	r7, #0
 8002120:	402b      	ands	r3, r5
 8002122:	e7d0      	b.n	80020c6 <__aeabi_dsub+0x34a>
 8002124:	08c0      	lsrs	r0, r0, #3
 8002126:	0762      	lsls	r2, r4, #29
 8002128:	4302      	orrs	r2, r0
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	e737      	b.n	8001f9e <__aeabi_dsub+0x222>
 800212e:	08ea      	lsrs	r2, r5, #3
 8002130:	0763      	lsls	r3, r4, #29
 8002132:	431a      	orrs	r2, r3
 8002134:	4bd3      	ldr	r3, [pc, #844]	@ (8002484 <__aeabi_dsub+0x708>)
 8002136:	08e4      	lsrs	r4, r4, #3
 8002138:	429f      	cmp	r7, r3
 800213a:	d100      	bne.n	800213e <__aeabi_dsub+0x3c2>
 800213c:	e72f      	b.n	8001f9e <__aeabi_dsub+0x222>
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	0b25      	lsrs	r5, r4, #12
 8002142:	057c      	lsls	r4, r7, #21
 8002144:	0d64      	lsrs	r4, r4, #21
 8002146:	e6c2      	b.n	8001ece <__aeabi_dsub+0x152>
 8002148:	46ca      	mov	sl, r9
 800214a:	0022      	movs	r2, r4
 800214c:	4302      	orrs	r2, r0
 800214e:	d158      	bne.n	8002202 <__aeabi_dsub+0x486>
 8002150:	4663      	mov	r3, ip
 8002152:	000e      	movs	r6, r1
 8002154:	9c02      	ldr	r4, [sp, #8]
 8002156:	9303      	str	r3, [sp, #12]
 8002158:	9b03      	ldr	r3, [sp, #12]
 800215a:	4657      	mov	r7, sl
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	e7e7      	b.n	8002130 <__aeabi_dsub+0x3b4>
 8002160:	4cc9      	ldr	r4, [pc, #804]	@ (8002488 <__aeabi_dsub+0x70c>)
 8002162:	1aff      	subs	r7, r7, r3
 8002164:	4014      	ands	r4, r2
 8002166:	e692      	b.n	8001e8e <__aeabi_dsub+0x112>
 8002168:	4dc8      	ldr	r5, [pc, #800]	@ (800248c <__aeabi_dsub+0x710>)
 800216a:	1c7a      	adds	r2, r7, #1
 800216c:	422a      	tst	r2, r5
 800216e:	d000      	beq.n	8002172 <__aeabi_dsub+0x3f6>
 8002170:	e084      	b.n	800227c <__aeabi_dsub+0x500>
 8002172:	0022      	movs	r2, r4
 8002174:	4302      	orrs	r2, r0
 8002176:	2f00      	cmp	r7, #0
 8002178:	d000      	beq.n	800217c <__aeabi_dsub+0x400>
 800217a:	e0ef      	b.n	800235c <__aeabi_dsub+0x5e0>
 800217c:	2a00      	cmp	r2, #0
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x406>
 8002180:	e0e5      	b.n	800234e <__aeabi_dsub+0x5d2>
 8002182:	4662      	mov	r2, ip
 8002184:	9902      	ldr	r1, [sp, #8]
 8002186:	430a      	orrs	r2, r1
 8002188:	d100      	bne.n	800218c <__aeabi_dsub+0x410>
 800218a:	e0c5      	b.n	8002318 <__aeabi_dsub+0x59c>
 800218c:	4663      	mov	r3, ip
 800218e:	18c5      	adds	r5, r0, r3
 8002190:	468c      	mov	ip, r1
 8002192:	4285      	cmp	r5, r0
 8002194:	4180      	sbcs	r0, r0
 8002196:	4464      	add	r4, ip
 8002198:	4240      	negs	r0, r0
 800219a:	1824      	adds	r4, r4, r0
 800219c:	0223      	lsls	r3, r4, #8
 800219e:	d502      	bpl.n	80021a6 <__aeabi_dsub+0x42a>
 80021a0:	4bb9      	ldr	r3, [pc, #740]	@ (8002488 <__aeabi_dsub+0x70c>)
 80021a2:	3701      	adds	r7, #1
 80021a4:	401c      	ands	r4, r3
 80021a6:	46ba      	mov	sl, r7
 80021a8:	9503      	str	r5, [sp, #12]
 80021aa:	e7d5      	b.n	8002158 <__aeabi_dsub+0x3dc>
 80021ac:	4662      	mov	r2, ip
 80021ae:	1a85      	subs	r5, r0, r2
 80021b0:	42a8      	cmp	r0, r5
 80021b2:	4192      	sbcs	r2, r2
 80021b4:	4252      	negs	r2, r2
 80021b6:	4691      	mov	r9, r2
 80021b8:	9b02      	ldr	r3, [sp, #8]
 80021ba:	1ae3      	subs	r3, r4, r3
 80021bc:	001a      	movs	r2, r3
 80021be:	464b      	mov	r3, r9
 80021c0:	1ad2      	subs	r2, r2, r3
 80021c2:	0013      	movs	r3, r2
 80021c4:	4691      	mov	r9, r2
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	d46c      	bmi.n	80022a4 <__aeabi_dsub+0x528>
 80021ca:	464a      	mov	r2, r9
 80021cc:	464c      	mov	r4, r9
 80021ce:	432a      	orrs	r2, r5
 80021d0:	d000      	beq.n	80021d4 <__aeabi_dsub+0x458>
 80021d2:	e63a      	b.n	8001e4a <__aeabi_dsub+0xce>
 80021d4:	2600      	movs	r6, #0
 80021d6:	2400      	movs	r4, #0
 80021d8:	2500      	movs	r5, #0
 80021da:	e678      	b.n	8001ece <__aeabi_dsub+0x152>
 80021dc:	9902      	ldr	r1, [sp, #8]
 80021de:	4653      	mov	r3, sl
 80021e0:	000d      	movs	r5, r1
 80021e2:	3a20      	subs	r2, #32
 80021e4:	40d5      	lsrs	r5, r2
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d006      	beq.n	80021f8 <__aeabi_dsub+0x47c>
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	000b      	movs	r3, r1
 80021f0:	4093      	lsls	r3, r2
 80021f2:	4662      	mov	r2, ip
 80021f4:	431a      	orrs	r2, r3
 80021f6:	4693      	mov	fp, r2
 80021f8:	465b      	mov	r3, fp
 80021fa:	1e5a      	subs	r2, r3, #1
 80021fc:	4193      	sbcs	r3, r2
 80021fe:	431d      	orrs	r5, r3
 8002200:	e619      	b.n	8001e36 <__aeabi_dsub+0xba>
 8002202:	4653      	mov	r3, sl
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d100      	bne.n	800220c <__aeabi_dsub+0x490>
 800220a:	e0c6      	b.n	800239a <__aeabi_dsub+0x61e>
 800220c:	4e9d      	ldr	r6, [pc, #628]	@ (8002484 <__aeabi_dsub+0x708>)
 800220e:	45b2      	cmp	sl, r6
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x498>
 8002212:	e6bd      	b.n	8001f90 <__aeabi_dsub+0x214>
 8002214:	4688      	mov	r8, r1
 8002216:	000e      	movs	r6, r1
 8002218:	2501      	movs	r5, #1
 800221a:	2a38      	cmp	r2, #56	@ 0x38
 800221c:	dc10      	bgt.n	8002240 <__aeabi_dsub+0x4c4>
 800221e:	2a1f      	cmp	r2, #31
 8002220:	dc7f      	bgt.n	8002322 <__aeabi_dsub+0x5a6>
 8002222:	2120      	movs	r1, #32
 8002224:	0025      	movs	r5, r4
 8002226:	1a89      	subs	r1, r1, r2
 8002228:	0007      	movs	r7, r0
 800222a:	4088      	lsls	r0, r1
 800222c:	408d      	lsls	r5, r1
 800222e:	40d7      	lsrs	r7, r2
 8002230:	40d4      	lsrs	r4, r2
 8002232:	1e41      	subs	r1, r0, #1
 8002234:	4188      	sbcs	r0, r1
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	433d      	orrs	r5, r7
 800223a:	1b1b      	subs	r3, r3, r4
 800223c:	4305      	orrs	r5, r0
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	4662      	mov	r2, ip
 8002242:	1b55      	subs	r5, r2, r5
 8002244:	45ac      	cmp	ip, r5
 8002246:	4192      	sbcs	r2, r2
 8002248:	9b02      	ldr	r3, [sp, #8]
 800224a:	4252      	negs	r2, r2
 800224c:	464f      	mov	r7, r9
 800224e:	1a9c      	subs	r4, r3, r2
 8002250:	e5f6      	b.n	8001e40 <__aeabi_dsub+0xc4>
 8002252:	2d00      	cmp	r5, #0
 8002254:	d000      	beq.n	8002258 <__aeabi_dsub+0x4dc>
 8002256:	e0b7      	b.n	80023c8 <__aeabi_dsub+0x64c>
 8002258:	2a00      	cmp	r2, #0
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x4e2>
 800225c:	e0f0      	b.n	8002440 <__aeabi_dsub+0x6c4>
 800225e:	2601      	movs	r6, #1
 8002260:	400e      	ands	r6, r1
 8002262:	4663      	mov	r3, ip
 8002264:	9802      	ldr	r0, [sp, #8]
 8002266:	08d9      	lsrs	r1, r3, #3
 8002268:	0742      	lsls	r2, r0, #29
 800226a:	430a      	orrs	r2, r1
 800226c:	08c4      	lsrs	r4, r0, #3
 800226e:	e696      	b.n	8001f9e <__aeabi_dsub+0x222>
 8002270:	4c85      	ldr	r4, [pc, #532]	@ (8002488 <__aeabi_dsub+0x70c>)
 8002272:	1aff      	subs	r7, r7, r3
 8002274:	4014      	ands	r4, r2
 8002276:	0762      	lsls	r2, r4, #29
 8002278:	08e4      	lsrs	r4, r4, #3
 800227a:	e760      	b.n	800213e <__aeabi_dsub+0x3c2>
 800227c:	4981      	ldr	r1, [pc, #516]	@ (8002484 <__aeabi_dsub+0x708>)
 800227e:	428a      	cmp	r2, r1
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x508>
 8002282:	e0c9      	b.n	8002418 <__aeabi_dsub+0x69c>
 8002284:	4663      	mov	r3, ip
 8002286:	18c1      	adds	r1, r0, r3
 8002288:	4281      	cmp	r1, r0
 800228a:	4180      	sbcs	r0, r0
 800228c:	9b02      	ldr	r3, [sp, #8]
 800228e:	4240      	negs	r0, r0
 8002290:	18e3      	adds	r3, r4, r3
 8002292:	181b      	adds	r3, r3, r0
 8002294:	07dd      	lsls	r5, r3, #31
 8002296:	085c      	lsrs	r4, r3, #1
 8002298:	2307      	movs	r3, #7
 800229a:	0849      	lsrs	r1, r1, #1
 800229c:	430d      	orrs	r5, r1
 800229e:	0017      	movs	r7, r2
 80022a0:	402b      	ands	r3, r5
 80022a2:	e710      	b.n	80020c6 <__aeabi_dsub+0x34a>
 80022a4:	4663      	mov	r3, ip
 80022a6:	1a1d      	subs	r5, r3, r0
 80022a8:	45ac      	cmp	ip, r5
 80022aa:	4192      	sbcs	r2, r2
 80022ac:	2601      	movs	r6, #1
 80022ae:	9b02      	ldr	r3, [sp, #8]
 80022b0:	4252      	negs	r2, r2
 80022b2:	1b1c      	subs	r4, r3, r4
 80022b4:	4688      	mov	r8, r1
 80022b6:	1aa4      	subs	r4, r4, r2
 80022b8:	400e      	ands	r6, r1
 80022ba:	e5c6      	b.n	8001e4a <__aeabi_dsub+0xce>
 80022bc:	4663      	mov	r3, ip
 80022be:	18c5      	adds	r5, r0, r3
 80022c0:	9b02      	ldr	r3, [sp, #8]
 80022c2:	4285      	cmp	r5, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	469c      	mov	ip, r3
 80022c8:	4240      	negs	r0, r0
 80022ca:	4464      	add	r4, ip
 80022cc:	1824      	adds	r4, r4, r0
 80022ce:	2701      	movs	r7, #1
 80022d0:	0223      	lsls	r3, r4, #8
 80022d2:	d400      	bmi.n	80022d6 <__aeabi_dsub+0x55a>
 80022d4:	e6f5      	b.n	80020c2 <__aeabi_dsub+0x346>
 80022d6:	2702      	movs	r7, #2
 80022d8:	e641      	b.n	8001f5e <__aeabi_dsub+0x1e2>
 80022da:	4663      	mov	r3, ip
 80022dc:	1ac5      	subs	r5, r0, r3
 80022de:	42a8      	cmp	r0, r5
 80022e0:	4180      	sbcs	r0, r0
 80022e2:	9b02      	ldr	r3, [sp, #8]
 80022e4:	4240      	negs	r0, r0
 80022e6:	1ae4      	subs	r4, r4, r3
 80022e8:	2701      	movs	r7, #1
 80022ea:	1a24      	subs	r4, r4, r0
 80022ec:	e5a8      	b.n	8001e40 <__aeabi_dsub+0xc4>
 80022ee:	9d02      	ldr	r5, [sp, #8]
 80022f0:	4652      	mov	r2, sl
 80022f2:	002b      	movs	r3, r5
 80022f4:	3a20      	subs	r2, #32
 80022f6:	40d3      	lsrs	r3, r2
 80022f8:	0019      	movs	r1, r3
 80022fa:	4653      	mov	r3, sl
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d006      	beq.n	800230e <__aeabi_dsub+0x592>
 8002300:	2240      	movs	r2, #64	@ 0x40
 8002302:	1ad2      	subs	r2, r2, r3
 8002304:	002b      	movs	r3, r5
 8002306:	4093      	lsls	r3, r2
 8002308:	4662      	mov	r2, ip
 800230a:	431a      	orrs	r2, r3
 800230c:	4693      	mov	fp, r2
 800230e:	465d      	mov	r5, fp
 8002310:	1e6b      	subs	r3, r5, #1
 8002312:	419d      	sbcs	r5, r3
 8002314:	430d      	orrs	r5, r1
 8002316:	e615      	b.n	8001f44 <__aeabi_dsub+0x1c8>
 8002318:	0762      	lsls	r2, r4, #29
 800231a:	08c0      	lsrs	r0, r0, #3
 800231c:	4302      	orrs	r2, r0
 800231e:	08e4      	lsrs	r4, r4, #3
 8002320:	e70d      	b.n	800213e <__aeabi_dsub+0x3c2>
 8002322:	0011      	movs	r1, r2
 8002324:	0027      	movs	r7, r4
 8002326:	3920      	subs	r1, #32
 8002328:	40cf      	lsrs	r7, r1
 800232a:	2a20      	cmp	r2, #32
 800232c:	d005      	beq.n	800233a <__aeabi_dsub+0x5be>
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	1a8a      	subs	r2, r1, r2
 8002332:	4094      	lsls	r4, r2
 8002334:	0025      	movs	r5, r4
 8002336:	4305      	orrs	r5, r0
 8002338:	9503      	str	r5, [sp, #12]
 800233a:	9d03      	ldr	r5, [sp, #12]
 800233c:	1e6a      	subs	r2, r5, #1
 800233e:	4195      	sbcs	r5, r2
 8002340:	433d      	orrs	r5, r7
 8002342:	e77d      	b.n	8002240 <__aeabi_dsub+0x4c4>
 8002344:	2a00      	cmp	r2, #0
 8002346:	d100      	bne.n	800234a <__aeabi_dsub+0x5ce>
 8002348:	e744      	b.n	80021d4 <__aeabi_dsub+0x458>
 800234a:	2601      	movs	r6, #1
 800234c:	400e      	ands	r6, r1
 800234e:	4663      	mov	r3, ip
 8002350:	08d9      	lsrs	r1, r3, #3
 8002352:	9b02      	ldr	r3, [sp, #8]
 8002354:	075a      	lsls	r2, r3, #29
 8002356:	430a      	orrs	r2, r1
 8002358:	08dc      	lsrs	r4, r3, #3
 800235a:	e6f0      	b.n	800213e <__aeabi_dsub+0x3c2>
 800235c:	2a00      	cmp	r2, #0
 800235e:	d028      	beq.n	80023b2 <__aeabi_dsub+0x636>
 8002360:	4662      	mov	r2, ip
 8002362:	9f02      	ldr	r7, [sp, #8]
 8002364:	08c0      	lsrs	r0, r0, #3
 8002366:	433a      	orrs	r2, r7
 8002368:	d100      	bne.n	800236c <__aeabi_dsub+0x5f0>
 800236a:	e6dc      	b.n	8002126 <__aeabi_dsub+0x3aa>
 800236c:	0762      	lsls	r2, r4, #29
 800236e:	4310      	orrs	r0, r2
 8002370:	2280      	movs	r2, #128	@ 0x80
 8002372:	08e4      	lsrs	r4, r4, #3
 8002374:	0312      	lsls	r2, r2, #12
 8002376:	4214      	tst	r4, r2
 8002378:	d009      	beq.n	800238e <__aeabi_dsub+0x612>
 800237a:	08fd      	lsrs	r5, r7, #3
 800237c:	4215      	tst	r5, r2
 800237e:	d106      	bne.n	800238e <__aeabi_dsub+0x612>
 8002380:	4663      	mov	r3, ip
 8002382:	2601      	movs	r6, #1
 8002384:	002c      	movs	r4, r5
 8002386:	08d8      	lsrs	r0, r3, #3
 8002388:	077b      	lsls	r3, r7, #29
 800238a:	4318      	orrs	r0, r3
 800238c:	400e      	ands	r6, r1
 800238e:	0f42      	lsrs	r2, r0, #29
 8002390:	00c0      	lsls	r0, r0, #3
 8002392:	08c0      	lsrs	r0, r0, #3
 8002394:	0752      	lsls	r2, r2, #29
 8002396:	4302      	orrs	r2, r0
 8002398:	e601      	b.n	8001f9e <__aeabi_dsub+0x222>
 800239a:	4663      	mov	r3, ip
 800239c:	1a1d      	subs	r5, r3, r0
 800239e:	45ac      	cmp	ip, r5
 80023a0:	4192      	sbcs	r2, r2
 80023a2:	9b02      	ldr	r3, [sp, #8]
 80023a4:	4252      	negs	r2, r2
 80023a6:	1b1c      	subs	r4, r3, r4
 80023a8:	000e      	movs	r6, r1
 80023aa:	4688      	mov	r8, r1
 80023ac:	2701      	movs	r7, #1
 80023ae:	1aa4      	subs	r4, r4, r2
 80023b0:	e546      	b.n	8001e40 <__aeabi_dsub+0xc4>
 80023b2:	4663      	mov	r3, ip
 80023b4:	08d9      	lsrs	r1, r3, #3
 80023b6:	9b02      	ldr	r3, [sp, #8]
 80023b8:	075a      	lsls	r2, r3, #29
 80023ba:	430a      	orrs	r2, r1
 80023bc:	08dc      	lsrs	r4, r3, #3
 80023be:	e5ee      	b.n	8001f9e <__aeabi_dsub+0x222>
 80023c0:	4663      	mov	r3, ip
 80023c2:	9c02      	ldr	r4, [sp, #8]
 80023c4:	9303      	str	r3, [sp, #12]
 80023c6:	e6c7      	b.n	8002158 <__aeabi_dsub+0x3dc>
 80023c8:	08c0      	lsrs	r0, r0, #3
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x654>
 80023ce:	e6aa      	b.n	8002126 <__aeabi_dsub+0x3aa>
 80023d0:	0762      	lsls	r2, r4, #29
 80023d2:	4310      	orrs	r0, r2
 80023d4:	2280      	movs	r2, #128	@ 0x80
 80023d6:	08e4      	lsrs	r4, r4, #3
 80023d8:	0312      	lsls	r2, r2, #12
 80023da:	4214      	tst	r4, r2
 80023dc:	d0d7      	beq.n	800238e <__aeabi_dsub+0x612>
 80023de:	9f02      	ldr	r7, [sp, #8]
 80023e0:	08fd      	lsrs	r5, r7, #3
 80023e2:	4215      	tst	r5, r2
 80023e4:	d1d3      	bne.n	800238e <__aeabi_dsub+0x612>
 80023e6:	4663      	mov	r3, ip
 80023e8:	2601      	movs	r6, #1
 80023ea:	08d8      	lsrs	r0, r3, #3
 80023ec:	077b      	lsls	r3, r7, #29
 80023ee:	002c      	movs	r4, r5
 80023f0:	4318      	orrs	r0, r3
 80023f2:	400e      	ands	r6, r1
 80023f4:	e7cb      	b.n	800238e <__aeabi_dsub+0x612>
 80023f6:	000a      	movs	r2, r1
 80023f8:	0027      	movs	r7, r4
 80023fa:	3a20      	subs	r2, #32
 80023fc:	40d7      	lsrs	r7, r2
 80023fe:	2920      	cmp	r1, #32
 8002400:	d005      	beq.n	800240e <__aeabi_dsub+0x692>
 8002402:	2240      	movs	r2, #64	@ 0x40
 8002404:	1a52      	subs	r2, r2, r1
 8002406:	4094      	lsls	r4, r2
 8002408:	0025      	movs	r5, r4
 800240a:	4305      	orrs	r5, r0
 800240c:	9503      	str	r5, [sp, #12]
 800240e:	9d03      	ldr	r5, [sp, #12]
 8002410:	1e6a      	subs	r2, r5, #1
 8002412:	4195      	sbcs	r5, r2
 8002414:	432f      	orrs	r7, r5
 8002416:	e610      	b.n	800203a <__aeabi_dsub+0x2be>
 8002418:	0014      	movs	r4, r2
 800241a:	2500      	movs	r5, #0
 800241c:	2200      	movs	r2, #0
 800241e:	e556      	b.n	8001ece <__aeabi_dsub+0x152>
 8002420:	9b02      	ldr	r3, [sp, #8]
 8002422:	4460      	add	r0, ip
 8002424:	4699      	mov	r9, r3
 8002426:	4560      	cmp	r0, ip
 8002428:	4192      	sbcs	r2, r2
 800242a:	444c      	add	r4, r9
 800242c:	4252      	negs	r2, r2
 800242e:	0005      	movs	r5, r0
 8002430:	18a4      	adds	r4, r4, r2
 8002432:	e74c      	b.n	80022ce <__aeabi_dsub+0x552>
 8002434:	001a      	movs	r2, r3
 8002436:	001c      	movs	r4, r3
 8002438:	432a      	orrs	r2, r5
 800243a:	d000      	beq.n	800243e <__aeabi_dsub+0x6c2>
 800243c:	e6b3      	b.n	80021a6 <__aeabi_dsub+0x42a>
 800243e:	e6c9      	b.n	80021d4 <__aeabi_dsub+0x458>
 8002440:	2480      	movs	r4, #128	@ 0x80
 8002442:	2600      	movs	r6, #0
 8002444:	0324      	lsls	r4, r4, #12
 8002446:	e5ae      	b.n	8001fa6 <__aeabi_dsub+0x22a>
 8002448:	2120      	movs	r1, #32
 800244a:	2500      	movs	r5, #0
 800244c:	1a09      	subs	r1, r1, r0
 800244e:	e517      	b.n	8001e80 <__aeabi_dsub+0x104>
 8002450:	2200      	movs	r2, #0
 8002452:	2500      	movs	r5, #0
 8002454:	4c0b      	ldr	r4, [pc, #44]	@ (8002484 <__aeabi_dsub+0x708>)
 8002456:	e53a      	b.n	8001ece <__aeabi_dsub+0x152>
 8002458:	2d00      	cmp	r5, #0
 800245a:	d100      	bne.n	800245e <__aeabi_dsub+0x6e2>
 800245c:	e5f6      	b.n	800204c <__aeabi_dsub+0x2d0>
 800245e:	464b      	mov	r3, r9
 8002460:	1bda      	subs	r2, r3, r7
 8002462:	4692      	mov	sl, r2
 8002464:	2f00      	cmp	r7, #0
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x6ee>
 8002468:	e66f      	b.n	800214a <__aeabi_dsub+0x3ce>
 800246a:	2a38      	cmp	r2, #56	@ 0x38
 800246c:	dc05      	bgt.n	800247a <__aeabi_dsub+0x6fe>
 800246e:	2680      	movs	r6, #128	@ 0x80
 8002470:	0436      	lsls	r6, r6, #16
 8002472:	4334      	orrs	r4, r6
 8002474:	4688      	mov	r8, r1
 8002476:	000e      	movs	r6, r1
 8002478:	e6d1      	b.n	800221e <__aeabi_dsub+0x4a2>
 800247a:	4688      	mov	r8, r1
 800247c:	000e      	movs	r6, r1
 800247e:	2501      	movs	r5, #1
 8002480:	e6de      	b.n	8002240 <__aeabi_dsub+0x4c4>
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	000007ff 	.word	0x000007ff
 8002488:	ff7fffff 	.word	0xff7fffff
 800248c:	000007fe 	.word	0x000007fe
 8002490:	2d00      	cmp	r5, #0
 8002492:	d100      	bne.n	8002496 <__aeabi_dsub+0x71a>
 8002494:	e668      	b.n	8002168 <__aeabi_dsub+0x3ec>
 8002496:	464b      	mov	r3, r9
 8002498:	1bd9      	subs	r1, r3, r7
 800249a:	2f00      	cmp	r7, #0
 800249c:	d101      	bne.n	80024a2 <__aeabi_dsub+0x726>
 800249e:	468a      	mov	sl, r1
 80024a0:	e5a7      	b.n	8001ff2 <__aeabi_dsub+0x276>
 80024a2:	2701      	movs	r7, #1
 80024a4:	2938      	cmp	r1, #56	@ 0x38
 80024a6:	dd00      	ble.n	80024aa <__aeabi_dsub+0x72e>
 80024a8:	e5c7      	b.n	800203a <__aeabi_dsub+0x2be>
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	0412      	lsls	r2, r2, #16
 80024ae:	4314      	orrs	r4, r2
 80024b0:	e5af      	b.n	8002012 <__aeabi_dsub+0x296>
 80024b2:	46c0      	nop			@ (mov r8, r8)

080024b4 <__aeabi_d2iz>:
 80024b4:	000b      	movs	r3, r1
 80024b6:	0002      	movs	r2, r0
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	4d16      	ldr	r5, [pc, #88]	@ (8002514 <__aeabi_d2iz+0x60>)
 80024bc:	030c      	lsls	r4, r1, #12
 80024be:	b082      	sub	sp, #8
 80024c0:	0049      	lsls	r1, r1, #1
 80024c2:	2000      	movs	r0, #0
 80024c4:	9200      	str	r2, [sp, #0]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	0b24      	lsrs	r4, r4, #12
 80024ca:	0d49      	lsrs	r1, r1, #21
 80024cc:	0fde      	lsrs	r6, r3, #31
 80024ce:	42a9      	cmp	r1, r5
 80024d0:	dd04      	ble.n	80024dc <__aeabi_d2iz+0x28>
 80024d2:	4811      	ldr	r0, [pc, #68]	@ (8002518 <__aeabi_d2iz+0x64>)
 80024d4:	4281      	cmp	r1, r0
 80024d6:	dd03      	ble.n	80024e0 <__aeabi_d2iz+0x2c>
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <__aeabi_d2iz+0x68>)
 80024da:	18f0      	adds	r0, r6, r3
 80024dc:	b002      	add	sp, #8
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	2080      	movs	r0, #128	@ 0x80
 80024e2:	0340      	lsls	r0, r0, #13
 80024e4:	4320      	orrs	r0, r4
 80024e6:	4c0e      	ldr	r4, [pc, #56]	@ (8002520 <__aeabi_d2iz+0x6c>)
 80024e8:	1a64      	subs	r4, r4, r1
 80024ea:	2c1f      	cmp	r4, #31
 80024ec:	dd08      	ble.n	8002500 <__aeabi_d2iz+0x4c>
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <__aeabi_d2iz+0x70>)
 80024f0:	1a5b      	subs	r3, r3, r1
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	0003      	movs	r3, r0
 80024f6:	4258      	negs	r0, r3
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	d1ef      	bne.n	80024dc <__aeabi_d2iz+0x28>
 80024fc:	0018      	movs	r0, r3
 80024fe:	e7ed      	b.n	80024dc <__aeabi_d2iz+0x28>
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <__aeabi_d2iz+0x74>)
 8002502:	9a00      	ldr	r2, [sp, #0]
 8002504:	469c      	mov	ip, r3
 8002506:	0003      	movs	r3, r0
 8002508:	4461      	add	r1, ip
 800250a:	408b      	lsls	r3, r1
 800250c:	40e2      	lsrs	r2, r4
 800250e:	4313      	orrs	r3, r2
 8002510:	e7f1      	b.n	80024f6 <__aeabi_d2iz+0x42>
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	000003fe 	.word	0x000003fe
 8002518:	0000041d 	.word	0x0000041d
 800251c:	7fffffff 	.word	0x7fffffff
 8002520:	00000433 	.word	0x00000433
 8002524:	00000413 	.word	0x00000413
 8002528:	fffffbed 	.word	0xfffffbed

0800252c <__aeabi_i2d>:
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	2800      	cmp	r0, #0
 8002530:	d016      	beq.n	8002560 <__aeabi_i2d+0x34>
 8002532:	17c3      	asrs	r3, r0, #31
 8002534:	18c5      	adds	r5, r0, r3
 8002536:	405d      	eors	r5, r3
 8002538:	0fc4      	lsrs	r4, r0, #31
 800253a:	0028      	movs	r0, r5
 800253c:	f000 f862 	bl	8002604 <__clzsi2>
 8002540:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <__aeabi_i2d+0x58>)
 8002542:	1a1b      	subs	r3, r3, r0
 8002544:	055b      	lsls	r3, r3, #21
 8002546:	0d5b      	lsrs	r3, r3, #21
 8002548:	280a      	cmp	r0, #10
 800254a:	dc14      	bgt.n	8002576 <__aeabi_i2d+0x4a>
 800254c:	0002      	movs	r2, r0
 800254e:	002e      	movs	r6, r5
 8002550:	3215      	adds	r2, #21
 8002552:	4096      	lsls	r6, r2
 8002554:	220b      	movs	r2, #11
 8002556:	1a12      	subs	r2, r2, r0
 8002558:	40d5      	lsrs	r5, r2
 800255a:	032d      	lsls	r5, r5, #12
 800255c:	0b2d      	lsrs	r5, r5, #12
 800255e:	e003      	b.n	8002568 <__aeabi_i2d+0x3c>
 8002560:	2400      	movs	r4, #0
 8002562:	2300      	movs	r3, #0
 8002564:	2500      	movs	r5, #0
 8002566:	2600      	movs	r6, #0
 8002568:	051b      	lsls	r3, r3, #20
 800256a:	432b      	orrs	r3, r5
 800256c:	07e4      	lsls	r4, r4, #31
 800256e:	4323      	orrs	r3, r4
 8002570:	0030      	movs	r0, r6
 8002572:	0019      	movs	r1, r3
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	380b      	subs	r0, #11
 8002578:	4085      	lsls	r5, r0
 800257a:	032d      	lsls	r5, r5, #12
 800257c:	2600      	movs	r6, #0
 800257e:	0b2d      	lsrs	r5, r5, #12
 8002580:	e7f2      	b.n	8002568 <__aeabi_i2d+0x3c>
 8002582:	46c0      	nop			@ (mov r8, r8)
 8002584:	0000041e 	.word	0x0000041e

08002588 <__aeabi_cdrcmple>:
 8002588:	4684      	mov	ip, r0
 800258a:	0010      	movs	r0, r2
 800258c:	4662      	mov	r2, ip
 800258e:	468c      	mov	ip, r1
 8002590:	0019      	movs	r1, r3
 8002592:	4663      	mov	r3, ip
 8002594:	e000      	b.n	8002598 <__aeabi_cdcmpeq>
 8002596:	46c0      	nop			@ (mov r8, r8)

08002598 <__aeabi_cdcmpeq>:
 8002598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800259a:	f000 f915 	bl	80027c8 <__ledf2>
 800259e:	2800      	cmp	r0, #0
 80025a0:	d401      	bmi.n	80025a6 <__aeabi_cdcmpeq+0xe>
 80025a2:	2100      	movs	r1, #0
 80025a4:	42c8      	cmn	r0, r1
 80025a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080025a8 <__aeabi_dcmpeq>:
 80025a8:	b510      	push	{r4, lr}
 80025aa:	f000 f855 	bl	8002658 <__eqdf2>
 80025ae:	4240      	negs	r0, r0
 80025b0:	3001      	adds	r0, #1
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <__aeabi_dcmplt>:
 80025b4:	b510      	push	{r4, lr}
 80025b6:	f000 f907 	bl	80027c8 <__ledf2>
 80025ba:	2800      	cmp	r0, #0
 80025bc:	db01      	blt.n	80025c2 <__aeabi_dcmplt+0xe>
 80025be:	2000      	movs	r0, #0
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	2001      	movs	r0, #1
 80025c4:	bd10      	pop	{r4, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)

080025c8 <__aeabi_dcmple>:
 80025c8:	b510      	push	{r4, lr}
 80025ca:	f000 f8fd 	bl	80027c8 <__ledf2>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	dd01      	ble.n	80025d6 <__aeabi_dcmple+0xe>
 80025d2:	2000      	movs	r0, #0
 80025d4:	bd10      	pop	{r4, pc}
 80025d6:	2001      	movs	r0, #1
 80025d8:	bd10      	pop	{r4, pc}
 80025da:	46c0      	nop			@ (mov r8, r8)

080025dc <__aeabi_dcmpgt>:
 80025dc:	b510      	push	{r4, lr}
 80025de:	f000 f87f 	bl	80026e0 <__gedf2>
 80025e2:	2800      	cmp	r0, #0
 80025e4:	dc01      	bgt.n	80025ea <__aeabi_dcmpgt+0xe>
 80025e6:	2000      	movs	r0, #0
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	2001      	movs	r0, #1
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	46c0      	nop			@ (mov r8, r8)

080025f0 <__aeabi_dcmpge>:
 80025f0:	b510      	push	{r4, lr}
 80025f2:	f000 f875 	bl	80026e0 <__gedf2>
 80025f6:	2800      	cmp	r0, #0
 80025f8:	da01      	bge.n	80025fe <__aeabi_dcmpge+0xe>
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	2001      	movs	r0, #1
 8002600:	bd10      	pop	{r4, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)

08002604 <__clzsi2>:
 8002604:	211c      	movs	r1, #28
 8002606:	2301      	movs	r3, #1
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	4298      	cmp	r0, r3
 800260c:	d301      	bcc.n	8002612 <__clzsi2+0xe>
 800260e:	0c00      	lsrs	r0, r0, #16
 8002610:	3910      	subs	r1, #16
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	4298      	cmp	r0, r3
 8002616:	d301      	bcc.n	800261c <__clzsi2+0x18>
 8002618:	0a00      	lsrs	r0, r0, #8
 800261a:	3908      	subs	r1, #8
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	4298      	cmp	r0, r3
 8002620:	d301      	bcc.n	8002626 <__clzsi2+0x22>
 8002622:	0900      	lsrs	r0, r0, #4
 8002624:	3904      	subs	r1, #4
 8002626:	a202      	add	r2, pc, #8	@ (adr r2, 8002630 <__clzsi2+0x2c>)
 8002628:	5c10      	ldrb	r0, [r2, r0]
 800262a:	1840      	adds	r0, r0, r1
 800262c:	4770      	bx	lr
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	02020304 	.word	0x02020304
 8002634:	01010101 	.word	0x01010101
	...

08002640 <__clzdi2>:
 8002640:	b510      	push	{r4, lr}
 8002642:	2900      	cmp	r1, #0
 8002644:	d103      	bne.n	800264e <__clzdi2+0xe>
 8002646:	f7ff ffdd 	bl	8002604 <__clzsi2>
 800264a:	3020      	adds	r0, #32
 800264c:	e002      	b.n	8002654 <__clzdi2+0x14>
 800264e:	0008      	movs	r0, r1
 8002650:	f7ff ffd8 	bl	8002604 <__clzsi2>
 8002654:	bd10      	pop	{r4, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)

08002658 <__eqdf2>:
 8002658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265a:	4657      	mov	r7, sl
 800265c:	46de      	mov	lr, fp
 800265e:	464e      	mov	r6, r9
 8002660:	4645      	mov	r5, r8
 8002662:	b5e0      	push	{r5, r6, r7, lr}
 8002664:	000d      	movs	r5, r1
 8002666:	0004      	movs	r4, r0
 8002668:	0fe8      	lsrs	r0, r5, #31
 800266a:	4683      	mov	fp, r0
 800266c:	0309      	lsls	r1, r1, #12
 800266e:	0fd8      	lsrs	r0, r3, #31
 8002670:	0b09      	lsrs	r1, r1, #12
 8002672:	4682      	mov	sl, r0
 8002674:	4819      	ldr	r0, [pc, #100]	@ (80026dc <__eqdf2+0x84>)
 8002676:	468c      	mov	ip, r1
 8002678:	031f      	lsls	r7, r3, #12
 800267a:	0069      	lsls	r1, r5, #1
 800267c:	005e      	lsls	r6, r3, #1
 800267e:	0d49      	lsrs	r1, r1, #21
 8002680:	0b3f      	lsrs	r7, r7, #12
 8002682:	0d76      	lsrs	r6, r6, #21
 8002684:	4281      	cmp	r1, r0
 8002686:	d018      	beq.n	80026ba <__eqdf2+0x62>
 8002688:	4286      	cmp	r6, r0
 800268a:	d00f      	beq.n	80026ac <__eqdf2+0x54>
 800268c:	2001      	movs	r0, #1
 800268e:	42b1      	cmp	r1, r6
 8002690:	d10d      	bne.n	80026ae <__eqdf2+0x56>
 8002692:	45bc      	cmp	ip, r7
 8002694:	d10b      	bne.n	80026ae <__eqdf2+0x56>
 8002696:	4294      	cmp	r4, r2
 8002698:	d109      	bne.n	80026ae <__eqdf2+0x56>
 800269a:	45d3      	cmp	fp, sl
 800269c:	d01c      	beq.n	80026d8 <__eqdf2+0x80>
 800269e:	2900      	cmp	r1, #0
 80026a0:	d105      	bne.n	80026ae <__eqdf2+0x56>
 80026a2:	4660      	mov	r0, ip
 80026a4:	4320      	orrs	r0, r4
 80026a6:	1e43      	subs	r3, r0, #1
 80026a8:	4198      	sbcs	r0, r3
 80026aa:	e000      	b.n	80026ae <__eqdf2+0x56>
 80026ac:	2001      	movs	r0, #1
 80026ae:	bcf0      	pop	{r4, r5, r6, r7}
 80026b0:	46bb      	mov	fp, r7
 80026b2:	46b2      	mov	sl, r6
 80026b4:	46a9      	mov	r9, r5
 80026b6:	46a0      	mov	r8, r4
 80026b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ba:	2001      	movs	r0, #1
 80026bc:	428e      	cmp	r6, r1
 80026be:	d1f6      	bne.n	80026ae <__eqdf2+0x56>
 80026c0:	4661      	mov	r1, ip
 80026c2:	4339      	orrs	r1, r7
 80026c4:	000f      	movs	r7, r1
 80026c6:	4317      	orrs	r7, r2
 80026c8:	4327      	orrs	r7, r4
 80026ca:	d1f0      	bne.n	80026ae <__eqdf2+0x56>
 80026cc:	465b      	mov	r3, fp
 80026ce:	4652      	mov	r2, sl
 80026d0:	1a98      	subs	r0, r3, r2
 80026d2:	1e43      	subs	r3, r0, #1
 80026d4:	4198      	sbcs	r0, r3
 80026d6:	e7ea      	b.n	80026ae <__eqdf2+0x56>
 80026d8:	2000      	movs	r0, #0
 80026da:	e7e8      	b.n	80026ae <__eqdf2+0x56>
 80026dc:	000007ff 	.word	0x000007ff

080026e0 <__gedf2>:
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	4657      	mov	r7, sl
 80026e4:	464e      	mov	r6, r9
 80026e6:	4645      	mov	r5, r8
 80026e8:	46de      	mov	lr, fp
 80026ea:	b5e0      	push	{r5, r6, r7, lr}
 80026ec:	000d      	movs	r5, r1
 80026ee:	030f      	lsls	r7, r1, #12
 80026f0:	0b39      	lsrs	r1, r7, #12
 80026f2:	b083      	sub	sp, #12
 80026f4:	0004      	movs	r4, r0
 80026f6:	4680      	mov	r8, r0
 80026f8:	9101      	str	r1, [sp, #4]
 80026fa:	0058      	lsls	r0, r3, #1
 80026fc:	0fe9      	lsrs	r1, r5, #31
 80026fe:	4f31      	ldr	r7, [pc, #196]	@ (80027c4 <__gedf2+0xe4>)
 8002700:	0d40      	lsrs	r0, r0, #21
 8002702:	468c      	mov	ip, r1
 8002704:	006e      	lsls	r6, r5, #1
 8002706:	0319      	lsls	r1, r3, #12
 8002708:	4682      	mov	sl, r0
 800270a:	4691      	mov	r9, r2
 800270c:	0d76      	lsrs	r6, r6, #21
 800270e:	0b09      	lsrs	r1, r1, #12
 8002710:	0fd8      	lsrs	r0, r3, #31
 8002712:	42be      	cmp	r6, r7
 8002714:	d01f      	beq.n	8002756 <__gedf2+0x76>
 8002716:	45ba      	cmp	sl, r7
 8002718:	d00f      	beq.n	800273a <__gedf2+0x5a>
 800271a:	2e00      	cmp	r6, #0
 800271c:	d12f      	bne.n	800277e <__gedf2+0x9e>
 800271e:	4655      	mov	r5, sl
 8002720:	9e01      	ldr	r6, [sp, #4]
 8002722:	4334      	orrs	r4, r6
 8002724:	2d00      	cmp	r5, #0
 8002726:	d127      	bne.n	8002778 <__gedf2+0x98>
 8002728:	430a      	orrs	r2, r1
 800272a:	d03a      	beq.n	80027a2 <__gedf2+0xc2>
 800272c:	2c00      	cmp	r4, #0
 800272e:	d145      	bne.n	80027bc <__gedf2+0xdc>
 8002730:	2800      	cmp	r0, #0
 8002732:	d11a      	bne.n	800276a <__gedf2+0x8a>
 8002734:	2001      	movs	r0, #1
 8002736:	4240      	negs	r0, r0
 8002738:	e017      	b.n	800276a <__gedf2+0x8a>
 800273a:	4311      	orrs	r1, r2
 800273c:	d13b      	bne.n	80027b6 <__gedf2+0xd6>
 800273e:	2e00      	cmp	r6, #0
 8002740:	d102      	bne.n	8002748 <__gedf2+0x68>
 8002742:	9f01      	ldr	r7, [sp, #4]
 8002744:	4327      	orrs	r7, r4
 8002746:	d0f3      	beq.n	8002730 <__gedf2+0x50>
 8002748:	4584      	cmp	ip, r0
 800274a:	d109      	bne.n	8002760 <__gedf2+0x80>
 800274c:	4663      	mov	r3, ip
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <__gedf2+0x54>
 8002752:	4660      	mov	r0, ip
 8002754:	e009      	b.n	800276a <__gedf2+0x8a>
 8002756:	9f01      	ldr	r7, [sp, #4]
 8002758:	4327      	orrs	r7, r4
 800275a:	d12c      	bne.n	80027b6 <__gedf2+0xd6>
 800275c:	45b2      	cmp	sl, r6
 800275e:	d024      	beq.n	80027aa <__gedf2+0xca>
 8002760:	4663      	mov	r3, ip
 8002762:	2002      	movs	r0, #2
 8002764:	3b01      	subs	r3, #1
 8002766:	4018      	ands	r0, r3
 8002768:	3801      	subs	r0, #1
 800276a:	b003      	add	sp, #12
 800276c:	bcf0      	pop	{r4, r5, r6, r7}
 800276e:	46bb      	mov	fp, r7
 8002770:	46b2      	mov	sl, r6
 8002772:	46a9      	mov	r9, r5
 8002774:	46a0      	mov	r8, r4
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002778:	2c00      	cmp	r4, #0
 800277a:	d0d9      	beq.n	8002730 <__gedf2+0x50>
 800277c:	e7e4      	b.n	8002748 <__gedf2+0x68>
 800277e:	4654      	mov	r4, sl
 8002780:	2c00      	cmp	r4, #0
 8002782:	d0ed      	beq.n	8002760 <__gedf2+0x80>
 8002784:	4584      	cmp	ip, r0
 8002786:	d1eb      	bne.n	8002760 <__gedf2+0x80>
 8002788:	4556      	cmp	r6, sl
 800278a:	dce9      	bgt.n	8002760 <__gedf2+0x80>
 800278c:	dbde      	blt.n	800274c <__gedf2+0x6c>
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	428b      	cmp	r3, r1
 8002792:	d8e5      	bhi.n	8002760 <__gedf2+0x80>
 8002794:	d1da      	bne.n	800274c <__gedf2+0x6c>
 8002796:	45c8      	cmp	r8, r9
 8002798:	d8e2      	bhi.n	8002760 <__gedf2+0x80>
 800279a:	2000      	movs	r0, #0
 800279c:	45c8      	cmp	r8, r9
 800279e:	d2e4      	bcs.n	800276a <__gedf2+0x8a>
 80027a0:	e7d4      	b.n	800274c <__gedf2+0x6c>
 80027a2:	2000      	movs	r0, #0
 80027a4:	2c00      	cmp	r4, #0
 80027a6:	d0e0      	beq.n	800276a <__gedf2+0x8a>
 80027a8:	e7da      	b.n	8002760 <__gedf2+0x80>
 80027aa:	4311      	orrs	r1, r2
 80027ac:	d103      	bne.n	80027b6 <__gedf2+0xd6>
 80027ae:	4584      	cmp	ip, r0
 80027b0:	d1d6      	bne.n	8002760 <__gedf2+0x80>
 80027b2:	2000      	movs	r0, #0
 80027b4:	e7d9      	b.n	800276a <__gedf2+0x8a>
 80027b6:	2002      	movs	r0, #2
 80027b8:	4240      	negs	r0, r0
 80027ba:	e7d6      	b.n	800276a <__gedf2+0x8a>
 80027bc:	4584      	cmp	ip, r0
 80027be:	d0e6      	beq.n	800278e <__gedf2+0xae>
 80027c0:	e7ce      	b.n	8002760 <__gedf2+0x80>
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	000007ff 	.word	0x000007ff

080027c8 <__ledf2>:
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	4657      	mov	r7, sl
 80027cc:	464e      	mov	r6, r9
 80027ce:	4645      	mov	r5, r8
 80027d0:	46de      	mov	lr, fp
 80027d2:	b5e0      	push	{r5, r6, r7, lr}
 80027d4:	000d      	movs	r5, r1
 80027d6:	030f      	lsls	r7, r1, #12
 80027d8:	0004      	movs	r4, r0
 80027da:	4680      	mov	r8, r0
 80027dc:	0fe8      	lsrs	r0, r5, #31
 80027de:	0b39      	lsrs	r1, r7, #12
 80027e0:	4684      	mov	ip, r0
 80027e2:	b083      	sub	sp, #12
 80027e4:	0058      	lsls	r0, r3, #1
 80027e6:	4f30      	ldr	r7, [pc, #192]	@ (80028a8 <__ledf2+0xe0>)
 80027e8:	0d40      	lsrs	r0, r0, #21
 80027ea:	9101      	str	r1, [sp, #4]
 80027ec:	031e      	lsls	r6, r3, #12
 80027ee:	0069      	lsls	r1, r5, #1
 80027f0:	4682      	mov	sl, r0
 80027f2:	4691      	mov	r9, r2
 80027f4:	0d49      	lsrs	r1, r1, #21
 80027f6:	0b36      	lsrs	r6, r6, #12
 80027f8:	0fd8      	lsrs	r0, r3, #31
 80027fa:	42b9      	cmp	r1, r7
 80027fc:	d020      	beq.n	8002840 <__ledf2+0x78>
 80027fe:	45ba      	cmp	sl, r7
 8002800:	d00f      	beq.n	8002822 <__ledf2+0x5a>
 8002802:	2900      	cmp	r1, #0
 8002804:	d12b      	bne.n	800285e <__ledf2+0x96>
 8002806:	9901      	ldr	r1, [sp, #4]
 8002808:	430c      	orrs	r4, r1
 800280a:	4651      	mov	r1, sl
 800280c:	2900      	cmp	r1, #0
 800280e:	d137      	bne.n	8002880 <__ledf2+0xb8>
 8002810:	4332      	orrs	r2, r6
 8002812:	d038      	beq.n	8002886 <__ledf2+0xbe>
 8002814:	2c00      	cmp	r4, #0
 8002816:	d144      	bne.n	80028a2 <__ledf2+0xda>
 8002818:	2800      	cmp	r0, #0
 800281a:	d119      	bne.n	8002850 <__ledf2+0x88>
 800281c:	2001      	movs	r0, #1
 800281e:	4240      	negs	r0, r0
 8002820:	e016      	b.n	8002850 <__ledf2+0x88>
 8002822:	4316      	orrs	r6, r2
 8002824:	d113      	bne.n	800284e <__ledf2+0x86>
 8002826:	2900      	cmp	r1, #0
 8002828:	d102      	bne.n	8002830 <__ledf2+0x68>
 800282a:	9f01      	ldr	r7, [sp, #4]
 800282c:	4327      	orrs	r7, r4
 800282e:	d0f3      	beq.n	8002818 <__ledf2+0x50>
 8002830:	4584      	cmp	ip, r0
 8002832:	d020      	beq.n	8002876 <__ledf2+0xae>
 8002834:	4663      	mov	r3, ip
 8002836:	2002      	movs	r0, #2
 8002838:	3b01      	subs	r3, #1
 800283a:	4018      	ands	r0, r3
 800283c:	3801      	subs	r0, #1
 800283e:	e007      	b.n	8002850 <__ledf2+0x88>
 8002840:	9f01      	ldr	r7, [sp, #4]
 8002842:	4327      	orrs	r7, r4
 8002844:	d103      	bne.n	800284e <__ledf2+0x86>
 8002846:	458a      	cmp	sl, r1
 8002848:	d1f4      	bne.n	8002834 <__ledf2+0x6c>
 800284a:	4316      	orrs	r6, r2
 800284c:	d01f      	beq.n	800288e <__ledf2+0xc6>
 800284e:	2002      	movs	r0, #2
 8002850:	b003      	add	sp, #12
 8002852:	bcf0      	pop	{r4, r5, r6, r7}
 8002854:	46bb      	mov	fp, r7
 8002856:	46b2      	mov	sl, r6
 8002858:	46a9      	mov	r9, r5
 800285a:	46a0      	mov	r8, r4
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	4654      	mov	r4, sl
 8002860:	2c00      	cmp	r4, #0
 8002862:	d0e7      	beq.n	8002834 <__ledf2+0x6c>
 8002864:	4584      	cmp	ip, r0
 8002866:	d1e5      	bne.n	8002834 <__ledf2+0x6c>
 8002868:	4551      	cmp	r1, sl
 800286a:	dce3      	bgt.n	8002834 <__ledf2+0x6c>
 800286c:	db03      	blt.n	8002876 <__ledf2+0xae>
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	42b3      	cmp	r3, r6
 8002872:	d8df      	bhi.n	8002834 <__ledf2+0x6c>
 8002874:	d00f      	beq.n	8002896 <__ledf2+0xce>
 8002876:	4663      	mov	r3, ip
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0cf      	beq.n	800281c <__ledf2+0x54>
 800287c:	4660      	mov	r0, ip
 800287e:	e7e7      	b.n	8002850 <__ledf2+0x88>
 8002880:	2c00      	cmp	r4, #0
 8002882:	d0c9      	beq.n	8002818 <__ledf2+0x50>
 8002884:	e7d4      	b.n	8002830 <__ledf2+0x68>
 8002886:	2000      	movs	r0, #0
 8002888:	2c00      	cmp	r4, #0
 800288a:	d0e1      	beq.n	8002850 <__ledf2+0x88>
 800288c:	e7d2      	b.n	8002834 <__ledf2+0x6c>
 800288e:	4584      	cmp	ip, r0
 8002890:	d1d0      	bne.n	8002834 <__ledf2+0x6c>
 8002892:	2000      	movs	r0, #0
 8002894:	e7dc      	b.n	8002850 <__ledf2+0x88>
 8002896:	45c8      	cmp	r8, r9
 8002898:	d8cc      	bhi.n	8002834 <__ledf2+0x6c>
 800289a:	2000      	movs	r0, #0
 800289c:	45c8      	cmp	r8, r9
 800289e:	d2d7      	bcs.n	8002850 <__ledf2+0x88>
 80028a0:	e7e9      	b.n	8002876 <__ledf2+0xae>
 80028a2:	4584      	cmp	ip, r0
 80028a4:	d0e3      	beq.n	800286e <__ledf2+0xa6>
 80028a6:	e7c5      	b.n	8002834 <__ledf2+0x6c>
 80028a8:	000007ff 	.word	0x000007ff

080028ac <readInputs>:
 	 	 	* Potentiometer 1 (5V)
 	 	 	* Potentiometer 2 (3V)
 	 	 	* Button 0 -> Blue board pin has no current use
 	 	 	* Button 1(pin 5) -> Reset pin for all of the implausibilities
 	 	 	* Button 2(pin 6) -> Repesents the brake pedal reading as a boolean value */
void readInputs(){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	//Get DMA readings for both potentiometers
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcDMA, adcmsgCnt);
 80028b0:	2302      	movs	r3, #2
 80028b2:	001a      	movs	r2, r3
 80028b4:	491c      	ldr	r1, [pc, #112]	@ (8002928 <readInputs+0x7c>)
 80028b6:	4b1d      	ldr	r3, [pc, #116]	@ (800292c <readInputs+0x80>)
 80028b8:	0018      	movs	r0, r3
 80028ba:	f001 fe75 	bl	80045a8 <HAL_ADC_Start_DMA>
	while (!adcConvComp){ /*Wait will next conversion is done*/ }
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <readInputs+0x84>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0fb      	beq.n	80028c0 <readInputs+0x14>
	adcConvComp = 0; //Reset event variable
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <readInputs+0x84>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]

	//Get button readings
	btn0 = HAL_GPIO_ReadPin(Btn_GPIO_Port, Btn_Pin);
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <readInputs+0x88>)
 80028d4:	0019      	movs	r1, r3
 80028d6:	0010      	movs	r0, r2
 80028d8:	f003 fc42 	bl	8006160 <HAL_GPIO_ReadPin>
 80028dc:	0003      	movs	r3, r0
 80028de:	001a      	movs	r2, r3
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <readInputs+0x8c>)
 80028e2:	701a      	strb	r2, [r3, #0]

	resetBtn = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <readInputs+0x90>)
 80028e6:	2120      	movs	r1, #32
 80028e8:	0018      	movs	r0, r3
 80028ea:	f003 fc39 	bl	8006160 <HAL_GPIO_ReadPin>
 80028ee:	0003      	movs	r3, r0
 80028f0:	001a      	movs	r2, r3
 80028f2:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <readInputs+0x94>)
 80028f4:	701a      	strb	r2, [r3, #0]
	if(resetBtn){
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <readInputs+0x94>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <readInputs+0x64>
		calibrationModeBool = 0;
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <readInputs+0x98>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		pedalImplausibilityBool = 0;
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <readInputs+0x9c>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
		brakeImplausibilityBool = 0;
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <readInputs+0xa0>)
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
	}

	brakeBtn = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8002910:	4b0a      	ldr	r3, [pc, #40]	@ (800293c <readInputs+0x90>)
 8002912:	2110      	movs	r1, #16
 8002914:	0018      	movs	r0, r3
 8002916:	f003 fc23 	bl	8006160 <HAL_GPIO_ReadPin>
 800291a:	0003      	movs	r3, r0
 800291c:	001a      	movs	r2, r3
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <readInputs+0xa4>)
 8002920:	701a      	strb	r2, [r3, #0]
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000024c 	.word	0x2000024c
 800292c:	20000090 	.word	0x20000090
 8002930:	20000250 	.word	0x20000250
 8002934:	50000800 	.word	0x50000800
 8002938:	20000254 	.word	0x20000254
 800293c:	50000400 	.word	0x50000400
 8002940:	20000256 	.word	0x20000256
 8002944:	20000000 	.word	0x20000000
 8002948:	20000258 	.word	0x20000258
 800294c:	20000259 	.word	0x20000259
 8002950:	20000255 	.word	0x20000255

08002954 <printValues>:

/* Prints all values for debugging */
void printValues(){
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af02      	add	r7, sp, #8
	//Potentiometer & button readings
	msgSz = snprintf(msgBuff, buffSz, "%d 5VPot: %d, 3VPot: %d\r\n", msgCnt, adcDMA[0], adcDMA[1]);
 800295a:	4bba      	ldr	r3, [pc, #744]	@ (8002c44 <printValues+0x2f0>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	001c      	movs	r4, r3
 8002960:	4bb9      	ldr	r3, [pc, #740]	@ (8002c48 <printValues+0x2f4>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	001d      	movs	r5, r3
 8002966:	4bb9      	ldr	r3, [pc, #740]	@ (8002c4c <printValues+0x2f8>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	0019      	movs	r1, r3
 800296e:	4bb7      	ldr	r3, [pc, #732]	@ (8002c4c <printValues+0x2f8>)
 8002970:	885b      	ldrh	r3, [r3, #2]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4ab6      	ldr	r2, [pc, #728]	@ (8002c50 <printValues+0x2fc>)
 8002976:	48b7      	ldr	r0, [pc, #732]	@ (8002c54 <printValues+0x300>)
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	9100      	str	r1, [sp, #0]
 800297c:	002b      	movs	r3, r5
 800297e:	0021      	movs	r1, r4
 8002980:	f005 fb58 	bl	8008034 <sniprintf>
 8002984:	0003      	movs	r3, r0
 8002986:	b2da      	uxtb	r2, r3
 8002988:	4bb3      	ldr	r3, [pc, #716]	@ (8002c58 <printValues+0x304>)
 800298a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 800298c:	4bb2      	ldr	r3, [pc, #712]	@ (8002c58 <printValues+0x304>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	001a      	movs	r2, r3
 8002992:	2301      	movs	r3, #1
 8002994:	425b      	negs	r3, r3
 8002996:	49af      	ldr	r1, [pc, #700]	@ (8002c54 <printValues+0x300>)
 8002998:	48b0      	ldr	r0, [pc, #704]	@ (8002c5c <printValues+0x308>)
 800299a:	f004 fc03 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "%d BrakeBtn: %d, ResetBtn: %d\r\n", msgCnt, brakeBtn, resetBtn);
 800299e:	4ba9      	ldr	r3, [pc, #676]	@ (8002c44 <printValues+0x2f0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	001c      	movs	r4, r3
 80029a4:	4ba8      	ldr	r3, [pc, #672]	@ (8002c48 <printValues+0x2f4>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	001d      	movs	r5, r3
 80029aa:	4bad      	ldr	r3, [pc, #692]	@ (8002c60 <printValues+0x30c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	4bac      	ldr	r3, [pc, #688]	@ (8002c64 <printValues+0x310>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4aac      	ldr	r2, [pc, #688]	@ (8002c68 <printValues+0x314>)
 80029b6:	48a7      	ldr	r0, [pc, #668]	@ (8002c54 <printValues+0x300>)
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	9100      	str	r1, [sp, #0]
 80029bc:	002b      	movs	r3, r5
 80029be:	0021      	movs	r1, r4
 80029c0:	f005 fb38 	bl	8008034 <sniprintf>
 80029c4:	0003      	movs	r3, r0
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	4ba3      	ldr	r3, [pc, #652]	@ (8002c58 <printValues+0x304>)
 80029ca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 80029cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002c58 <printValues+0x304>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	2301      	movs	r3, #1
 80029d4:	425b      	negs	r3, r3
 80029d6:	499f      	ldr	r1, [pc, #636]	@ (8002c54 <printValues+0x300>)
 80029d8:	48a0      	ldr	r0, [pc, #640]	@ (8002c5c <printValues+0x308>)
 80029da:	f004 fbe3 	bl	80071a4 <HAL_UART_Transmit>

	//Accelerator petal Min/Max
	msgSz = snprintf(msgBuff, buffSz, "%d 5VMax: %d, 5VMin: %d\r\n", msgCnt, accel5VMax, accel5VMin);
 80029de:	4b99      	ldr	r3, [pc, #612]	@ (8002c44 <printValues+0x2f0>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	001c      	movs	r4, r3
 80029e4:	4b98      	ldr	r3, [pc, #608]	@ (8002c48 <printValues+0x2f4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	001d      	movs	r5, r3
 80029ea:	4ba0      	ldr	r3, [pc, #640]	@ (8002c6c <printValues+0x318>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	0019      	movs	r1, r3
 80029f0:	4b9f      	ldr	r3, [pc, #636]	@ (8002c70 <printValues+0x31c>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	4a9f      	ldr	r2, [pc, #636]	@ (8002c74 <printValues+0x320>)
 80029f6:	4897      	ldr	r0, [pc, #604]	@ (8002c54 <printValues+0x300>)
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	9100      	str	r1, [sp, #0]
 80029fc:	002b      	movs	r3, r5
 80029fe:	0021      	movs	r1, r4
 8002a00:	f005 fb18 	bl	8008034 <sniprintf>
 8002a04:	0003      	movs	r3, r0
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b93      	ldr	r3, [pc, #588]	@ (8002c58 <printValues+0x304>)
 8002a0a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002a0c:	4b92      	ldr	r3, [pc, #584]	@ (8002c58 <printValues+0x304>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	001a      	movs	r2, r3
 8002a12:	2301      	movs	r3, #1
 8002a14:	425b      	negs	r3, r3
 8002a16:	498f      	ldr	r1, [pc, #572]	@ (8002c54 <printValues+0x300>)
 8002a18:	4890      	ldr	r0, [pc, #576]	@ (8002c5c <printValues+0x308>)
 8002a1a:	f004 fbc3 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "%d 3VMax: %d, 3VMin: %d\r\n", msgCnt, accel3VMax, accel3VMin);
 8002a1e:	4b89      	ldr	r3, [pc, #548]	@ (8002c44 <printValues+0x2f0>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	001c      	movs	r4, r3
 8002a24:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <printValues+0x2f4>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	001d      	movs	r5, r3
 8002a2a:	4b93      	ldr	r3, [pc, #588]	@ (8002c78 <printValues+0x324>)
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	0019      	movs	r1, r3
 8002a30:	4b92      	ldr	r3, [pc, #584]	@ (8002c7c <printValues+0x328>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	4a92      	ldr	r2, [pc, #584]	@ (8002c80 <printValues+0x32c>)
 8002a36:	4887      	ldr	r0, [pc, #540]	@ (8002c54 <printValues+0x300>)
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	9100      	str	r1, [sp, #0]
 8002a3c:	002b      	movs	r3, r5
 8002a3e:	0021      	movs	r1, r4
 8002a40:	f005 faf8 	bl	8008034 <sniprintf>
 8002a44:	0003      	movs	r3, r0
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b83      	ldr	r3, [pc, #524]	@ (8002c58 <printValues+0x304>)
 8002a4a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002a4c:	4b82      	ldr	r3, [pc, #520]	@ (8002c58 <printValues+0x304>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	001a      	movs	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	425b      	negs	r3, r3
 8002a56:	497f      	ldr	r1, [pc, #508]	@ (8002c54 <printValues+0x300>)
 8002a58:	4880      	ldr	r0, [pc, #512]	@ (8002c5c <printValues+0x308>)
 8002a5a:	f004 fba3 	bl	80071a4 <HAL_UART_Transmit>

	//Accelerator petal Min/Max Calibrated
	msgSz = snprintf(msgBuff, buffSz, "%d Thresh 5VMax: ", msgCnt);
 8002a5e:	4b79      	ldr	r3, [pc, #484]	@ (8002c44 <printValues+0x2f0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	0019      	movs	r1, r3
 8002a64:	4b78      	ldr	r3, [pc, #480]	@ (8002c48 <printValues+0x2f4>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4a86      	ldr	r2, [pc, #536]	@ (8002c84 <printValues+0x330>)
 8002a6a:	487a      	ldr	r0, [pc, #488]	@ (8002c54 <printValues+0x300>)
 8002a6c:	f005 fae2 	bl	8008034 <sniprintf>
 8002a70:	0003      	movs	r3, r0
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	4b78      	ldr	r3, [pc, #480]	@ (8002c58 <printValues+0x304>)
 8002a76:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002a78:	4b77      	ldr	r3, [pc, #476]	@ (8002c58 <printValues+0x304>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	2301      	movs	r3, #1
 8002a80:	425b      	negs	r3, r3
 8002a82:	4974      	ldr	r1, [pc, #464]	@ (8002c54 <printValues+0x300>)
 8002a84:	4875      	ldr	r0, [pc, #468]	@ (8002c5c <printValues+0x308>)
 8002a86:	f004 fb8d 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "%d, 5VMin: %d\r\n", accel5VMaxThresh, accel5VMinThresh);
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <printValues+0x2f0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	0019      	movs	r1, r3
 8002a90:	4b7d      	ldr	r3, [pc, #500]	@ (8002c88 <printValues+0x334>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	001c      	movs	r4, r3
 8002a96:	4b7d      	ldr	r3, [pc, #500]	@ (8002c8c <printValues+0x338>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c90 <printValues+0x33c>)
 8002a9c:	486d      	ldr	r0, [pc, #436]	@ (8002c54 <printValues+0x300>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	0023      	movs	r3, r4
 8002aa2:	f005 fac7 	bl	8008034 <sniprintf>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8002c58 <printValues+0x304>)
 8002aac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002aae:	4b6a      	ldr	r3, [pc, #424]	@ (8002c58 <printValues+0x304>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	4966      	ldr	r1, [pc, #408]	@ (8002c54 <printValues+0x300>)
 8002aba:	4868      	ldr	r0, [pc, #416]	@ (8002c5c <printValues+0x308>)
 8002abc:	f004 fb72 	bl	80071a4 <HAL_UART_Transmit>

	msgSz = snprintf(msgBuff, buffSz, "%d Thresh 3VMax: ", msgCnt);
 8002ac0:	4b60      	ldr	r3, [pc, #384]	@ (8002c44 <printValues+0x2f0>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	4b60      	ldr	r3, [pc, #384]	@ (8002c48 <printValues+0x2f4>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4a72      	ldr	r2, [pc, #456]	@ (8002c94 <printValues+0x340>)
 8002acc:	4861      	ldr	r0, [pc, #388]	@ (8002c54 <printValues+0x300>)
 8002ace:	f005 fab1 	bl	8008034 <sniprintf>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b60      	ldr	r3, [pc, #384]	@ (8002c58 <printValues+0x304>)
 8002ad8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002ada:	4b5f      	ldr	r3, [pc, #380]	@ (8002c58 <printValues+0x304>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	001a      	movs	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	425b      	negs	r3, r3
 8002ae4:	495b      	ldr	r1, [pc, #364]	@ (8002c54 <printValues+0x300>)
 8002ae6:	485d      	ldr	r0, [pc, #372]	@ (8002c5c <printValues+0x308>)
 8002ae8:	f004 fb5c 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "%d, 3VMin: %d\r\n", accel3VMaxThresh, accel3VMinThresh);
 8002aec:	4b55      	ldr	r3, [pc, #340]	@ (8002c44 <printValues+0x2f0>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	0019      	movs	r1, r3
 8002af2:	4b69      	ldr	r3, [pc, #420]	@ (8002c98 <printValues+0x344>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	001c      	movs	r4, r3
 8002af8:	4b68      	ldr	r3, [pc, #416]	@ (8002c9c <printValues+0x348>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4a68      	ldr	r2, [pc, #416]	@ (8002ca0 <printValues+0x34c>)
 8002afe:	4855      	ldr	r0, [pc, #340]	@ (8002c54 <printValues+0x300>)
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0023      	movs	r3, r4
 8002b04:	f005 fa96 	bl	8008034 <sniprintf>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b52      	ldr	r3, [pc, #328]	@ (8002c58 <printValues+0x304>)
 8002b0e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002b10:	4b51      	ldr	r3, [pc, #324]	@ (8002c58 <printValues+0x304>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	001a      	movs	r2, r3
 8002b16:	2301      	movs	r3, #1
 8002b18:	425b      	negs	r3, r3
 8002b1a:	494e      	ldr	r1, [pc, #312]	@ (8002c54 <printValues+0x300>)
 8002b1c:	484f      	ldr	r0, [pc, #316]	@ (8002c5c <printValues+0x308>)
 8002b1e:	f004 fb41 	bl	80071a4 <HAL_UART_Transmit>

	//Accelerator percentages
	msgSz = snprintf(msgBuff, buffSz, "%d Percentage: ", msgCnt);
 8002b22:	4b48      	ldr	r3, [pc, #288]	@ (8002c44 <printValues+0x2f0>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	0019      	movs	r1, r3
 8002b28:	4b47      	ldr	r3, [pc, #284]	@ (8002c48 <printValues+0x2f4>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca4 <printValues+0x350>)
 8002b2e:	4849      	ldr	r0, [pc, #292]	@ (8002c54 <printValues+0x300>)
 8002b30:	f005 fa80 	bl	8008034 <sniprintf>
 8002b34:	0003      	movs	r3, r0
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b47      	ldr	r3, [pc, #284]	@ (8002c58 <printValues+0x304>)
 8002b3a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002b3c:	4b46      	ldr	r3, [pc, #280]	@ (8002c58 <printValues+0x304>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	001a      	movs	r2, r3
 8002b42:	2301      	movs	r3, #1
 8002b44:	425b      	negs	r3, r3
 8002b46:	4943      	ldr	r1, [pc, #268]	@ (8002c54 <printValues+0x300>)
 8002b48:	4844      	ldr	r0, [pc, #272]	@ (8002c5c <printValues+0x308>)
 8002b4a:	f004 fb2b 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "5VP: %d, 3VP: %d, AvgP: %d\r\n", accel5VPercentage, accel3VPercentage, accelAvgPercentage);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <printValues+0x2f0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	001c      	movs	r4, r3
 8002b54:	4b54      	ldr	r3, [pc, #336]	@ (8002ca8 <printValues+0x354>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	001d      	movs	r5, r3
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <printValues+0x358>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <printValues+0x35c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4a53      	ldr	r2, [pc, #332]	@ (8002cb4 <printValues+0x360>)
 8002b66:	483b      	ldr	r0, [pc, #236]	@ (8002c54 <printValues+0x300>)
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	9100      	str	r1, [sp, #0]
 8002b6c:	002b      	movs	r3, r5
 8002b6e:	0021      	movs	r1, r4
 8002b70:	f005 fa60 	bl	8008034 <sniprintf>
 8002b74:	0003      	movs	r3, r0
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <printValues+0x304>)
 8002b7a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002b7c:	4b36      	ldr	r3, [pc, #216]	@ (8002c58 <printValues+0x304>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	001a      	movs	r2, r3
 8002b82:	2301      	movs	r3, #1
 8002b84:	425b      	negs	r3, r3
 8002b86:	4933      	ldr	r1, [pc, #204]	@ (8002c54 <printValues+0x300>)
 8002b88:	4834      	ldr	r0, [pc, #208]	@ (8002c5c <printValues+0x308>)
 8002b8a:	f004 fb0b 	bl	80071a4 <HAL_UART_Transmit>

	//Implausibilities
	msgSz = snprintf(msgBuff, buffSz, "%d PedIm: %d, BrakeIm: %d\r\n", msgCnt, pedalImplausibilityBool, brakeImplausibilityBool);
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <printValues+0x2f0>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	001c      	movs	r4, r3
 8002b94:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <printValues+0x2f4>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	001d      	movs	r5, r3
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <printValues+0x364>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	4b46      	ldr	r3, [pc, #280]	@ (8002cbc <printValues+0x368>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <printValues+0x36c>)
 8002ba6:	482b      	ldr	r0, [pc, #172]	@ (8002c54 <printValues+0x300>)
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	9100      	str	r1, [sp, #0]
 8002bac:	002b      	movs	r3, r5
 8002bae:	0021      	movs	r1, r4
 8002bb0:	f005 fa40 	bl	8008034 <sniprintf>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <printValues+0x304>)
 8002bba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002bbc:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <printValues+0x304>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	4923      	ldr	r1, [pc, #140]	@ (8002c54 <printValues+0x300>)
 8002bc8:	4824      	ldr	r0, [pc, #144]	@ (8002c5c <printValues+0x308>)
 8002bca:	f004 faeb 	bl	80071a4 <HAL_UART_Transmit>

	msgSz = snprintf(msgBuff, buffSz, "%d Calibration: %d, ", msgCnt, calibrationModeBool);
 8002bce:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <printValues+0x2f0>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	0019      	movs	r1, r3
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <printValues+0x2f4>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	001c      	movs	r4, r3
 8002bda:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc4 <printValues+0x370>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc8 <printValues+0x374>)
 8002be0:	481c      	ldr	r0, [pc, #112]	@ (8002c54 <printValues+0x300>)
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	0023      	movs	r3, r4
 8002be6:	f005 fa25 	bl	8008034 <sniprintf>
 8002bea:	0003      	movs	r3, r0
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <printValues+0x304>)
 8002bf0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002bf2:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <printValues+0x304>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	4915      	ldr	r1, [pc, #84]	@ (8002c54 <printValues+0x300>)
 8002bfe:	4817      	ldr	r0, [pc, #92]	@ (8002c5c <printValues+0x308>)
 8002c00:	f004 fad0 	bl	80071a4 <HAL_UART_Transmit>
	msgSz = snprintf(msgBuff, buffSz, "Testing: %d\n\n \r\n", testingModeBool);
 8002c04:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <printValues+0x2f0>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	0019      	movs	r1, r3
 8002c0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <printValues+0x378>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <printValues+0x37c>)
 8002c10:	4810      	ldr	r0, [pc, #64]	@ (8002c54 <printValues+0x300>)
 8002c12:	f005 fa0f 	bl	8008034 <sniprintf>
 8002c16:	0003      	movs	r3, r0
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <printValues+0x304>)
 8002c1c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <printValues+0x304>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	001a      	movs	r2, r3
 8002c24:	2301      	movs	r3, #1
 8002c26:	425b      	negs	r3, r3
 8002c28:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <printValues+0x300>)
 8002c2a:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <printValues+0x308>)
 8002c2c:	f004 faba 	bl	80071a4 <HAL_UART_Transmit>

	msgCnt++;
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <printValues+0x2f4>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <printValues+0x2f4>)
 8002c3a:	701a      	strb	r2, [r3, #0]
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	20000014 	.word	0x20000014
 8002c48:	2000026d 	.word	0x2000026d
 8002c4c:	2000024c 	.word	0x2000024c
 8002c50:	080089ac 	.word	0x080089ac
 8002c54:	20000270 	.word	0x20000270
 8002c58:	200002c0 	.word	0x200002c0
 8002c5c:	200001b8 	.word	0x200001b8
 8002c60:	20000255 	.word	0x20000255
 8002c64:	20000256 	.word	0x20000256
 8002c68:	080089c8 	.word	0x080089c8
 8002c6c:	20000002 	.word	0x20000002
 8002c70:	20000004 	.word	0x20000004
 8002c74:	080089e8 	.word	0x080089e8
 8002c78:	20000006 	.word	0x20000006
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	08008a04 	.word	0x08008a04
 8002c84:	08008a20 	.word	0x08008a20
 8002c88:	2000000a 	.word	0x2000000a
 8002c8c:	2000000c 	.word	0x2000000c
 8002c90:	08008a34 	.word	0x08008a34
 8002c94:	08008a44 	.word	0x08008a44
 8002c98:	2000000e 	.word	0x2000000e
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	08008a58 	.word	0x08008a58
 8002ca4:	08008a68 	.word	0x08008a68
 8002ca8:	2000025f 	.word	0x2000025f
 8002cac:	20000260 	.word	0x20000260
 8002cb0:	20000262 	.word	0x20000262
 8002cb4:	08008a78 	.word	0x08008a78
 8002cb8:	20000258 	.word	0x20000258
 8002cbc:	20000259 	.word	0x20000259
 8002cc0:	08008a98 	.word	0x08008a98
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	08008ab4 	.word	0x08008ab4
 8002ccc:	20000257 	.word	0x20000257
 8002cd0:	08008acc 	.word	0x08008acc

08002cd4 <updateBounds>:

/* Update the upper and lower bounds for the potentiometer reading
 * Doesn't update directly as new min/max must appear the minimum threshold number of times
 * Checks for a new min or max for both 5V and 3V*/
void updateBounds(){
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
	//New 5V max
	if(adcDMA[0] > accel5VMax){
 8002cd8:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <updateBounds+0x114>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	4b43      	ldr	r3, [pc, #268]	@ (8002dec <updateBounds+0x118>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d916      	bls.n	8002d14 <updateBounds+0x40>
		//Meets threshold -> make max
		if(new5VMaxCnt >= minMaxOccurancesThresh){
 8002ce6:	4b42      	ldr	r3, [pc, #264]	@ (8002df0 <updateBounds+0x11c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d908      	bls.n	8002d00 <updateBounds+0x2c>
			accel5VMax = adcDMA[0];
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <updateBounds+0x114>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dec <updateBounds+0x118>)
 8002cf6:	801a      	strh	r2, [r3, #0]
			new5VMaxCnt = 0;
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <updateBounds+0x11c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e005      	b.n	8002d0c <updateBounds+0x38>
		}
		//Doesn't meet threshold -> update count
		else{
			new5VMaxCnt++;
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <updateBounds+0x11c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <updateBounds+0x11c>)
 8002d0a:	701a      	strb	r2, [r3, #0]
		}
		new5VMinCnt = 0;
 8002d0c:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <updateBounds+0x120>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e023      	b.n	8002d5c <updateBounds+0x88>
	}
	//New 5V min
	else if(adcDMA[0] < accel5VMin){
 8002d14:	4b34      	ldr	r3, [pc, #208]	@ (8002de8 <updateBounds+0x114>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b37      	ldr	r3, [pc, #220]	@ (8002df8 <updateBounds+0x124>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d216      	bcs.n	8002d50 <updateBounds+0x7c>
		//Meets threshold -> make min
		if(new5VMinCnt >= minMaxOccurancesThresh){
 8002d22:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <updateBounds+0x120>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d908      	bls.n	8002d3c <updateBounds+0x68>
			accel5VMin = adcDMA[0];
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <updateBounds+0x114>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <updateBounds+0x124>)
 8002d32:	801a      	strh	r2, [r3, #0]
			new5VMinCnt = 0;
 8002d34:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <updateBounds+0x120>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e005      	b.n	8002d48 <updateBounds+0x74>
		}
		//Doesn't meet threshold -> update count
		else{
			new5VMinCnt++;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <updateBounds+0x120>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	3301      	adds	r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <updateBounds+0x120>)
 8002d46:	701a      	strb	r2, [r3, #0]
		}
		new5VMaxCnt = 0;
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <updateBounds+0x11c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e005      	b.n	8002d5c <updateBounds+0x88>
	}
	//Neither new min or max -> reset counters
	else{
		new5VMinCnt = 0;
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <updateBounds+0x120>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
		new5VMaxCnt = 0;
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <updateBounds+0x11c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
	}

	//New 3V max
	if(adcDMA[1] > accel3VMax){
 8002d5c:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <updateBounds+0x114>)
 8002d5e:	885b      	ldrh	r3, [r3, #2]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b26      	ldr	r3, [pc, #152]	@ (8002dfc <updateBounds+0x128>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d916      	bls.n	8002d98 <updateBounds+0xc4>
		//Meets threshold -> make max
		if(new3VMaxCnt >= minMaxOccurancesThresh){
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <updateBounds+0x12c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d908      	bls.n	8002d84 <updateBounds+0xb0>
			accel3VMax = adcDMA[1];
 8002d72:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <updateBounds+0x114>)
 8002d74:	885b      	ldrh	r3, [r3, #2]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <updateBounds+0x128>)
 8002d7a:	801a      	strh	r2, [r3, #0]
			new3VMaxCnt = 0;
 8002d7c:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <updateBounds+0x12c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e005      	b.n	8002d90 <updateBounds+0xbc>
		}
		//Doesn't meet threshold -> update count
		else{
			new3VMaxCnt++;
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <updateBounds+0x12c>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <updateBounds+0x12c>)
 8002d8e:	701a      	strb	r2, [r3, #0]
		}
		new3VMinCnt = 0;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <updateBounds+0x130>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
	//Neither new min or max -> reset counters
	else{
		new3VMinCnt = 0;
		new3VMaxCnt = 0;
	}
}
 8002d96:	e023      	b.n	8002de0 <updateBounds+0x10c>
	else if(adcDMA[1] < accel3VMin){
 8002d98:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <updateBounds+0x114>)
 8002d9a:	885b      	ldrh	r3, [r3, #2]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <updateBounds+0x134>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d216      	bcs.n	8002dd4 <updateBounds+0x100>
		if(new3VMinCnt >= minMaxOccurancesThresh){
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <updateBounds+0x130>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d908      	bls.n	8002dc0 <updateBounds+0xec>
			accel3VMin = adcDMA[1];
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <updateBounds+0x114>)
 8002db0:	885b      	ldrh	r3, [r3, #2]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <updateBounds+0x134>)
 8002db6:	801a      	strh	r2, [r3, #0]
			new3VMinCnt = 0;
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <updateBounds+0x130>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e005      	b.n	8002dcc <updateBounds+0xf8>
			new3VMinCnt++;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <updateBounds+0x130>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <updateBounds+0x130>)
 8002dca:	701a      	strb	r2, [r3, #0]
		new3VMaxCnt = 0;
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <updateBounds+0x12c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
}
 8002dd2:	e005      	b.n	8002de0 <updateBounds+0x10c>
		new3VMinCnt = 0;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <updateBounds+0x130>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
		new3VMaxCnt = 0;
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <updateBounds+0x12c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
}
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	2000024c 	.word	0x2000024c
 8002dec:	20000002 	.word	0x20000002
 8002df0:	2000025b 	.word	0x2000025b
 8002df4:	2000025c 	.word	0x2000025c
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000006 	.word	0x20000006
 8002e00:	2000025d 	.word	0x2000025d
 8002e04:	2000025e 	.word	0x2000025e
 8002e08:	20000008 	.word	0x20000008

08002e0c <calculateMaxMinThresholds>:
/* Uses the current max/min to calculate what should be the min/max used
 * Created a upper and lower deadzone respective to the given deadzone threshold
 	 * Anything above the max thresh is automatically 100
 	 * Anything below the min thresh is automatically 0
 * Used to reduce any mechanical and environmental noise */
void calculateMaxMinThresholds(){
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
	//Calculates what is considered 1% and decrements or increments that to the max/min based on threshold
	uint16_t accelDifference = accel5VMax - accel5VMin;
 8002e12:	4b59      	ldr	r3, [pc, #356]	@ (8002f78 <calculateMaxMinThresholds+0x16c>)
 8002e14:	8819      	ldrh	r1, [r3, #0]
 8002e16:	4b59      	ldr	r3, [pc, #356]	@ (8002f7c <calculateMaxMinThresholds+0x170>)
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	1a8a      	subs	r2, r1, r2
 8002e1e:	801a      	strh	r2, [r3, #0]
	accel5VMaxThresh = accel5VMax - ((accelDifference * .01) * pedalDeadzoneThresh);
 8002e20:	4b55      	ldr	r3, [pc, #340]	@ (8002f78 <calculateMaxMinThresholds+0x16c>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fb81 	bl	800252c <__aeabi_i2d>
 8002e2a:	0004      	movs	r4, r0
 8002e2c:	000d      	movs	r5, r1
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff fb7a 	bl	800252c <__aeabi_i2d>
 8002e38:	4a51      	ldr	r2, [pc, #324]	@ (8002f80 <calculateMaxMinThresholds+0x174>)
 8002e3a:	4b52      	ldr	r3, [pc, #328]	@ (8002f84 <calculateMaxMinThresholds+0x178>)
 8002e3c:	f7fe fcd6 	bl	80017ec <__aeabi_dmul>
 8002e40:	0002      	movs	r2, r0
 8002e42:	000b      	movs	r3, r1
 8002e44:	0010      	movs	r0, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f88 <calculateMaxMinThresholds+0x17c>)
 8002e4c:	f7fe fcce 	bl	80017ec <__aeabi_dmul>
 8002e50:	0002      	movs	r2, r0
 8002e52:	000b      	movs	r3, r1
 8002e54:	0020      	movs	r0, r4
 8002e56:	0029      	movs	r1, r5
 8002e58:	f7fe ff90 	bl	8001d7c <__aeabi_dsub>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	000b      	movs	r3, r1
 8002e60:	0010      	movs	r0, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	f7fd fb40 	bl	80004e8 <__aeabi_d2uiz>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b47      	ldr	r3, [pc, #284]	@ (8002f8c <calculateMaxMinThresholds+0x180>)
 8002e6e:	801a      	strh	r2, [r3, #0]
	accel5VMinThresh = accel5VMin + ((accelDifference * .01) * pedalDeadzoneThresh);
 8002e70:	4b42      	ldr	r3, [pc, #264]	@ (8002f7c <calculateMaxMinThresholds+0x170>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fb59 	bl	800252c <__aeabi_i2d>
 8002e7a:	0004      	movs	r4, r0
 8002e7c:	000d      	movs	r5, r1
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff fb52 	bl	800252c <__aeabi_i2d>
 8002e88:	4a3d      	ldr	r2, [pc, #244]	@ (8002f80 <calculateMaxMinThresholds+0x174>)
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f84 <calculateMaxMinThresholds+0x178>)
 8002e8c:	f7fe fcae 	bl	80017ec <__aeabi_dmul>
 8002e90:	0002      	movs	r2, r0
 8002e92:	000b      	movs	r3, r1
 8002e94:	0010      	movs	r0, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f88 <calculateMaxMinThresholds+0x17c>)
 8002e9c:	f7fe fca6 	bl	80017ec <__aeabi_dmul>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	000b      	movs	r3, r1
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	0029      	movs	r1, r5
 8002ea8:	f7fe f93c 	bl	8001124 <__aeabi_dadd>
 8002eac:	0002      	movs	r2, r0
 8002eae:	000b      	movs	r3, r1
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	f7fd fb18 	bl	80004e8 <__aeabi_d2uiz>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b34      	ldr	r3, [pc, #208]	@ (8002f90 <calculateMaxMinThresholds+0x184>)
 8002ebe:	801a      	strh	r2, [r3, #0]

	accelDifference = accel3VMax - accel3VMin;
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <calculateMaxMinThresholds+0x188>)
 8002ec2:	8819      	ldrh	r1, [r3, #0]
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <calculateMaxMinThresholds+0x18c>)
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	1a8a      	subs	r2, r1, r2
 8002ecc:	801a      	strh	r2, [r3, #0]
	accel3VMaxThresh = accel3VMax - ((accelDifference * .01) * pedalDeadzoneThresh);
 8002ece:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <calculateMaxMinThresholds+0x188>)
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fb2a 	bl	800252c <__aeabi_i2d>
 8002ed8:	0004      	movs	r4, r0
 8002eda:	000d      	movs	r5, r1
 8002edc:	1dbb      	adds	r3, r7, #6
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fb23 	bl	800252c <__aeabi_i2d>
 8002ee6:	4a26      	ldr	r2, [pc, #152]	@ (8002f80 <calculateMaxMinThresholds+0x174>)
 8002ee8:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <calculateMaxMinThresholds+0x178>)
 8002eea:	f7fe fc7f 	bl	80017ec <__aeabi_dmul>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	000b      	movs	r3, r1
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4b23      	ldr	r3, [pc, #140]	@ (8002f88 <calculateMaxMinThresholds+0x17c>)
 8002efa:	f7fe fc77 	bl	80017ec <__aeabi_dmul>
 8002efe:	0002      	movs	r2, r0
 8002f00:	000b      	movs	r3, r1
 8002f02:	0020      	movs	r0, r4
 8002f04:	0029      	movs	r1, r5
 8002f06:	f7fe ff39 	bl	8001d7c <__aeabi_dsub>
 8002f0a:	0002      	movs	r2, r0
 8002f0c:	000b      	movs	r3, r1
 8002f0e:	0010      	movs	r0, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	f7fd fae9 	bl	80004e8 <__aeabi_d2uiz>
 8002f16:	0003      	movs	r3, r0
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <calculateMaxMinThresholds+0x190>)
 8002f1c:	801a      	strh	r2, [r3, #0]
	accel3VMinThresh = accel3VMin + ((accelDifference * .01) * pedalDeadzoneThresh);
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <calculateMaxMinThresholds+0x18c>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff fb02 	bl	800252c <__aeabi_i2d>
 8002f28:	0004      	movs	r4, r0
 8002f2a:	000d      	movs	r5, r1
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7ff fafb 	bl	800252c <__aeabi_i2d>
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <calculateMaxMinThresholds+0x174>)
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <calculateMaxMinThresholds+0x178>)
 8002f3a:	f7fe fc57 	bl	80017ec <__aeabi_dmul>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	000b      	movs	r3, r1
 8002f42:	0010      	movs	r0, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <calculateMaxMinThresholds+0x17c>)
 8002f4a:	f7fe fc4f 	bl	80017ec <__aeabi_dmul>
 8002f4e:	0002      	movs	r2, r0
 8002f50:	000b      	movs	r3, r1
 8002f52:	0020      	movs	r0, r4
 8002f54:	0029      	movs	r1, r5
 8002f56:	f7fe f8e5 	bl	8001124 <__aeabi_dadd>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	000b      	movs	r3, r1
 8002f5e:	0010      	movs	r0, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	f7fd fac1 	bl	80004e8 <__aeabi_d2uiz>
 8002f66:	0003      	movs	r3, r0
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <calculateMaxMinThresholds+0x194>)
 8002f6c:	801a      	strh	r2, [r3, #0]
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	20000002 	.word	0x20000002
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	47ae147b 	.word	0x47ae147b
 8002f84:	3f847ae1 	.word	0x3f847ae1
 8002f88:	40200000 	.word	0x40200000
 8002f8c:	2000000a 	.word	0x2000000a
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	20000006 	.word	0x20000006
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	2000000e 	.word	0x2000000e
 8002fa0:	20000010 	.word	0x20000010

08002fa4 <checkPercentage>:

/* Verifies the percentage falls between 0-100
 * Anything below <0 -> 0 and above >100 -> 100 */
uint16_t checkPercentage(uint16_t percentage){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	0002      	movs	r2, r0
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	801a      	strh	r2, [r3, #0]
	if(percentage < 0){
		percentage = 0;
	}
	else if (percentage > 100){
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2b64      	cmp	r3, #100	@ 0x64
 8002fb6:	d902      	bls.n	8002fbe <checkPercentage+0x1a>
		percentage = 100;
 8002fb8:	1dbb      	adds	r3, r7, #6
 8002fba:	2264      	movs	r2, #100	@ 0x64
 8002fbc:	801a      	strh	r2, [r3, #0]
	}
	return percentage;
 8002fbe:	1dbb      	adds	r3, r7, #6
 8002fc0:	881b      	ldrh	r3, [r3, #0]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <convertToInt>:

/*Converts the float percentage into an int(negative -> 0):
 * Used to cover the edge case where the calculated percentage is negative and
 * the conversion turns what should be 0 into a large integer value */
uint8_t convertToInt(float percentage){
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
	if (percentage < 0){
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fd fa27 	bl	8000428 <__aeabi_fcmplt>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <convertToInt+0x18>
		return 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e004      	b.n	8002fec <convertToInt+0x22>
	}
	return (uint8_t)percentage;
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fa68 	bl	80004b8 <__aeabi_f2uiz>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	b2db      	uxtb	r3, r3
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <convertToPercentages>:

/* Converts the current reading into a percentage out of 100 with the threshold min/max as boundaries */
void convertToPercentages(){
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0

	//Calculate the percentage represented using threshold min & max
	float temp5V = (((float)(adcDMA[0] - accel5VMinThresh) / (float)(accel5VMaxThresh - accel5VMinThresh))*100);
 8002ffa:	4b38      	ldr	r3, [pc, #224]	@ (80030dc <convertToPercentages+0xe8>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	001a      	movs	r2, r3
 8003002:	4b37      	ldr	r3, [pc, #220]	@ (80030e0 <convertToPercentages+0xec>)
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	0018      	movs	r0, r3
 800300a:	f7fe f83f 	bl	800108c <__aeabi_i2f>
 800300e:	1c04      	adds	r4, r0, #0
 8003010:	4b34      	ldr	r3, [pc, #208]	@ (80030e4 <convertToPercentages+0xf0>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	001a      	movs	r2, r3
 8003016:	4b32      	ldr	r3, [pc, #200]	@ (80030e0 <convertToPercentages+0xec>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe f835 	bl	800108c <__aeabi_i2f>
 8003022:	1c03      	adds	r3, r0, #0
 8003024:	1c19      	adds	r1, r3, #0
 8003026:	1c20      	adds	r0, r4, #0
 8003028:	f7fd fb48 	bl	80006bc <__aeabi_fdiv>
 800302c:	1c03      	adds	r3, r0, #0
 800302e:	492e      	ldr	r1, [pc, #184]	@ (80030e8 <convertToPercentages+0xf4>)
 8003030:	1c18      	adds	r0, r3, #0
 8003032:	f7fd fd29 	bl	8000a88 <__aeabi_fmul>
 8003036:	1c03      	adds	r3, r0, #0
 8003038:	607b      	str	r3, [r7, #4]
	float temp3V = (((float)(adcDMA[1] - accel3VMinThresh) / (float)(accel3VMaxThresh - accel3VMinThresh))*100);
 800303a:	4b28      	ldr	r3, [pc, #160]	@ (80030dc <convertToPercentages+0xe8>)
 800303c:	885b      	ldrh	r3, [r3, #2]
 800303e:	b29b      	uxth	r3, r3
 8003040:	001a      	movs	r2, r3
 8003042:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <convertToPercentages+0xf8>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	0018      	movs	r0, r3
 800304a:	f7fe f81f 	bl	800108c <__aeabi_i2f>
 800304e:	1c04      	adds	r4, r0, #0
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <convertToPercentages+0xfc>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	001a      	movs	r2, r3
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <convertToPercentages+0xf8>)
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe f815 	bl	800108c <__aeabi_i2f>
 8003062:	1c03      	adds	r3, r0, #0
 8003064:	1c19      	adds	r1, r3, #0
 8003066:	1c20      	adds	r0, r4, #0
 8003068:	f7fd fb28 	bl	80006bc <__aeabi_fdiv>
 800306c:	1c03      	adds	r3, r0, #0
 800306e:	491e      	ldr	r1, [pc, #120]	@ (80030e8 <convertToPercentages+0xf4>)
 8003070:	1c18      	adds	r0, r3, #0
 8003072:	f7fd fd09 	bl	8000a88 <__aeabi_fmul>
 8003076:	1c03      	adds	r3, r0, #0
 8003078:	603b      	str	r3, [r7, #0]

	//Save the new calculated percentages as integers
	accel5VPercentage = convertToInt(temp5V);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1c18      	adds	r0, r3, #0
 800307e:	f7ff ffa4 	bl	8002fca <convertToInt>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <convertToPercentages+0x100>)
 8003088:	701a      	strb	r2, [r3, #0]
	accel3VPercentage = convertToInt(temp3V);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	1c18      	adds	r0, r3, #0
 800308e:	f7ff ff9c 	bl	8002fca <convertToInt>
 8003092:	0003      	movs	r3, r0
 8003094:	001a      	movs	r2, r3
 8003096:	4b18      	ldr	r3, [pc, #96]	@ (80030f8 <convertToPercentages+0x104>)
 8003098:	701a      	strb	r2, [r3, #0]

	//If falls in lower or upper threshold adjust to 0 or 100 respectively
	accel5VPercentage = checkPercentage(accel5VPercentage);
 800309a:	4b16      	ldr	r3, [pc, #88]	@ (80030f4 <convertToPercentages+0x100>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff ff80 	bl	8002fa4 <checkPercentage>
 80030a4:	0003      	movs	r3, r0
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <convertToPercentages+0x100>)
 80030aa:	701a      	strb	r2, [r3, #0]
	accel3VPercentage = checkPercentage(accel3VPercentage);
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <convertToPercentages+0x104>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff ff77 	bl	8002fa4 <checkPercentage>
 80030b6:	0003      	movs	r3, r0
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <convertToPercentages+0x104>)
 80030bc:	701a      	strb	r2, [r3, #0]

	//Get the average of the two potentiometers
	accelAvgPercentage = (accel5VPercentage + accel3VPercentage)>>1;
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <convertToPercentages+0x100>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	001a      	movs	r2, r3
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <convertToPercentages+0x104>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	18d3      	adds	r3, r2, r3
 80030ca:	105b      	asrs	r3, r3, #1
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <convertToPercentages+0x108>)
 80030d0:	701a      	strb	r2, [r3, #0]
}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b003      	add	sp, #12
 80030d8:	bd90      	pop	{r4, r7, pc}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	2000024c 	.word	0x2000024c
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	2000000a 	.word	0x2000000a
 80030e8:	42c80000 	.word	0x42c80000
 80030ec:	20000010 	.word	0x20000010
 80030f0:	2000000e 	.word	0x2000000e
 80030f4:	2000025f 	.word	0x2000025f
 80030f8:	20000260 	.word	0x20000260
 80030fc:	20000262 	.word	0x20000262

08003100 <absValue>:

/*Finds the absolute value of the given float number*/
uint8_t absValue(float value){
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	if(value < 0){
 8003108:	2100      	movs	r1, #0
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd f98c 	bl	8000428 <__aeabi_fcmplt>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d004      	beq.n	800311e <absValue+0x1e>
		value *= -1;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	@ 0x80
 8003118:	0612      	lsls	r2, r2, #24
 800311a:	4053      	eors	r3, r2
 800311c:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)value;
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd f9ca 	bl	80004b8 <__aeabi_f2uiz>
 8003124:	0003      	movs	r3, r0
 8003126:	b2db      	uxtb	r3, r3
}
 8003128:	0018      	movs	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <accelerationImplausability>:

/* Checks for acceleration pedal implausibility
 * This is when the 5V and 3V readings have a difference larger than the allowed threshold
 * Automatically resets if the readings fall back within threshold and 500 milliseconds have passed */
void accelerationImplausability(){
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	//Calculate the difference in 5V and 3V percentages
	accelImplausabilityPercentage = absValue(accel5VPercentage - accel3VPercentage);
 8003134:	4b18      	ldr	r3, [pc, #96]	@ (8003198 <accelerationImplausability+0x68>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	001a      	movs	r2, r3
 800313a:	4b18      	ldr	r3, [pc, #96]	@ (800319c <accelerationImplausability+0x6c>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	0018      	movs	r0, r3
 8003142:	f7fd ffa3 	bl	800108c <__aeabi_i2f>
 8003146:	1c03      	adds	r3, r0, #0
 8003148:	1c18      	adds	r0, r3, #0
 800314a:	f7ff ffd9 	bl	8003100 <absValue>
 800314e:	0003      	movs	r3, r0
 8003150:	001a      	movs	r2, r3
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <accelerationImplausability+0x70>)
 8003154:	701a      	strb	r2, [r3, #0]

	//If past the threshold then implausibility is true
	if(accelImplausabilityPercentage > pedalImplausibilityThresh){
 8003156:	4b12      	ldr	r3, [pc, #72]	@ (80031a0 <accelerationImplausability+0x70>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b0a      	cmp	r3, #10
 800315c:	d908      	bls.n	8003170 <accelerationImplausability+0x40>
		pedalImplausibilityBool = 1;
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <accelerationImplausability+0x74>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
		accelerationImplausibilityTimer = HAL_GetTick();
 8003164:	f000 feec 	bl	8003f40 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <accelerationImplausability+0x78>)
 800316c:	601a      	str	r2, [r3, #0]
	}
	//If belows threshold and 500 milliseconds have passed reset implausibility
	else if (pedalImplausibilityBool && (HAL_GetTick() - accelerationImplausibilityTimer > 500)){
		pedalImplausibilityBool = 0;
	}
}
 800316e:	e010      	b.n	8003192 <accelerationImplausability+0x62>
	else if (pedalImplausibilityBool && (HAL_GetTick() - accelerationImplausibilityTimer > 500)){
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <accelerationImplausability+0x74>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00c      	beq.n	8003192 <accelerationImplausability+0x62>
 8003178:	f000 fee2 	bl	8003f40 <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <accelerationImplausability+0x78>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	23fa      	movs	r3, #250	@ 0xfa
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	429a      	cmp	r2, r3
 800318a:	d902      	bls.n	8003192 <accelerationImplausability+0x62>
		pedalImplausibilityBool = 0;
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <accelerationImplausability+0x74>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	2000025f 	.word	0x2000025f
 800319c:	20000260 	.word	0x20000260
 80031a0:	20000261 	.word	0x20000261
 80031a4:	20000258 	.word	0x20000258
 80031a8:	20000264 	.word	0x20000264

080031ac <brakeImplausibility>:

/* Checks for brake pedal implausibility
 * This is when the the brake pedal is on while the acceleration pedal is pressed past 5 percent
 * Automatically resets if (the readings fall back within threshold OR brake is off) and 500 milliseconds have passed*/
void brakeImplausibility(){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	//Brakes applied with acceleration past threshold(5%)
	if(brakeBtn && accelAvgPercentage >= 5){
 80031b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003230 <brakeImplausibility+0x84>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <brakeImplausibility+0x26>
 80031b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <brakeImplausibility+0x88>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d908      	bls.n	80031d2 <brakeImplausibility+0x26>
		brakeImplausibilityBool = 1;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <brakeImplausibility+0x8c>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		brakeImplausibilityTimer = HAL_GetTick();
 80031c6:	f000 febb 	bl	8003f40 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <brakeImplausibility+0x90>)
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e02b      	b.n	800322a <brakeImplausibility+0x7e>
	}
	//Back within threshold(%5)
	else if (brakeImplausibilityBool && (HAL_GetTick() - brakeImplausibilityTimer > 500) && (accelAvgPercentage < 5)){
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <brakeImplausibility+0x8c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <brakeImplausibility+0x52>
 80031da:	f000 feb1 	bl	8003f40 <HAL_GetTick>
 80031de:	0002      	movs	r2, r0
 80031e0:	4b16      	ldr	r3, [pc, #88]	@ (800323c <brakeImplausibility+0x90>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	23fa      	movs	r3, #250	@ 0xfa
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d907      	bls.n	80031fe <brakeImplausibility+0x52>
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <brakeImplausibility+0x88>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d803      	bhi.n	80031fe <brakeImplausibility+0x52>
		brakeImplausibilityBool = 0;
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <brakeImplausibility+0x8c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e015      	b.n	800322a <brakeImplausibility+0x7e>
	}
	//Brakes no longer applied
	else if(brakeImplausibilityBool && !brakeBtn && (HAL_GetTick() - brakeImplausibilityTimer > 500)){
 80031fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <brakeImplausibility+0x8c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <brakeImplausibility+0x7e>
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <brakeImplausibility+0x84>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <brakeImplausibility+0x7e>
 800320e:	f000 fe97 	bl	8003f40 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <brakeImplausibility+0x90>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	23fa      	movs	r3, #250	@ 0xfa
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	429a      	cmp	r2, r3
 8003220:	d903      	bls.n	800322a <brakeImplausibility+0x7e>
		brakeImplausibilityBool = 0;
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <brakeImplausibility+0x8c>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
	}
}
 8003228:	e7ff      	b.n	800322a <brakeImplausibility+0x7e>
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000255 	.word	0x20000255
 8003234:	20000262 	.word	0x20000262
 8003238:	20000259 	.word	0x20000259
 800323c:	20000268 	.word	0x20000268

08003240 <SendFDCANData>:
 * TxData[0] = var1; -> implausibility bool
 * TxData[1] = var2; -> acceleration pedal percentage
 * Can be in one of two modes:
   	 * Testing: Use FDCAN_MODE_INTERNAL_LOOPBACK
 	 * Running: Change back to normal mode*/
void SendFDCANData(uint8_t var1, uint8_t var2) {
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b08e      	sub	sp, #56	@ 0x38
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	701a      	strb	r2, [r3, #0]
 800324c:	1dbb      	adds	r3, r7, #6
 800324e:	1c0a      	adds	r2, r1, #0
 8003250:	701a      	strb	r2, [r3, #0]
	//Build the data array
    //2 bytes: 2 x (uint8_t)
    uint8_t TxData[2];
    TxData[0] = var1;
 8003252:	2530      	movs	r5, #48	@ 0x30
 8003254:	197b      	adds	r3, r7, r5
 8003256:	1dfa      	adds	r2, r7, #7
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	701a      	strb	r2, [r3, #0]
    TxData[1] = var2;
 800325c:	197b      	adds	r3, r7, r5
 800325e:	1dba      	adds	r2, r7, #6
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	705a      	strb	r2, [r3, #1]

    //Configure FDCAN Tx Header
    FDCAN_TxHeaderTypeDef TxHeader;
    TxHeader.Identifier = CANId;
 8003264:	4b3e      	ldr	r3, [pc, #248]	@ (8003360 <SendFDCANData+0x120>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	001a      	movs	r2, r3
 800326a:	240c      	movs	r4, #12
 800326c:	193b      	adds	r3, r7, r4
 800326e:	601a      	str	r2, [r3, #0]
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8003270:	193b      	adds	r3, r7, r4
 8003272:	2200      	movs	r2, #0
 8003274:	605a      	str	r2, [r3, #4]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8003276:	193b      	adds	r3, r7, r4
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
    TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 800327c:	193b      	adds	r3, r7, r4
 800327e:	2202      	movs	r2, #2
 8003280:	60da      	str	r2, [r3, #12]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8003282:	193b      	adds	r3, r7, r4
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
    TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8003288:	193b      	adds	r3, r7, r4
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
    TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800328e:	193b      	adds	r3, r7, r4
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8003294:	193b      	adds	r3, r7, r4
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
    TxHeader.MessageMarker = 0;
 800329a:	193b      	adds	r3, r7, r4
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]

    //Check that the tx is free to send the message
    uint32_t txFreeLevel;
    txFreeLevel = HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1);
 80032a0:	4b30      	ldr	r3, [pc, #192]	@ (8003364 <SendFDCANData+0x124>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f002 fc16 	bl	8005ad4 <HAL_FDCAN_GetTxFifoFreeLevel>
 80032a8:	0003      	movs	r3, r0
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (txFreeLevel > 0) {
 80032ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03d      	beq.n	800332e <SendFDCANData+0xee>

    	//Transmit CAN message and check if error occurred
        if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
 80032b2:	197a      	adds	r2, r7, r5
 80032b4:	1939      	adds	r1, r7, r4
 80032b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003364 <SendFDCANData+0x124>)
 80032b8:	0018      	movs	r0, r3
 80032ba:	f002 fa9b 	bl	80057f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d01c      	beq.n	80032fc <SendFDCANData+0xbc>
            msgSz = snprintf(msgBuff, buffSz, "Failed to send CAN MSG: %d \r\n", CANErrorMsgCnt);
 80032c2:	4b29      	ldr	r3, [pc, #164]	@ (8003368 <SendFDCANData+0x128>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	0019      	movs	r1, r3
 80032c8:	4b28      	ldr	r3, [pc, #160]	@ (800336c <SendFDCANData+0x12c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <SendFDCANData+0x130>)
 80032ce:	4829      	ldr	r0, [pc, #164]	@ (8003374 <SendFDCANData+0x134>)
 80032d0:	f004 feb0 	bl	8008034 <sniprintf>
 80032d4:	0003      	movs	r3, r0
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	4b27      	ldr	r3, [pc, #156]	@ (8003378 <SendFDCANData+0x138>)
 80032da:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 80032dc:	4b26      	ldr	r3, [pc, #152]	@ (8003378 <SendFDCANData+0x138>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	001a      	movs	r2, r3
 80032e2:	2301      	movs	r3, #1
 80032e4:	425b      	negs	r3, r3
 80032e6:	4923      	ldr	r1, [pc, #140]	@ (8003374 <SendFDCANData+0x134>)
 80032e8:	4824      	ldr	r0, [pc, #144]	@ (800337c <SendFDCANData+0x13c>)
 80032ea:	f003 ff5b 	bl	80071a4 <HAL_UART_Transmit>
            CANErrorMsgCnt++;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <SendFDCANData+0x12c>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <SendFDCANData+0x12c>)
 80032f8:	701a      	strb	r2, [r3, #0]
    //Tx is not free, FIFO is full -> send error message
    else {
        msgSz = snprintf(msgBuff, buffSz, "Tx FIFO full, cannot send message\r\n");
        HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
    }
}
 80032fa:	e02d      	b.n	8003358 <SendFDCANData+0x118>
            CANErrorMsgCnt = 0;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <SendFDCANData+0x12c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
            msgSz = snprintf(msgBuff, buffSz, "Sent CAN MSG\r\n");
 8003302:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <SendFDCANData+0x128>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	0019      	movs	r1, r3
 8003308:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <SendFDCANData+0x140>)
 800330a:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <SendFDCANData+0x134>)
 800330c:	0018      	movs	r0, r3
 800330e:	f004 fe91 	bl	8008034 <sniprintf>
 8003312:	0003      	movs	r3, r0
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b18      	ldr	r3, [pc, #96]	@ (8003378 <SendFDCANData+0x138>)
 8003318:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 800331a:	4b17      	ldr	r3, [pc, #92]	@ (8003378 <SendFDCANData+0x138>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	001a      	movs	r2, r3
 8003320:	2301      	movs	r3, #1
 8003322:	425b      	negs	r3, r3
 8003324:	4913      	ldr	r1, [pc, #76]	@ (8003374 <SendFDCANData+0x134>)
 8003326:	4815      	ldr	r0, [pc, #84]	@ (800337c <SendFDCANData+0x13c>)
 8003328:	f003 ff3c 	bl	80071a4 <HAL_UART_Transmit>
}
 800332c:	e014      	b.n	8003358 <SendFDCANData+0x118>
        msgSz = snprintf(msgBuff, buffSz, "Tx FIFO full, cannot send message\r\n");
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <SendFDCANData+0x128>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	0019      	movs	r1, r3
 8003334:	4a13      	ldr	r2, [pc, #76]	@ (8003384 <SendFDCANData+0x144>)
 8003336:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <SendFDCANData+0x134>)
 8003338:	0018      	movs	r0, r3
 800333a:	f004 fe7b 	bl	8008034 <sniprintf>
 800333e:	0003      	movs	r3, r0
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <SendFDCANData+0x138>)
 8003344:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8003346:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <SendFDCANData+0x138>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	001a      	movs	r2, r3
 800334c:	2301      	movs	r3, #1
 800334e:	425b      	negs	r3, r3
 8003350:	4908      	ldr	r1, [pc, #32]	@ (8003374 <SendFDCANData+0x134>)
 8003352:	480a      	ldr	r0, [pc, #40]	@ (800337c <SendFDCANData+0x13c>)
 8003354:	f003 ff26 	bl	80071a4 <HAL_UART_Transmit>
}
 8003358:	46c0      	nop			@ (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b00e      	add	sp, #56	@ 0x38
 800335e:	bdb0      	pop	{r4, r5, r7, pc}
 8003360:	20000012 	.word	0x20000012
 8003364:	20000154 	.word	0x20000154
 8003368:	20000014 	.word	0x20000014
 800336c:	2000026c 	.word	0x2000026c
 8003370:	08008ae0 	.word	0x08008ae0
 8003374:	20000270 	.word	0x20000270
 8003378:	200002c0 	.word	0x200002c0
 800337c:	200001b8 	.word	0x200001b8
 8003380:	08008b00 	.word	0x08008b00
 8003384:	08008b10 	.word	0x08008b10

08003388 <Receive_FDCAN_Message>:

/*Used for debugging with CAN on internal loop back mode to read our own CAN messages*/
void Receive_FDCAN_Message(void) {
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b091      	sub	sp, #68	@ 0x44
 800338c:	af02      	add	r7, sp, #8
    FDCAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[2];

    //Get the current tick time to track how long we wait for CAN message to be available
    uint32_t timeWaiting = HAL_GetTick();
 800338e:	f000 fdd7 	bl	8003f40 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34

    //Wait for a new CAN message or until 3 seconds pass
    while ((HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) == 0) && (HAL_GetTick()-timeWaiting < 3000));
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	4b35      	ldr	r3, [pc, #212]	@ (8003470 <Receive_FDCAN_Message+0xe8>)
 800339a:	2140      	movs	r1, #64	@ 0x40
 800339c:	0018      	movs	r0, r3
 800339e:	f002 fb7d 	bl	8005a9c <HAL_FDCAN_GetRxFifoFillLevel>
 80033a2:	1e03      	subs	r3, r0, #0
 80033a4:	d107      	bne.n	80033b6 <Receive_FDCAN_Message+0x2e>
 80033a6:	f000 fdcb 	bl	8003f40 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <Receive_FDCAN_Message+0xec>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d9f0      	bls.n	8003398 <Receive_FDCAN_Message+0x10>

    //Get the message and parse it
    if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	2208      	movs	r2, #8
 80033ba:	18ba      	adds	r2, r7, r2
 80033bc:	482c      	ldr	r0, [pc, #176]	@ (8003470 <Receive_FDCAN_Message+0xe8>)
 80033be:	2140      	movs	r1, #64	@ 0x40
 80033c0:	f002 fa5e 	bl	8005880 <HAL_FDCAN_GetRxMessage>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d13a      	bne.n	800343e <Receive_FDCAN_Message+0xb6>
        uint8_t receivedImplausibility = RxData[0];
 80033c8:	2533      	movs	r5, #51	@ 0x33
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	1d3a      	adds	r2, r7, #4
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
        uint8_t receivedPercentage = RxData[1];
 80033d2:	2632      	movs	r6, #50	@ 0x32
 80033d4:	19bb      	adds	r3, r7, r6
 80033d6:	1d3a      	adds	r2, r7, #4
 80033d8:	7852      	ldrb	r2, [r2, #1]
 80033da:	701a      	strb	r2, [r3, #0]

        msgSz = snprintf(msgBuff, buffSz, "Received CAN: Implausibility");
 80033dc:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <Receive_FDCAN_Message+0xf0>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	0019      	movs	r1, r3
 80033e2:	4a26      	ldr	r2, [pc, #152]	@ (800347c <Receive_FDCAN_Message+0xf4>)
 80033e4:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 80033e6:	0018      	movs	r0, r3
 80033e8:	f004 fe24 	bl	8008034 <sniprintf>
 80033ec:	0003      	movs	r3, r0
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 80033f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 80033f4:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	001a      	movs	r2, r3
 80033fa:	2301      	movs	r3, #1
 80033fc:	425b      	negs	r3, r3
 80033fe:	4920      	ldr	r1, [pc, #128]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 8003400:	4821      	ldr	r0, [pc, #132]	@ (8003488 <Receive_FDCAN_Message+0x100>)
 8003402:	f003 fecf 	bl	80071a4 <HAL_UART_Transmit>
		msgSz = snprintf(msgBuff, buffSz, ": %d, Percentage: %d\n\n\r\n", receivedImplausibility, receivedPercentage);
 8003406:	4b1c      	ldr	r3, [pc, #112]	@ (8003478 <Receive_FDCAN_Message+0xf0>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	001c      	movs	r4, r3
 800340c:	197b      	adds	r3, r7, r5
 800340e:	7819      	ldrb	r1, [r3, #0]
 8003410:	19bb      	adds	r3, r7, r6
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <Receive_FDCAN_Message+0x104>)
 8003416:	481a      	ldr	r0, [pc, #104]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	000b      	movs	r3, r1
 800341c:	0021      	movs	r1, r4
 800341e:	f004 fe09 	bl	8008034 <sniprintf>
 8003422:	0003      	movs	r3, r0
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b17      	ldr	r3, [pc, #92]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 8003428:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	2301      	movs	r3, #1
 8003432:	425b      	negs	r3, r3
 8003434:	4912      	ldr	r1, [pc, #72]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 8003436:	4814      	ldr	r0, [pc, #80]	@ (8003488 <Receive_FDCAN_Message+0x100>)
 8003438:	f003 feb4 	bl	80071a4 <HAL_UART_Transmit>
    //Failed to receive message and send error message
    else {
    	msgSz = snprintf(msgBuff, buffSz, "Failed to read CAN MSG\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
    }
}
 800343c:	e014      	b.n	8003468 <Receive_FDCAN_Message+0xe0>
    	msgSz = snprintf(msgBuff, buffSz, "Failed to read CAN MSG\r\n");
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <Receive_FDCAN_Message+0xf0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	0019      	movs	r1, r3
 8003444:	4a12      	ldr	r2, [pc, #72]	@ (8003490 <Receive_FDCAN_Message+0x108>)
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 8003448:	0018      	movs	r0, r3
 800344a:	f004 fdf3 	bl	8008034 <sniprintf>
 800344e:	0003      	movs	r3, r0
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 8003454:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8003456:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <Receive_FDCAN_Message+0xfc>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	001a      	movs	r2, r3
 800345c:	2301      	movs	r3, #1
 800345e:	425b      	negs	r3, r3
 8003460:	4907      	ldr	r1, [pc, #28]	@ (8003480 <Receive_FDCAN_Message+0xf8>)
 8003462:	4809      	ldr	r0, [pc, #36]	@ (8003488 <Receive_FDCAN_Message+0x100>)
 8003464:	f003 fe9e 	bl	80071a4 <HAL_UART_Transmit>
}
 8003468:	46c0      	nop			@ (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	b00f      	add	sp, #60	@ 0x3c
 800346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003470:	20000154 	.word	0x20000154
 8003474:	00000bb7 	.word	0x00000bb7
 8003478:	20000014 	.word	0x20000014
 800347c:	08008b34 	.word	0x08008b34
 8003480:	20000270 	.word	0x20000270
 8003484:	200002c0 	.word	0x200002c0
 8003488:	200001b8 	.word	0x200001b8
 800348c:	08008b54 	.word	0x08008b54
 8003490:	08008b70 	.word	0x08008b70

08003494 <checkCANErrors>:

/*Checks for CAN errors
 * Resets the FDCAN peripheral if an error exists
 * Checks if the CAN Bus is active*/
void checkCANErrors(){
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af02      	add	r7, sp, #8
	uint32_t errorStatus = HAL_FDCAN_GetError(&hfdcan1);
 800349a:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <checkCANErrors+0x9c>)
 800349c:	0018      	movs	r0, r3
 800349e:	f002 fb29 	bl	8005af4 <HAL_FDCAN_GetError>
 80034a2:	0003      	movs	r3, r0
 80034a4:	607b      	str	r3, [r7, #4]

	//Check for the FDCAN peripheral error
	if (errorStatus != 0) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d021      	beq.n	80034f0 <checkCANErrors+0x5c>
	    msgSz = snprintf(msgBuff, buffSz, "FDCAN Error: 0x%08lX  %d\r\n", errorStatus, msgCnt);
 80034ac:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <checkCANErrors+0xa0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	001c      	movs	r4, r3
 80034b2:	4b21      	ldr	r3, [pc, #132]	@ (8003538 <checkCANErrors+0xa4>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a20      	ldr	r2, [pc, #128]	@ (800353c <checkCANErrors+0xa8>)
 80034bc:	4820      	ldr	r0, [pc, #128]	@ (8003540 <checkCANErrors+0xac>)
 80034be:	9100      	str	r1, [sp, #0]
 80034c0:	0021      	movs	r1, r4
 80034c2:	f004 fdb7 	bl	8008034 <sniprintf>
 80034c6:	0003      	movs	r3, r0
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <checkCANErrors+0xb0>)
 80034cc:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 80034ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <checkCANErrors+0xb0>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	001a      	movs	r2, r3
 80034d4:	2301      	movs	r3, #1
 80034d6:	425b      	negs	r3, r3
 80034d8:	4919      	ldr	r1, [pc, #100]	@ (8003540 <checkCANErrors+0xac>)
 80034da:	481b      	ldr	r0, [pc, #108]	@ (8003548 <checkCANErrors+0xb4>)
 80034dc:	f003 fe62 	bl	80071a4 <HAL_UART_Transmit>

	    //Deinitialize and Reinitialize the FDCAN peripheral
	    HAL_FDCAN_DeInit(&hfdcan1);
 80034e0:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <checkCANErrors+0x9c>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f002 f8ce 	bl	8005684 <HAL_FDCAN_DeInit>
	    HAL_FDCAN_Init(&hfdcan1);
 80034e8:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <checkCANErrors+0x9c>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f001 ff64 	bl	80053b8 <HAL_FDCAN_Init>
	}

	//Check if the CAN BUS is in the off state
	if (__HAL_FDCAN_GET_FLAG(&hfdcan1, FDCAN_FLAG_BUS_OFF)) {
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <checkCANErrors+0x9c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	031b      	lsls	r3, r3, #12
 80034fa:	4013      	ands	r3, r2
 80034fc:	d014      	beq.n	8003528 <checkCANErrors+0x94>
	    msgSz = snprintf(msgBuff, buffSz, "FDCAN Bus Off state!\r\n");
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <checkCANErrors+0xa0>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	0019      	movs	r1, r3
 8003504:	4a11      	ldr	r2, [pc, #68]	@ (800354c <checkCANErrors+0xb8>)
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <checkCANErrors+0xac>)
 8003508:	0018      	movs	r0, r3
 800350a:	f004 fd93 	bl	8008034 <sniprintf>
 800350e:	0003      	movs	r3, r0
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <checkCANErrors+0xb0>)
 8003514:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Transmit(&huart2, (uint8_t*)msgBuff, msgSz, HAL_MAX_DELAY);
 8003516:	4b0b      	ldr	r3, [pc, #44]	@ (8003544 <checkCANErrors+0xb0>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	001a      	movs	r2, r3
 800351c:	2301      	movs	r3, #1
 800351e:	425b      	negs	r3, r3
 8003520:	4907      	ldr	r1, [pc, #28]	@ (8003540 <checkCANErrors+0xac>)
 8003522:	4809      	ldr	r0, [pc, #36]	@ (8003548 <checkCANErrors+0xb4>)
 8003524:	f003 fe3e 	bl	80071a4 <HAL_UART_Transmit>
	}
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b003      	add	sp, #12
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	20000154 	.word	0x20000154
 8003534:	20000014 	.word	0x20000014
 8003538:	2000026d 	.word	0x2000026d
 800353c:	08008b8c 	.word	0x08008b8c
 8003540:	20000270 	.word	0x20000270
 8003544:	200002c0 	.word	0x200002c0
 8003548:	200001b8 	.word	0x200001b8
 800354c:	08008ba8 	.word	0x08008ba8

08003550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003554:	f000 fc78 	bl	8003e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003558:	f000 f85a 	bl	8003610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800355c:	f000 f9da 	bl	8003914 <MX_GPIO_Init>
  MX_DMA_Init();
 8003560:	f000 f9ba 	bl	80038d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003564:	f000 f96a 	bl	800383c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003568:	f000 f89a 	bl	80036a0 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800356c:	f000 f91e 	bl	80037ac <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  //Start the FDCAN to be able to start communication
  HAL_FDCAN_Start(&hfdcan1);
 8003570:	4b1f      	ldr	r3, [pc, #124]	@ (80035f0 <main+0xa0>)
 8003572:	0018      	movs	r0, r3
 8003574:	f002 f8ab 	bl	80056ce <HAL_FDCAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  readInputs();
 8003578:	f7ff f998 	bl	80028ac <readInputs>
	  updateBounds();
 800357c:	f7ff fbaa 	bl	8002cd4 <updateBounds>
	  calculateMaxMinThresholds();
 8003580:	f7ff fc44 	bl	8002e0c <calculateMaxMinThresholds>
	  convertToPercentages();
 8003584:	f7ff fd36 	bl	8002ff4 <convertToPercentages>
	  accelerationImplausability();
 8003588:	f7ff fdd2 	bl	8003130 <accelerationImplausability>
	  brakeImplausibility();
 800358c:	f7ff fe0e 	bl	80031ac <brakeImplausibility>

	  //If implausibility is true or testing/calibration mode is on then sent CAN 0
	  if(!calibrationModeBool && !pedalImplausibilityBool && !brakeImplausibilityBool && !testingModeBool){
 8003590:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <main+0xa4>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d113      	bne.n	80035c0 <main+0x70>
 8003598:	4b17      	ldr	r3, [pc, #92]	@ (80035f8 <main+0xa8>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <main+0x70>
 80035a0:	4b16      	ldr	r3, [pc, #88]	@ (80035fc <main+0xac>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <main+0x70>
 80035a8:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <main+0xb0>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <main+0x70>
		  implausibility = 0;
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <main+0xb4>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
		  accelCANPercentage = accelAvgPercentage;
 80035b6:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <main+0xb8>)
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4b14      	ldr	r3, [pc, #80]	@ (800360c <main+0xbc>)
 80035bc:	701a      	strb	r2, [r3, #0]
 80035be:	e005      	b.n	80035cc <main+0x7c>
	  }
	  else{
		  accelCANPercentage = 0;
 80035c0:	4b12      	ldr	r3, [pc, #72]	@ (800360c <main+0xbc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	701a      	strb	r2, [r3, #0]
		  implausibility = 1;
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <main+0xb4>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
	  }

	  printValues(); //For testing/debugging
 80035cc:	f7ff f9c2 	bl	8002954 <printValues>

	  //Must be in FDCAN_MODE_INTERNAL_LOOPBACK for testing & normal mode for actual use
	  SendFDCANData(implausibility, accelCANPercentage);
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <main+0xb4>)
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <main+0xbc>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	0019      	movs	r1, r3
 80035da:	0010      	movs	r0, r2
 80035dc:	f7ff fe30 	bl	8003240 <SendFDCANData>
	  checkCANErrors();
 80035e0:	f7ff ff58 	bl	8003494 <checkCANErrors>
	  Receive_FDCAN_Message(); //For testing/debugging
 80035e4:	f7ff fed0 	bl	8003388 <Receive_FDCAN_Message>

	  HAL_Delay(100); //For testing/debugging
 80035e8:	2064      	movs	r0, #100	@ 0x64
 80035ea:	f000 fcb3 	bl	8003f54 <HAL_Delay>
	  readInputs();
 80035ee:	e7c3      	b.n	8003578 <main+0x28>
 80035f0:	20000154 	.word	0x20000154
 80035f4:	20000000 	.word	0x20000000
 80035f8:	20000258 	.word	0x20000258
 80035fc:	20000259 	.word	0x20000259
 8003600:	20000257 	.word	0x20000257
 8003604:	2000025a 	.word	0x2000025a
 8003608:	20000262 	.word	0x20000262
 800360c:	20000263 	.word	0x20000263

08003610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b095      	sub	sp, #84	@ 0x54
 8003614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003616:	2414      	movs	r4, #20
 8003618:	193b      	adds	r3, r7, r4
 800361a:	0018      	movs	r0, r3
 800361c:	233c      	movs	r3, #60	@ 0x3c
 800361e:	001a      	movs	r2, r3
 8003620:	2100      	movs	r1, #0
 8003622:	f004 fd3b 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	0018      	movs	r0, r3
 800362a:	2310      	movs	r3, #16
 800362c:	001a      	movs	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	f004 fd34 	bl	800809c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	0018      	movs	r0, r3
 800363a:	f002 fdcb 	bl	80061d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800363e:	193b      	adds	r3, r7, r4
 8003640:	2202      	movs	r2, #2
 8003642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003644:	193b      	adds	r3, r7, r4
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	0052      	lsls	r2, r2, #1
 800364a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800364c:	193b      	adds	r3, r7, r4
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003652:	193b      	adds	r3, r7, r4
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003658:	193b      	adds	r3, r7, r4
 800365a:	2200      	movs	r2, #0
 800365c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365e:	193b      	adds	r3, r7, r4
 8003660:	0018      	movs	r0, r3
 8003662:	f002 fe03 	bl	800626c <HAL_RCC_OscConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800366a:	f000 f9df 	bl	8003a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800367a:	1d3b      	adds	r3, r7, #4
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	2100      	movs	r1, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f003 f94e 	bl	800692c <HAL_RCC_ClockConfig>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d001      	beq.n	8003698 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003694:	f000 f9ca 	bl	8003a2c <Error_Handler>
  }
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b015      	add	sp, #84	@ 0x54
 800369e:	bd90      	pop	{r4, r7, pc}

080036a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	0018      	movs	r0, r3
 80036aa:	230c      	movs	r3, #12
 80036ac:	001a      	movs	r2, r3
 80036ae:	2100      	movs	r1, #0
 80036b0:	f004 fcf4 	bl	800809c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036b4:	4b3a      	ldr	r3, [pc, #232]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036b6:	4a3b      	ldr	r2, [pc, #236]	@ (80037a4 <MX_ADC1_Init+0x104>)
 80036b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036ba:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	05d2      	lsls	r2, r2, #23
 80036c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036c2:	4b37      	ldr	r3, [pc, #220]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c8:	4b35      	ldr	r3, [pc, #212]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036ce:	4b34      	ldr	r3, [pc, #208]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	0392      	lsls	r2, r2, #14
 80036d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036d6:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036d8:	2204      	movs	r2, #4
 80036da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036dc:	4b30      	ldr	r3, [pc, #192]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036de:	2200      	movs	r2, #0
 80036e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80036e2:	4b2f      	ldr	r3, [pc, #188]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80036ee:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036f0:	2202      	movs	r2, #2
 80036f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036f4:	4b2a      	ldr	r3, [pc, #168]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036f6:	2220      	movs	r2, #32
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036fc:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <MX_ADC1_Init+0x100>)
 80036fe:	2200      	movs	r2, #0
 8003700:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003702:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003704:	2200      	movs	r2, #0
 8003706:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <MX_ADC1_Init+0x100>)
 800370a:	222c      	movs	r2, #44	@ 0x2c
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003710:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003716:	4b22      	ldr	r3, [pc, #136]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003718:	2200      	movs	r2, #0
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800371c:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <MX_ADC1_Init+0x100>)
 800371e:	2200      	movs	r2, #0
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8003722:	4b1f      	ldr	r3, [pc, #124]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003724:	223c      	movs	r2, #60	@ 0x3c
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 800372a:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <MX_ADC1_Init+0x100>)
 800372c:	2214      	movs	r2, #20
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8003730:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003732:	22c0      	movs	r2, #192	@ 0xc0
 8003734:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003736:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003738:	2200      	movs	r2, #0
 800373a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <MX_ADC1_Init+0x100>)
 800373e:	2200      	movs	r2, #0
 8003740:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003742:	4b17      	ldr	r3, [pc, #92]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003744:	0018      	movs	r0, r3
 8003746:	f000 fd87 	bl	8004258 <HAL_ADC_Init>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d001      	beq.n	8003752 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800374e:	f000 f96d 	bl	8003a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003764:	1d3a      	adds	r2, r7, #4
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003768:	0011      	movs	r1, r2
 800376a:	0018      	movs	r0, r3
 800376c:	f000 ffba 	bl	80046e4 <HAL_ADC_ConfigChannel>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d001      	beq.n	8003778 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003774:	f000 f95a 	bl	8003a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <MX_ADC1_Init+0x108>)
 800377c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2204      	movs	r2, #4
 8003782:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003784:	1d3a      	adds	r2, r7, #4
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <MX_ADC1_Init+0x100>)
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 ffaa 	bl	80046e4 <HAL_ADC_ConfigChannel>
 8003790:	1e03      	subs	r3, r0, #0
 8003792:	d001      	beq.n	8003798 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8003794:	f000 f94a 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000090 	.word	0x20000090
 80037a4:	40012400 	.word	0x40012400
 80037a8:	04000002 	.word	0x04000002

080037ac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037b2:	4a21      	ldr	r2, [pc, #132]	@ (8003838 <MX_FDCAN1_Init+0x8c>)
 80037b4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80037b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80037bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80037c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037c4:	2203      	movs	r2, #3
 80037c6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80037ce:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80037d4:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037dc:	2210      	movs	r2, #16
 80037de:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80037e6:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037ee:	2202      	movs	r2, #2
 80037f0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80037f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 8003800:	2201      	movs	r2, #1
 8003802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 8003806:	2201      	movs	r2, #1
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 800380c:	2200      	movs	r2, #0
 800380e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 8003812:	2200      	movs	r2, #0
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 8003818:	2200      	movs	r2, #0
 800381a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <MX_FDCAN1_Init+0x88>)
 800381e:	0018      	movs	r0, r3
 8003820:	f001 fdca 	bl	80053b8 <HAL_FDCAN_Init>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8003828:	f000 f900 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000154 	.word	0x20000154
 8003838:	40006400 	.word	0x40006400

0800383c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003840:	4b23      	ldr	r3, [pc, #140]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003842:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <MX_USART2_UART_Init+0x98>)
 8003844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003846:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003848:	22e1      	movs	r2, #225	@ 0xe1
 800384a:	0252      	lsls	r2, r2, #9
 800384c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800385a:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003860:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003862:	220c      	movs	r2, #12
 8003864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003866:	4b1a      	ldr	r3, [pc, #104]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800386c:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 800386e:	2200      	movs	r2, #0
 8003870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003872:	4b17      	ldr	r3, [pc, #92]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003874:	2200      	movs	r2, #0
 8003876:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003878:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 800387a:	2200      	movs	r2, #0
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800387e:	4b14      	ldr	r3, [pc, #80]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003880:	2200      	movs	r2, #0
 8003882:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003884:	4b12      	ldr	r3, [pc, #72]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003886:	0018      	movs	r0, r3
 8003888:	f003 fc36 	bl	80070f8 <HAL_UART_Init>
 800388c:	1e03      	subs	r3, r0, #0
 800388e:	d001      	beq.n	8003894 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003890:	f000 f8cc 	bl	8003a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003894:	4b0e      	ldr	r3, [pc, #56]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 8003896:	2100      	movs	r1, #0
 8003898:	0018      	movs	r0, r3
 800389a:	f004 faeb 	bl	8007e74 <HAL_UARTEx_SetTxFifoThreshold>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80038a2:	f000 f8c3 	bl	8003a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038a6:	4b0a      	ldr	r3, [pc, #40]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 80038a8:	2100      	movs	r1, #0
 80038aa:	0018      	movs	r0, r3
 80038ac:	f004 fb22 	bl	8007ef4 <HAL_UARTEx_SetRxFifoThreshold>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80038b4:	f000 f8ba 	bl	8003a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80038b8:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <MX_USART2_UART_Init+0x94>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f004 faa0 	bl	8007e00 <HAL_UARTEx_DisableFifoMode>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d001      	beq.n	80038c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80038c4:	f000 f8b2 	bl	8003a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	200001b8 	.word	0x200001b8
 80038d4:	40004400 	.word	0x40004400

080038d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <MX_DMA_Init+0x38>)
 80038e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <MX_DMA_Init+0x38>)
 80038e4:	2101      	movs	r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ea:	4b09      	ldr	r3, [pc, #36]	@ (8003910 <MX_DMA_Init+0x38>)
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	2201      	movs	r2, #1
 80038f0:	4013      	ands	r3, r2
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2100      	movs	r1, #0
 80038fa:	2009      	movs	r0, #9
 80038fc:	f001 fa8a 	bl	8004e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003900:	2009      	movs	r0, #9
 8003902:	f001 fa9c 	bl	8004e3e <HAL_NVIC_EnableIRQ>

}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	40021000 	.word	0x40021000

08003914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b08b      	sub	sp, #44	@ 0x2c
 8003918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391a:	2414      	movs	r4, #20
 800391c:	193b      	adds	r3, r7, r4
 800391e:	0018      	movs	r0, r3
 8003920:	2314      	movs	r3, #20
 8003922:	001a      	movs	r2, r3
 8003924:	2100      	movs	r1, #0
 8003926:	f004 fbb9 	bl	800809c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392a:	4b36      	ldr	r3, [pc, #216]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 800392c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800392e:	4b35      	ldr	r3, [pc, #212]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003930:	2104      	movs	r1, #4
 8003932:	430a      	orrs	r2, r1
 8003934:	635a      	str	r2, [r3, #52]	@ 0x34
 8003936:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003942:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003946:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003948:	2120      	movs	r1, #32
 800394a:	430a      	orrs	r2, r1
 800394c:	635a      	str	r2, [r3, #52]	@ 0x34
 800394e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	2220      	movs	r2, #32
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800395a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003960:	2101      	movs	r1, #1
 8003962:	430a      	orrs	r2, r1
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
 8003966:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396a:	2201      	movs	r2, #1
 800396c:	4013      	ands	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	4b24      	ldr	r3, [pc, #144]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003978:	2102      	movs	r1, #2
 800397a:	430a      	orrs	r2, r1
 800397c:	635a      	str	r2, [r3, #52]	@ 0x34
 800397e:	4b21      	ldr	r3, [pc, #132]	@ (8003a04 <MX_GPIO_Init+0xf0>)
 8003980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003982:	2202      	movs	r2, #2
 8003984:	4013      	ands	r3, r2
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800398a:	23a0      	movs	r3, #160	@ 0xa0
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	2200      	movs	r2, #0
 8003990:	2120      	movs	r1, #32
 8003992:	0018      	movs	r0, r3
 8003994:	f002 fc01 	bl	800619a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 8003998:	193b      	adds	r3, r7, r4
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	0192      	lsls	r2, r2, #6
 800399e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a0:	193b      	adds	r3, r7, r4
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	4a16      	ldr	r2, [pc, #88]	@ (8003a08 <MX_GPIO_Init+0xf4>)
 80039b0:	0019      	movs	r1, r3
 80039b2:	0010      	movs	r0, r2
 80039b4:	f002 f990 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	2220      	movs	r2, #32
 80039bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	2201      	movs	r2, #1
 80039c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ca:	193b      	adds	r3, r7, r4
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d0:	193a      	adds	r2, r7, r4
 80039d2:	23a0      	movs	r3, #160	@ 0xa0
 80039d4:	05db      	lsls	r3, r3, #23
 80039d6:	0011      	movs	r1, r2
 80039d8:	0018      	movs	r0, r3
 80039da:	f002 f97d 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn2_Pin Btn1_Pin */
  GPIO_InitStruct.Pin = Btn2_Pin|Btn1_Pin;
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	2230      	movs	r2, #48	@ 0x30
 80039e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	2200      	movs	r2, #0
 80039e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f0:	193b      	adds	r3, r7, r4
 80039f2:	4a06      	ldr	r2, [pc, #24]	@ (8003a0c <MX_GPIO_Init+0xf8>)
 80039f4:	0019      	movs	r1, r3
 80039f6:	0010      	movs	r0, r2
 80039f8:	f002 f96e 	bl	8005cd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b00b      	add	sp, #44	@ 0x2c
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	50000800 	.word	0x50000800
 8003a0c:	50000400 	.word	0x50000400

08003a10 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

	adcConvComp = 1;
 8003a18:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <HAL_ADC_ConvCpltCallback+0x18>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

}
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b002      	add	sp, #8
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	20000250 	.word	0x20000250

08003a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a30:	b672      	cpsid	i
}
 8003a32:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a34:	46c0      	nop			@ (mov r8, r8)
 8003a36:	e7fd      	b.n	8003a34 <Error_Handler+0x8>

08003a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a5c:	2180      	movs	r1, #128	@ 0x80
 8003a5e:	0549      	lsls	r1, r1, #21
 8003a60:	430a      	orrs	r2, r1
 8003a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a64:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <HAL_MspInit+0x4c>)
 8003a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a68:	2380      	movs	r3, #128	@ 0x80
 8003a6a:	055b      	lsls	r3, r3, #21
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003a72:	23c0      	movs	r3, #192	@ 0xc0
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fa90 	bl	8003f9c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b002      	add	sp, #8
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b08b      	sub	sp, #44	@ 0x2c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	2414      	movs	r4, #20
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	0018      	movs	r0, r3
 8003a96:	2314      	movs	r3, #20
 8003a98:	001a      	movs	r2, r3
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f004 fafe 	bl	800809c <memset>
  if(hadc->Instance==ADC1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b5c <HAL_ADC_MspInit+0xd4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d154      	bne.n	8003b54 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003aae:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003ab0:	2180      	movs	r1, #128	@ 0x80
 8003ab2:	0349      	lsls	r1, r1, #13
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ab8:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	035b      	lsls	r3, r3, #13
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac6:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aca:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003acc:	2101      	movs	r1, #1
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ad2:	4b23      	ldr	r3, [pc, #140]	@ (8003b60 <HAL_ADC_MspInit+0xd8>)
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	193b      	adds	r3, r7, r4
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	193a      	adds	r2, r7, r4
 8003af2:	23a0      	movs	r3, #160	@ 0xa0
 8003af4:	05db      	lsls	r3, r3, #23
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f002 f8ed 	bl	8005cd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003afe:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_ADC_MspInit+0xe0>)
 8003b02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003b04:	4b17      	ldr	r3, [pc, #92]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b06:	2205      	movs	r2, #5
 8003b08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b10:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b1e:	2280      	movs	r2, #128	@ 0x80
 8003b20:	0052      	lsls	r2, r2, #1
 8003b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	00d2      	lsls	r2, r2, #3
 8003b2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f001 f99c 	bl	8004e78 <HAL_DMA_Init>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003b44:	f7ff ff72 	bl	8003a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_ADC_MspInit+0xdc>)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b00b      	add	sp, #44	@ 0x2c
 8003b5a:	bd90      	pop	{r4, r7, pc}
 8003b5c:	40012400 	.word	0x40012400
 8003b60:	40021000 	.word	0x40021000
 8003b64:	200000f4 	.word	0x200000f4
 8003b68:	40020008 	.word	0x40020008

08003b6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b09d      	sub	sp, #116	@ 0x74
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	235c      	movs	r3, #92	@ 0x5c
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	0018      	movs	r0, r3
 8003b7a:	2314      	movs	r3, #20
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	2100      	movs	r1, #0
 8003b80:	f004 fa8c 	bl	800809c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b84:	2410      	movs	r4, #16
 8003b86:	193b      	adds	r3, r7, r4
 8003b88:	0018      	movs	r0, r3
 8003b8a:	234c      	movs	r3, #76	@ 0x4c
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f004 fa84 	bl	800809c <memset>
  if(hfdcan->Instance==FDCAN1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	@ (8003c24 <HAL_FDCAN_MspInit+0xb8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d13e      	bne.n	8003c1c <HAL_FDCAN_MspInit+0xb0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	0492      	lsls	r2, r2, #18
 8003ba4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	2200      	movs	r2, #0
 8003baa:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f003 f866 	bl	8006c80 <HAL_RCCEx_PeriphCLKConfig>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8003bb8:	f7ff ff38 	bl	8003a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003bc2:	2180      	movs	r1, #128	@ 0x80
 8003bc4:	0149      	lsls	r1, r1, #5
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bca:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	015b      	lsls	r3, r3, #5
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bdc:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003bde:	2104      	movs	r1, #4
 8003be0:	430a      	orrs	r2, r1
 8003be2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003be4:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_FDCAN_MspInit+0xbc>)
 8003be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be8:	2204      	movs	r2, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PC4     ------> FDCAN1_RX
    PC5     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bf0:	215c      	movs	r1, #92	@ 0x5c
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	2230      	movs	r2, #48	@ 0x30
 8003bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c10:	187b      	adds	r3, r7, r1
 8003c12:	4a06      	ldr	r2, [pc, #24]	@ (8003c2c <HAL_FDCAN_MspInit+0xc0>)
 8003c14:	0019      	movs	r1, r3
 8003c16:	0010      	movs	r0, r2
 8003c18:	f002 f85e 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b01d      	add	sp, #116	@ 0x74
 8003c22:	bd90      	pop	{r4, r7, pc}
 8003c24:	40006400 	.word	0x40006400
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	50000800 	.word	0x50000800

08003c30 <HAL_FDCAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspDeInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	@ (8003c60 <HAL_FDCAN_MspDeInit+0x30>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10a      	bne.n	8003c58 <HAL_FDCAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN FDCAN1_MspDeInit 0 */

  /* USER CODE END FDCAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_FDCAN_CLK_DISABLE();
 8003c42:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <HAL_FDCAN_MspDeInit+0x34>)
 8003c44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c46:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <HAL_FDCAN_MspDeInit+0x34>)
 8003c48:	4907      	ldr	r1, [pc, #28]	@ (8003c68 <HAL_FDCAN_MspDeInit+0x38>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**FDCAN1 GPIO Configuration
    PC4     ------> FDCAN1_RX
    PC5     ------> FDCAN1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 8003c4e:	4b07      	ldr	r3, [pc, #28]	@ (8003c6c <HAL_FDCAN_MspDeInit+0x3c>)
 8003c50:	2130      	movs	r1, #48	@ 0x30
 8003c52:	0018      	movs	r0, r3
 8003c54:	f002 f9ac 	bl	8005fb0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN FDCAN1_MspDeInit 1 */

  /* USER CODE END FDCAN1_MspDeInit 1 */
  }

}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b002      	add	sp, #8
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40006400 	.word	0x40006400
 8003c64:	40021000 	.word	0x40021000
 8003c68:	ffffefff 	.word	0xffffefff
 8003c6c:	50000800 	.word	0x50000800

08003c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b09d      	sub	sp, #116	@ 0x74
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	235c      	movs	r3, #92	@ 0x5c
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	2314      	movs	r3, #20
 8003c80:	001a      	movs	r2, r3
 8003c82:	2100      	movs	r1, #0
 8003c84:	f004 fa0a 	bl	800809c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c88:	2410      	movs	r4, #16
 8003c8a:	193b      	adds	r3, r7, r4
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	234c      	movs	r3, #76	@ 0x4c
 8003c90:	001a      	movs	r2, r3
 8003c92:	2100      	movs	r1, #0
 8003c94:	f004 fa02 	bl	800809c <memset>
  if(huart->Instance==USART2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <HAL_UART_MspInit+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d13e      	bne.n	8003d20 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f002 ffe5 	bl	8006c80 <HAL_RCCEx_PeriphCLKConfig>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cba:	f7ff feb7 	bl	8003a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003cc4:	2180      	movs	r1, #128	@ 0x80
 8003cc6:	0289      	lsls	r1, r1, #10
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ccc:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd0:	2380      	movs	r3, #128	@ 0x80
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cda:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cde:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ce6:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_UART_MspInit+0xbc>)
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003cf2:	215c      	movs	r1, #92	@ 0x5c
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfa:	187b      	adds	r3, r7, r1
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2201      	movs	r2, #1
 8003d10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d12:	187a      	adds	r2, r7, r1
 8003d14:	23a0      	movs	r3, #160	@ 0xa0
 8003d16:	05db      	lsls	r3, r3, #23
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f001 ffdc 	bl	8005cd8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b01d      	add	sp, #116	@ 0x74
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	40004400 	.word	0x40004400
 8003d2c:	40021000 	.word	0x40021000

08003d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	e7fd      	b.n	8003d34 <NMI_Handler+0x4>

08003d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	e7fd      	b.n	8003d3c <HardFault_Handler+0x4>

08003d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d58:	f000 f8e0 	bl	8003f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d5c:	46c0      	nop			@ (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d68:	4b03      	ldr	r3, [pc, #12]	@ (8003d78 <DMA1_Channel1_IRQHandler+0x14>)
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f001 f9b6 	bl	80050dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	200000f4 	.word	0x200000f4

08003d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <_sbrk+0x5c>)
 8003d86:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <_sbrk+0x60>)
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <_sbrk+0x64>)
 8003d9a:	4a12      	ldr	r2, [pc, #72]	@ (8003de4 <_sbrk+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d207      	bcs.n	8003dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dac:	f004 f97e 	bl	80080ac <__errno>
 8003db0:	0003      	movs	r3, r0
 8003db2:	220c      	movs	r2, #12
 8003db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003db6:	2301      	movs	r3, #1
 8003db8:	425b      	negs	r3, r3
 8003dba:	e009      	b.n	8003dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dbc:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <_sbrk+0x64>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	18d2      	adds	r2, r2, r3
 8003dca:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <_sbrk+0x64>)
 8003dcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b006      	add	sp, #24
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20024000 	.word	0x20024000
 8003ddc:	00000400 	.word	0x00000400
 8003de0:	200002c4 	.word	0x200002c4
 8003de4:	20000418 	.word	0x20000418

08003de8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003df4:	480d      	ldr	r0, [pc, #52]	@ (8003e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003df8:	f7ff fff6 	bl	8003de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dfc:	480c      	ldr	r0, [pc, #48]	@ (8003e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003dfe:	490d      	ldr	r1, [pc, #52]	@ (8003e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e00:	4a0d      	ldr	r2, [pc, #52]	@ (8003e38 <LoopForever+0xe>)
  movs r3, #0
 8003e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e04:	e002      	b.n	8003e0c <LoopCopyDataInit>

08003e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e0a:	3304      	adds	r3, #4

08003e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e10:	d3f9      	bcc.n	8003e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e12:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e14:	4c0a      	ldr	r4, [pc, #40]	@ (8003e40 <LoopForever+0x16>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e18:	e001      	b.n	8003e1e <LoopFillZerobss>

08003e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e1c:	3204      	adds	r2, #4

08003e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e20:	d3fb      	bcc.n	8003e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e22:	f004 f949 	bl	80080b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e26:	f7ff fb93 	bl	8003550 <main>

08003e2a <LoopForever>:

LoopForever:
  b LoopForever
 8003e2a:	e7fe      	b.n	8003e2a <LoopForever>
  ldr   r0, =_estack
 8003e2c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003e38:	08008d18 	.word	0x08008d18
  ldr r2, =_sbss
 8003e3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003e40:	20000414 	.word	0x20000414

08003e44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e44:	e7fe      	b.n	8003e44 <ADC1_COMP_IRQHandler>
	...

08003e48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_Init+0x3c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_Init+0x3c>)
 8003e5a:	2180      	movs	r1, #128	@ 0x80
 8003e5c:	0049      	lsls	r1, r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 f810 	bl	8003e88 <HAL_InitTick>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e001      	b.n	8003e78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e74:	f7ff fde0 	bl	8003a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	781b      	ldrb	r3, [r3, #0]
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e98:	4b1d      	ldr	r3, [pc, #116]	@ (8003f10 <HAL_InitTick+0x88>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02b      	beq.n	8003ef8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f14 <HAL_InitTick+0x8c>)
 8003ea2:	681c      	ldr	r4, [r3, #0]
 8003ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <HAL_InitTick+0x88>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	23fa      	movs	r3, #250	@ 0xfa
 8003eac:	0098      	lsls	r0, r3, #2
 8003eae:	f7fc f933 	bl	8000118 <__udivsi3>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0020      	movs	r0, r4
 8003eb8:	f7fc f92e 	bl	8000118 <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f000 ffcd 	bl	8004e5e <HAL_SYSTICK_Config>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d112      	bne.n	8003eee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d80a      	bhi.n	8003ee4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 ff9c 	bl	8004e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <HAL_InitTick+0x90>)
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e00d      	b.n	8003f00 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e008      	b.n	8003f00 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003eee:	230f      	movs	r3, #15
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e003      	b.n	8003f00 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	781b      	ldrb	r3, [r3, #0]
}
 8003f06:	0018      	movs	r0, r3
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b005      	add	sp, #20
 8003f0c:	bd90      	pop	{r4, r7, pc}
 8003f0e:	46c0      	nop			@ (mov r8, r8)
 8003f10:	20000020 	.word	0x20000020
 8003f14:	20000018 	.word	0x20000018
 8003f18:	2000001c 	.word	0x2000001c

08003f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <HAL_IncTick+0x1c>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	001a      	movs	r2, r3
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_IncTick+0x20>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	18d2      	adds	r2, r2, r3
 8003f2c:	4b03      	ldr	r3, [pc, #12]	@ (8003f3c <HAL_IncTick+0x20>)
 8003f2e:	601a      	str	r2, [r3, #0]
}
 8003f30:	46c0      	nop			@ (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	20000020 	.word	0x20000020
 8003f3c:	200002c8 	.word	0x200002c8

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b02      	ldr	r3, [pc, #8]	@ (8003f50 <HAL_GetTick+0x10>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	200002c8 	.word	0x200002c8

08003f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	d005      	beq.n	8003f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <HAL_Delay+0x44>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	001a      	movs	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	f7ff ffe0 	bl	8003f40 <HAL_GetTick>
 8003f80:	0002      	movs	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d8f7      	bhi.n	8003f7c <HAL_Delay+0x28>
  {
  }
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	20000020 	.word	0x20000020

08003f9c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a06      	ldr	r2, [pc, #24]	@ (8003fc4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b002      	add	sp, #8
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	46c0      	nop			@ (mov r8, r8)
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	fffff9ff 	.word	0xfffff9ff

08003fc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a05      	ldr	r2, [pc, #20]	@ (8003fec <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003fd8:	401a      	ands	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b002      	add	sp, #8
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	fe3fffff 	.word	0xfe3fffff

08003ff0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	23e0      	movs	r3, #224	@ 0xe0
 8003ffe:	045b      	lsls	r3, r3, #17
 8004000:	4013      	ands	r3, r2
}
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}

0800400a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	2104      	movs	r1, #4
 800401e:	400a      	ands	r2, r1
 8004020:	2107      	movs	r1, #7
 8004022:	4091      	lsls	r1, r2
 8004024:	000a      	movs	r2, r1
 8004026:	43d2      	mvns	r2, r2
 8004028:	401a      	ands	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2104      	movs	r1, #4
 800402e:	400b      	ands	r3, r1
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4099      	lsls	r1, r3
 8004034:	000b      	movs	r3, r1
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}

08004044 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	2104      	movs	r1, #4
 8004056:	400a      	ands	r2, r1
 8004058:	2107      	movs	r1, #7
 800405a:	4091      	lsls	r1, r2
 800405c:	000a      	movs	r2, r1
 800405e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2104      	movs	r1, #4
 8004064:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004066:	40da      	lsrs	r2, r3
 8004068:	0013      	movs	r3, r2
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b002      	add	sp, #8
 8004070:	bd80      	pop	{r7, pc}

08004072 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	23c0      	movs	r3, #192	@ 0xc0
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4013      	ands	r3, r2
 8004084:	d101      	bne.n	800408a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800408a:	2300      	movs	r3, #0
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	211f      	movs	r1, #31
 80040a8:	400a      	ands	r2, r1
 80040aa:	210f      	movs	r1, #15
 80040ac:	4091      	lsls	r1, r2
 80040ae:	000a      	movs	r2, r1
 80040b0:	43d2      	mvns	r2, r2
 80040b2:	401a      	ands	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0e9b      	lsrs	r3, r3, #26
 80040b8:	210f      	movs	r1, #15
 80040ba:	4019      	ands	r1, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	201f      	movs	r0, #31
 80040c0:	4003      	ands	r3, r0
 80040c2:	4099      	lsls	r1, r3
 80040c4:	000b      	movs	r3, r1
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040cc:	46c0      	nop			@ (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	035b      	lsls	r3, r3, #13
 80040e6:	0b5b      	lsrs	r3, r3, #13
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b002      	add	sp, #8
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	0352      	lsls	r2, r2, #13
 8004108:	0b52      	lsrs	r2, r2, #13
 800410a:	43d2      	mvns	r2, r2
 800410c:	401a      	ands	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	46bd      	mov	sp, r7
 8004116:	b002      	add	sp, #8
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	0212      	lsls	r2, r2, #8
 8004130:	43d2      	mvns	r2, r2
 8004132:	401a      	ands	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	400b      	ands	r3, r1
 800413c:	4904      	ldr	r1, [pc, #16]	@ (8004150 <LL_ADC_SetChannelSamplingTime+0x34>)
 800413e:	400b      	ands	r3, r1
 8004140:	431a      	orrs	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	07ffff00 	.word	0x07ffff00

08004154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a05      	ldr	r2, [pc, #20]	@ (8004178 <LL_ADC_EnableInternalRegulator+0x24>)
 8004162:	4013      	ands	r3, r2
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	0552      	lsls	r2, r2, #21
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b002      	add	sp, #8
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	6fffffe8 	.word	0x6fffffe8

0800417c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	2380      	movs	r3, #128	@ 0x80
 800418a:	055b      	lsls	r3, r3, #21
 800418c:	401a      	ands	r2, r3
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	055b      	lsls	r3, r3, #21
 8004192:	429a      	cmp	r2, r3
 8004194:	d101      	bne.n	800419a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800419a:	2300      	movs	r3, #0
}
 800419c:	0018      	movs	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	b002      	add	sp, #8
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <LL_ADC_Enable+0x20>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	2201      	movs	r2, #1
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	7fffffe8 	.word	0x7fffffe8

080041c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a04      	ldr	r2, [pc, #16]	@ (80041e8 <LL_ADC_Disable+0x20>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	2202      	movs	r2, #2
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041e0:	46c0      	nop			@ (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	7fffffe8 	.word	0x7fffffe8

080041ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <LL_ADC_IsEnabled+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_IsEnabled+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b002      	add	sp, #8
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <LL_ADC_REG_StartConversion+0x20>)
 800421e:	4013      	ands	r3, r2
 8004220:	2204      	movs	r2, #4
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004228:	46c0      	nop			@ (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}
 8004230:	7fffffe8 	.word	0x7fffffe8

08004234 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2204      	movs	r2, #4
 8004242:	4013      	ands	r3, r2
 8004244:	2b04      	cmp	r3, #4
 8004246:	d101      	bne.n	800424c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004260:	231f      	movs	r3, #31
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e17f      	b.n	800457e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0018      	movs	r0, r3
 800428a:	f7ff fbfd 	bl	8003a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2254      	movs	r2, #84	@ 0x54
 8004298:	2100      	movs	r1, #0
 800429a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7ff ff6b 	bl	800417c <LL_ADC_IsInternalRegulatorEnabled>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d115      	bne.n	80042d6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7ff ff50 	bl	8004154 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042b4:	4bb4      	ldr	r3, [pc, #720]	@ (8004588 <HAL_ADC_Init+0x330>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	49b4      	ldr	r1, [pc, #720]	@ (800458c <HAL_ADC_Init+0x334>)
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fb ff2c 	bl	8000118 <__udivsi3>
 80042c0:	0003      	movs	r3, r0
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042c8:	e002      	b.n	80042d0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f9      	bne.n	80042ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0018      	movs	r0, r3
 80042dc:	f7ff ff4e 	bl	800417c <LL_ADC_IsInternalRegulatorEnabled>
 80042e0:	1e03      	subs	r3, r0, #0
 80042e2:	d10f      	bne.n	8004304 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	2210      	movs	r2, #16
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	2201      	movs	r2, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80042fc:	231f      	movs	r3, #31
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff ff93 	bl	8004234 <LL_ADC_REG_IsConversionOngoing>
 800430e:	0003      	movs	r3, r0
 8004310:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	2210      	movs	r2, #16
 8004318:	4013      	ands	r3, r2
 800431a:	d000      	beq.n	800431e <HAL_ADC_Init+0xc6>
 800431c:	e122      	b.n	8004564 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d000      	beq.n	8004326 <HAL_ADC_Init+0xce>
 8004324:	e11e      	b.n	8004564 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432a:	4a99      	ldr	r2, [pc, #612]	@ (8004590 <HAL_ADC_Init+0x338>)
 800432c:	4013      	ands	r3, r2
 800432e:	2202      	movs	r2, #2
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff ff56 	bl	80041ec <LL_ADC_IsEnabled>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d000      	beq.n	8004346 <HAL_ADC_Init+0xee>
 8004344:	e0ad      	b.n	80044a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7e1b      	ldrb	r3, [r3, #24]
 800434e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8004350:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7e5b      	ldrb	r3, [r3, #25]
 8004356:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004358:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7e9b      	ldrb	r3, [r3, #26]
 800435e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004360:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_ADC_Init+0x118>
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	e000      	b.n	8004372 <HAL_ADC_Init+0x11a>
 8004370:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004372:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004378:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da04      	bge.n	800438c <HAL_ADC_Init+0x134>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	e001      	b.n	8004390 <HAL_ADC_Init+0x138>
 800438c:	2380      	movs	r3, #128	@ 0x80
 800438e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8004390:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	212c      	movs	r1, #44	@ 0x2c
 8004396:	5c5b      	ldrb	r3, [r3, r1]
 8004398:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800439a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	5c9b      	ldrb	r3, [r3, r2]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d115      	bne.n	80043d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7e9b      	ldrb	r3, [r3, #26]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2280      	movs	r2, #128	@ 0x80
 80043b8:	0252      	lsls	r2, r2, #9
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e00b      	b.n	80043d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	2220      	movs	r2, #32
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	2201      	movs	r2, #1
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e4:	23e0      	movs	r3, #224	@ 0xe0
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043ee:	4313      	orrs	r3, r2
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <HAL_ADC_Init+0x33c>)
 80043fe:	4013      	ands	r3, r2
 8004400:	0019      	movs	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	430a      	orrs	r2, r1
 800440a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0f9b      	lsrs	r3, r3, #30
 8004412:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004418:	4313      	orrs	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	223c      	movs	r2, #60	@ 0x3c
 8004424:	5c9b      	ldrb	r3, [r3, r2]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d111      	bne.n	800444e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0f9b      	lsrs	r3, r3, #30
 8004430:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004436:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800443c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8004442:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	2201      	movs	r2, #1
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4a50      	ldr	r2, [pc, #320]	@ (8004598 <HAL_ADC_Init+0x340>)
 8004456:	4013      	ands	r3, r2
 8004458:	0019      	movs	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	430a      	orrs	r2, r1
 8004462:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	23c0      	movs	r3, #192	@ 0xc0
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	429a      	cmp	r2, r3
 800446e:	d018      	beq.n	80044a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	429a      	cmp	r2, r3
 800447a:	d012      	beq.n	80044a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	429a      	cmp	r2, r3
 8004486:	d00c      	beq.n	80044a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8004488:	4b44      	ldr	r3, [pc, #272]	@ (800459c <HAL_ADC_Init+0x344>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a44      	ldr	r2, [pc, #272]	@ (80045a0 <HAL_ADC_Init+0x348>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	23f0      	movs	r3, #240	@ 0xf0
 8004498:	039b      	lsls	r3, r3, #14
 800449a:	401a      	ands	r2, r3
 800449c:	4b3f      	ldr	r3, [pc, #252]	@ (800459c <HAL_ADC_Init+0x344>)
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	001a      	movs	r2, r3
 80044ac:	2100      	movs	r1, #0
 80044ae:	f7ff fdac 	bl	800400a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	493a      	ldr	r1, [pc, #232]	@ (80045a4 <HAL_ADC_Init+0x34c>)
 80044bc:	001a      	movs	r2, r3
 80044be:	f7ff fda4 	bl	800400a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2110      	movs	r1, #16
 80044d6:	4249      	negs	r1, r1
 80044d8:	430a      	orrs	r2, r1
 80044da:	629a      	str	r2, [r3, #40]	@ 0x28
 80044dc:	e018      	b.n	8004510 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	039b      	lsls	r3, r3, #14
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d112      	bne.n	8004510 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	221c      	movs	r2, #28
 80044fa:	4013      	ands	r3, r2
 80044fc:	2210      	movs	r2, #16
 80044fe:	4252      	negs	r2, r2
 8004500:	409a      	lsls	r2, r3
 8004502:	0011      	movs	r1, r2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2100      	movs	r1, #0
 8004516:	0018      	movs	r0, r3
 8004518:	f7ff fd94 	bl	8004044 <LL_ADC_GetSamplingTimeCommonChannels>
 800451c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004522:	429a      	cmp	r2, r3
 8004524:	d10b      	bne.n	800453e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	2201      	movs	r2, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800453c:	e01c      	b.n	8004578 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	2212      	movs	r2, #18
 8004544:	4393      	bics	r3, r2
 8004546:	2210      	movs	r2, #16
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	2201      	movs	r2, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800455a:	231f      	movs	r3, #31
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	2201      	movs	r2, #1
 8004560:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004562:	e009      	b.n	8004578 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	2210      	movs	r2, #16
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004570:	231f      	movs	r3, #31
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8004578:	231f      	movs	r3, #31
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b008      	add	sp, #32
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	20000018 	.word	0x20000018
 800458c:	00030d40 	.word	0x00030d40
 8004590:	fffffefd 	.word	0xfffffefd
 8004594:	ffde0201 	.word	0xffde0201
 8004598:	1ffffc02 	.word	0x1ffffc02
 800459c:	40012708 	.word	0x40012708
 80045a0:	ffc3ffff 	.word	0xffc3ffff
 80045a4:	07ffff04 	.word	0x07ffff04

080045a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7ff fe3b 	bl	8004234 <LL_ADC_REG_IsConversionOngoing>
 80045be:	1e03      	subs	r3, r0, #0
 80045c0:	d16c      	bne.n	800469c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2254      	movs	r2, #84	@ 0x54
 80045c6:	5c9b      	ldrb	r3, [r3, r2]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_Start_DMA+0x28>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e06c      	b.n	80046aa <HAL_ADC_Start_DMA+0x102>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2254      	movs	r2, #84	@ 0x54
 80045d4:	2101      	movs	r1, #1
 80045d6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d113      	bne.n	800460c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fdff 	bl	80041ec <LL_ADC_IsEnabled>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d004      	beq.n	80045fc <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff fde6 	bl	80041c8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800460c:	2517      	movs	r5, #23
 800460e:	197c      	adds	r4, r7, r5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	0018      	movs	r0, r3
 8004614:	f000 fa3e 	bl	8004a94 <ADC_Enable>
 8004618:	0003      	movs	r3, r0
 800461a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800461c:	002c      	movs	r4, r5
 800461e:	193b      	adds	r3, r7, r4
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d13e      	bne.n	80046a4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a22      	ldr	r2, [pc, #136]	@ (80046b4 <HAL_ADC_Start_DMA+0x10c>)
 800462c:	4013      	ands	r3, r2
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	0052      	lsls	r2, r2, #1
 8004632:	431a      	orrs	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	4a1d      	ldr	r2, [pc, #116]	@ (80046b8 <HAL_ADC_Start_DMA+0x110>)
 8004644:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464a:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <HAL_ADC_Start_DMA+0x114>)
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	4a1b      	ldr	r2, [pc, #108]	@ (80046c0 <HAL_ADC_Start_DMA+0x118>)
 8004654:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	221c      	movs	r2, #28
 800465c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2254      	movs	r2, #84	@ 0x54
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2110      	movs	r1, #16
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3340      	adds	r3, #64	@ 0x40
 8004680:	0019      	movs	r1, r3
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	193c      	adds	r4, r7, r4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f000 fca2 	bl	8004fd0 <HAL_DMA_Start_IT>
 800468c:	0003      	movs	r3, r0
 800468e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0018      	movs	r0, r3
 8004696:	f7ff fdbb 	bl	8004210 <LL_ADC_REG_StartConversion>
 800469a:	e003      	b.n	80046a4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800469c:	2317      	movs	r3, #23
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2202      	movs	r2, #2
 80046a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80046a4:	2317      	movs	r3, #23
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b006      	add	sp, #24
 80046b0:	bdb0      	pop	{r4, r5, r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	fffff0fe 	.word	0xfffff0fe
 80046b8:	08004ba1 	.word	0x08004ba1
 80046bc:	08004c69 	.word	0x08004c69
 80046c0:	08004c87 	.word	0x08004c87

080046c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046cc:	46c0      	nop			@ (mov r8, r8)
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b002      	add	sp, #8
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ee:	2317      	movs	r3, #23
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2254      	movs	r2, #84	@ 0x54
 80046fe:	5c9b      	ldrb	r3, [r3, r2]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x24>
 8004704:	2302      	movs	r3, #2
 8004706:	e1c0      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x3a6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2254      	movs	r2, #84	@ 0x54
 800470c:	2101      	movs	r1, #1
 800470e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	0018      	movs	r0, r3
 8004716:	f7ff fd8d 	bl	8004234 <LL_ADC_REG_IsConversionOngoing>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d000      	beq.n	8004720 <HAL_ADC_ConfigChannel+0x3c>
 800471e:	e1a3      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d100      	bne.n	800472a <HAL_ADC_ConfigChannel+0x46>
 8004728:	e143      	b.n	80049b2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	429a      	cmp	r2, r3
 8004734:	d004      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800473a:	4ac1      	ldr	r2, [pc, #772]	@ (8004a40 <HAL_ADC_ConfigChannel+0x35c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	0019      	movs	r1, r3
 800474a:	0010      	movs	r0, r2
 800474c:	f7ff fcc2 	bl	80040d4 <LL_ADC_REG_SetSequencerChAdd>
 8004750:	e0c9      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	211f      	movs	r1, #31
 800475c:	400b      	ands	r3, r1
 800475e:	210f      	movs	r1, #15
 8004760:	4099      	lsls	r1, r3
 8004762:	000b      	movs	r3, r1
 8004764:	43db      	mvns	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	035b      	lsls	r3, r3, #13
 8004770:	0b5b      	lsrs	r3, r3, #13
 8004772:	d105      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x9c>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	0e9b      	lsrs	r3, r3, #26
 800477a:	221f      	movs	r2, #31
 800477c:	4013      	ands	r3, r2
 800477e:	e098      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2201      	movs	r2, #1
 8004786:	4013      	ands	r3, r2
 8004788:	d000      	beq.n	800478c <HAL_ADC_ConfigChannel+0xa8>
 800478a:	e091      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x1cc>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2202      	movs	r2, #2
 8004792:	4013      	ands	r3, r2
 8004794:	d000      	beq.n	8004798 <HAL_ADC_ConfigChannel+0xb4>
 8004796:	e089      	b.n	80048ac <HAL_ADC_ConfigChannel+0x1c8>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2204      	movs	r2, #4
 800479e:	4013      	ands	r3, r2
 80047a0:	d000      	beq.n	80047a4 <HAL_ADC_ConfigChannel+0xc0>
 80047a2:	e081      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x1c4>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2208      	movs	r2, #8
 80047aa:	4013      	ands	r3, r2
 80047ac:	d000      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0xcc>
 80047ae:	e079      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x1c0>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	4013      	ands	r3, r2
 80047b8:	d000      	beq.n	80047bc <HAL_ADC_ConfigChannel+0xd8>
 80047ba:	e071      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x1bc>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	d000      	beq.n	80047c8 <HAL_ADC_ConfigChannel+0xe4>
 80047c6:	e069      	b.n	800489c <HAL_ADC_ConfigChannel+0x1b8>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2240      	movs	r2, #64	@ 0x40
 80047ce:	4013      	ands	r3, r2
 80047d0:	d000      	beq.n	80047d4 <HAL_ADC_ConfigChannel+0xf0>
 80047d2:	e061      	b.n	8004898 <HAL_ADC_ConfigChannel+0x1b4>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2280      	movs	r2, #128	@ 0x80
 80047da:	4013      	ands	r3, r2
 80047dc:	d000      	beq.n	80047e0 <HAL_ADC_ConfigChannel+0xfc>
 80047de:	e059      	b.n	8004894 <HAL_ADC_ConfigChannel+0x1b0>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	2380      	movs	r3, #128	@ 0x80
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4013      	ands	r3, r2
 80047ea:	d151      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x1ac>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	d149      	bne.n	800488c <HAL_ADC_ConfigChannel+0x1a8>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2380      	movs	r3, #128	@ 0x80
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4013      	ands	r3, r2
 8004802:	d141      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x1a4>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	@ 0x80
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	4013      	ands	r3, r2
 800480e:	d139      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x1a0>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2380      	movs	r3, #128	@ 0x80
 8004816:	015b      	lsls	r3, r3, #5
 8004818:	4013      	ands	r3, r2
 800481a:	d131      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x19c>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	019b      	lsls	r3, r3, #6
 8004824:	4013      	ands	r3, r2
 8004826:	d129      	bne.n	800487c <HAL_ADC_ConfigChannel+0x198>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	2380      	movs	r3, #128	@ 0x80
 800482e:	01db      	lsls	r3, r3, #7
 8004830:	4013      	ands	r3, r2
 8004832:	d121      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x194>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	4013      	ands	r3, r2
 800483e:	d119      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x190>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	025b      	lsls	r3, r3, #9
 8004848:	4013      	ands	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x18c>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	4013      	ands	r3, r2
 8004856:	d109      	bne.n	800486c <HAL_ADC_ConfigChannel+0x188>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	02db      	lsls	r3, r3, #11
 8004860:	4013      	ands	r3, r2
 8004862:	d001      	beq.n	8004868 <HAL_ADC_ConfigChannel+0x184>
 8004864:	2312      	movs	r3, #18
 8004866:	e024      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004868:	2300      	movs	r3, #0
 800486a:	e022      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 800486c:	2311      	movs	r3, #17
 800486e:	e020      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004870:	2310      	movs	r3, #16
 8004872:	e01e      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004874:	230f      	movs	r3, #15
 8004876:	e01c      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004878:	230e      	movs	r3, #14
 800487a:	e01a      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 800487c:	230d      	movs	r3, #13
 800487e:	e018      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004880:	230c      	movs	r3, #12
 8004882:	e016      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004884:	230b      	movs	r3, #11
 8004886:	e014      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004888:	230a      	movs	r3, #10
 800488a:	e012      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 800488c:	2309      	movs	r3, #9
 800488e:	e010      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004890:	2308      	movs	r3, #8
 8004892:	e00e      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004894:	2307      	movs	r3, #7
 8004896:	e00c      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 8004898:	2306      	movs	r3, #6
 800489a:	e00a      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 800489c:	2305      	movs	r3, #5
 800489e:	e008      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 80048a0:	2304      	movs	r3, #4
 80048a2:	e006      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 80048a4:	2303      	movs	r3, #3
 80048a6:	e004      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e002      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_ADC_ConfigChannel+0x1ce>
 80048b0:	2300      	movs	r3, #0
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	6852      	ldr	r2, [r2, #4]
 80048b6:	201f      	movs	r0, #31
 80048b8:	4002      	ands	r2, r0
 80048ba:	4093      	lsls	r3, r2
 80048bc:	000a      	movs	r2, r1
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d808      	bhi.n	80048e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	001a      	movs	r2, r3
 80048e2:	f7ff fbd7 	bl	8004094 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6819      	ldr	r1, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	001a      	movs	r2, r3
 80048f4:	f7ff fc12 	bl	800411c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db00      	blt.n	8004902 <HAL_ADC_ConfigChannel+0x21e>
 8004900:	e0bc      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004902:	4b50      	ldr	r3, [pc, #320]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 8004904:	0018      	movs	r0, r3
 8004906:	f7ff fb73 	bl	8003ff0 <LL_ADC_GetCommonPathInternalCh>
 800490a:	0003      	movs	r3, r0
 800490c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a4d      	ldr	r2, [pc, #308]	@ (8004a48 <HAL_ADC_ConfigChannel+0x364>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d122      	bne.n	800495e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	2380      	movs	r3, #128	@ 0x80
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004920:	d11d      	bne.n	800495e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2280      	movs	r2, #128	@ 0x80
 8004926:	0412      	lsls	r2, r2, #16
 8004928:	4313      	orrs	r3, r2
 800492a:	4a46      	ldr	r2, [pc, #280]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 800492c:	0019      	movs	r1, r3
 800492e:	0010      	movs	r0, r2
 8004930:	f7ff fb4a 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004934:	4b45      	ldr	r3, [pc, #276]	@ (8004a4c <HAL_ADC_ConfigChannel+0x368>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4945      	ldr	r1, [pc, #276]	@ (8004a50 <HAL_ADC_ConfigChannel+0x36c>)
 800493a:	0018      	movs	r0, r3
 800493c:	f7fb fbec 	bl	8000118 <__udivsi3>
 8004940:	0003      	movs	r3, r0
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	0013      	movs	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	189b      	adds	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800494e:	e002      	b.n	8004956 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b01      	subs	r3, #1
 8004954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f9      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800495c:	e08e      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3c      	ldr	r2, [pc, #240]	@ (8004a54 <HAL_ADC_ConfigChannel+0x370>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d10e      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	045b      	lsls	r3, r3, #17
 800496e:	4013      	ands	r3, r2
 8004970:	d109      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2280      	movs	r2, #128	@ 0x80
 8004976:	0452      	lsls	r2, r2, #17
 8004978:	4313      	orrs	r3, r2
 800497a:	4a32      	ldr	r2, [pc, #200]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 800497c:	0019      	movs	r1, r3
 800497e:	0010      	movs	r0, r2
 8004980:	f7ff fb22 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
 8004984:	e07a      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a33      	ldr	r2, [pc, #204]	@ (8004a58 <HAL_ADC_ConfigChannel+0x374>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d000      	beq.n	8004992 <HAL_ADC_ConfigChannel+0x2ae>
 8004990:	e074      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	2380      	movs	r3, #128	@ 0x80
 8004996:	03db      	lsls	r3, r3, #15
 8004998:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800499a:	d000      	beq.n	800499e <HAL_ADC_ConfigChannel+0x2ba>
 800499c:	e06e      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2280      	movs	r2, #128	@ 0x80
 80049a2:	03d2      	lsls	r2, r2, #15
 80049a4:	4313      	orrs	r3, r2
 80049a6:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 80049a8:	0019      	movs	r1, r3
 80049aa:	0010      	movs	r0, r2
 80049ac:	f7ff fb0c 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
 80049b0:	e064      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	2380      	movs	r3, #128	@ 0x80
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d004      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <HAL_ADC_ConfigChannel+0x35c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d107      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0019      	movs	r1, r3
 80049d2:	0010      	movs	r0, r2
 80049d4:	f7ff fb8f 	bl	80040f6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da4d      	bge.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049e0:	4b18      	ldr	r3, [pc, #96]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7ff fb04 	bl	8003ff0 <LL_ADC_GetCommonPathInternalCh>
 80049e8:	0003      	movs	r3, r0
 80049ea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <HAL_ADC_ConfigChannel+0x364>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4a18      	ldr	r2, [pc, #96]	@ (8004a5c <HAL_ADC_ConfigChannel+0x378>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	4a11      	ldr	r2, [pc, #68]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 80049fe:	0019      	movs	r1, r3
 8004a00:	0010      	movs	r0, r2
 8004a02:	f7ff fae1 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
 8004a06:	e039      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a11      	ldr	r2, [pc, #68]	@ (8004a54 <HAL_ADC_ConfigChannel+0x370>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d108      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4a12      	ldr	r2, [pc, #72]	@ (8004a60 <HAL_ADC_ConfigChannel+0x37c>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	0010      	movs	r0, r2
 8004a1e:	f7ff fad3 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
 8004a22:	e02b      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0b      	ldr	r2, [pc, #44]	@ (8004a58 <HAL_ADC_ConfigChannel+0x374>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d126      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <HAL_ADC_ConfigChannel+0x380>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	4a03      	ldr	r2, [pc, #12]	@ (8004a44 <HAL_ADC_ConfigChannel+0x360>)
 8004a36:	0019      	movs	r1, r3
 8004a38:	0010      	movs	r0, r2
 8004a3a:	f7ff fac5 	bl	8003fc8 <LL_ADC_SetCommonPathInternalCh>
 8004a3e:	e01d      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x398>
 8004a40:	80000004 	.word	0x80000004
 8004a44:	40012708 	.word	0x40012708
 8004a48:	b0001000 	.word	0xb0001000
 8004a4c:	20000018 	.word	0x20000018
 8004a50:	00030d40 	.word	0x00030d40
 8004a54:	b8004000 	.word	0xb8004000
 8004a58:	b4002000 	.word	0xb4002000
 8004a5c:	ff7fffff 	.word	0xff7fffff
 8004a60:	feffffff 	.word	0xfeffffff
 8004a64:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a74:	2317      	movs	r3, #23
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2254      	movs	r2, #84	@ 0x54
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004a84:	2317      	movs	r3, #23
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	781b      	ldrb	r3, [r3, #0]
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b006      	add	sp, #24
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)

08004a94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff fba1 	bl	80041ec <LL_ADC_IsEnabled>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d000      	beq.n	8004ab0 <ADC_Enable+0x1c>
 8004aae:	e069      	b.n	8004b84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a36      	ldr	r2, [pc, #216]	@ (8004b90 <ADC_Enable+0xfc>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d00d      	beq.n	8004ad8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004acc:	2201      	movs	r2, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e056      	b.n	8004b86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff fb61 	bl	80041a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b94 <ADC_Enable+0x100>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7ff fa83 	bl	8003ff0 <LL_ADC_GetCommonPathInternalCh>
 8004aea:	0002      	movs	r2, r0
 8004aec:	2380      	movs	r3, #128	@ 0x80
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	4013      	ands	r3, r2
 8004af2:	d00f      	beq.n	8004b14 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004af4:	4b28      	ldr	r3, [pc, #160]	@ (8004b98 <ADC_Enable+0x104>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4928      	ldr	r1, [pc, #160]	@ (8004b9c <ADC_Enable+0x108>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fb fb0c 	bl	8000118 <__udivsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004b04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b06:	e002      	b.n	8004b0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f9      	bne.n	8004b08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7e5b      	ldrb	r3, [r3, #25]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d033      	beq.n	8004b84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b1c:	f7ff fa10 	bl	8003f40 <HAL_GetTick>
 8004b20:	0003      	movs	r3, r0
 8004b22:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b24:	e027      	b.n	8004b76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7ff fb5e 	bl	80041ec <LL_ADC_IsEnabled>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d104      	bne.n	8004b3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fb33 	bl	80041a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b3e:	f7ff f9ff 	bl	8003f40 <HAL_GetTick>
 8004b42:	0002      	movs	r2, r0
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d914      	bls.n	8004b76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d00d      	beq.n	8004b76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	2210      	movs	r2, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e007      	b.n	8004b86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d1d0      	bne.n	8004b26 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			@ (mov r8, r8)
 8004b90:	80000017 	.word	0x80000017
 8004b94:	40012708 	.word	0x40012708
 8004b98:	20000018 	.word	0x20000018
 8004b9c:	00030d40 	.word	0x00030d40

08004ba0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	2250      	movs	r2, #80	@ 0x50
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d141      	bne.n	8004c3c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	2280      	movs	r2, #128	@ 0x80
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7ff fa51 	bl	8004072 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d02e      	beq.n	8004c32 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	7e9b      	ldrb	r3, [r3, #26]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d12a      	bne.n	8004c32 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2208      	movs	r2, #8
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d123      	bne.n	8004c32 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff fb20 	bl	8004234 <LL_ADC_REG_IsConversionOngoing>
 8004bf4:	1e03      	subs	r3, r0, #0
 8004bf6:	d110      	bne.n	8004c1a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	210c      	movs	r1, #12
 8004c04:	438a      	bics	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0c:	4a15      	ldr	r2, [pc, #84]	@ (8004c64 <ADC_DMAConvCplt+0xc4>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2201      	movs	r2, #1
 8004c12:	431a      	orrs	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c18:	e00b      	b.n	8004c32 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1e:	2220      	movs	r2, #32
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fe feeb 	bl	8003a10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c3a:	e00f      	b.n	8004c5c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	2210      	movs	r2, #16
 8004c42:	4013      	ands	r3, r2
 8004c44:	d004      	beq.n	8004c50 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7ff fd43 	bl	80046d4 <HAL_ADC_ErrorCallback>
}
 8004c4e:	e005      	b.n	8004c5c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	0010      	movs	r0, r2
 8004c5a:	4798      	blx	r3
}
 8004c5c:	46c0      	nop			@ (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b004      	add	sp, #16
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	fffffefe 	.word	0xfffffefe

08004c68 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7ff fd23 	bl	80046c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b004      	add	sp, #16
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	2240      	movs	r2, #64	@ 0x40
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7ff fd10 	bl	80046d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cb4:	46c0      	nop			@ (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b004      	add	sp, #16
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	1dfb      	adds	r3, r7, #7
 8004cc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cce:	d809      	bhi.n	8004ce4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	001a      	movs	r2, r3
 8004cd6:	231f      	movs	r3, #31
 8004cd8:	401a      	ands	r2, r3
 8004cda:	4b04      	ldr	r3, [pc, #16]	@ (8004cec <__NVIC_EnableIRQ+0x30>)
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4091      	lsls	r1, r2
 8004ce0:	000a      	movs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004ce4:	46c0      	nop			@ (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	e000e100 	.word	0xe000e100

08004cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d04:	d828      	bhi.n	8004d58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <__NVIC_SetPriority+0xd4>)
 8004d08:	1dfb      	adds	r3, r7, #7
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b25b      	sxtb	r3, r3
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	33c0      	adds	r3, #192	@ 0xc0
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	589b      	ldr	r3, [r3, r2]
 8004d16:	1dfa      	adds	r2, r7, #7
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	0011      	movs	r1, r2
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	400a      	ands	r2, r1
 8004d20:	00d2      	lsls	r2, r2, #3
 8004d22:	21ff      	movs	r1, #255	@ 0xff
 8004d24:	4091      	lsls	r1, r2
 8004d26:	000a      	movs	r2, r1
 8004d28:	43d2      	mvns	r2, r2
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	019b      	lsls	r3, r3, #6
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	401a      	ands	r2, r3
 8004d36:	1dfb      	adds	r3, r7, #7
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	4003      	ands	r3, r0
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d44:	481f      	ldr	r0, [pc, #124]	@ (8004dc4 <__NVIC_SetPriority+0xd4>)
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	33c0      	adds	r3, #192	@ 0xc0
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d56:	e031      	b.n	8004dbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <__NVIC_SetPriority+0xd8>)
 8004d5a:	1dfb      	adds	r3, r7, #7
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	0019      	movs	r1, r3
 8004d60:	230f      	movs	r3, #15
 8004d62:	400b      	ands	r3, r1
 8004d64:	3b08      	subs	r3, #8
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3306      	adds	r3, #6
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	3304      	adds	r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1dfa      	adds	r2, r7, #7
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	0011      	movs	r1, r2
 8004d78:	2203      	movs	r2, #3
 8004d7a:	400a      	ands	r2, r1
 8004d7c:	00d2      	lsls	r2, r2, #3
 8004d7e:	21ff      	movs	r1, #255	@ 0xff
 8004d80:	4091      	lsls	r1, r2
 8004d82:	000a      	movs	r2, r1
 8004d84:	43d2      	mvns	r2, r2
 8004d86:	401a      	ands	r2, r3
 8004d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	22ff      	movs	r2, #255	@ 0xff
 8004d90:	401a      	ands	r2, r3
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	0018      	movs	r0, r3
 8004d98:	2303      	movs	r3, #3
 8004d9a:	4003      	ands	r3, r0
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da0:	4809      	ldr	r0, [pc, #36]	@ (8004dc8 <__NVIC_SetPriority+0xd8>)
 8004da2:	1dfb      	adds	r3, r7, #7
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	001c      	movs	r4, r3
 8004da8:	230f      	movs	r3, #15
 8004daa:	4023      	ands	r3, r4
 8004dac:	3b08      	subs	r3, #8
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	430a      	orrs	r2, r1
 8004db2:	3306      	adds	r3, #6
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	18c3      	adds	r3, r0, r3
 8004db8:	3304      	adds	r3, #4
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b003      	add	sp, #12
 8004dc2:	bd90      	pop	{r4, r7, pc}
 8004dc4:	e000e100 	.word	0xe000e100
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	1e5a      	subs	r2, r3, #1
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	045b      	lsls	r3, r3, #17
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d301      	bcc.n	8004de4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004de0:	2301      	movs	r3, #1
 8004de2:	e010      	b.n	8004e06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <SysTick_Config+0x44>)
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	3a01      	subs	r2, #1
 8004dea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dec:	2301      	movs	r3, #1
 8004dee:	425b      	negs	r3, r3
 8004df0:	2103      	movs	r1, #3
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7ff ff7c 	bl	8004cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <SysTick_Config+0x44>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dfe:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <SysTick_Config+0x44>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	e000e010 	.word	0xe000e010

08004e14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	210f      	movs	r1, #15
 8004e20:	187b      	adds	r3, r7, r1
 8004e22:	1c02      	adds	r2, r0, #0
 8004e24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	0011      	movs	r1, r2
 8004e30:	0018      	movs	r0, r3
 8004e32:	f7ff ff5d 	bl	8004cf0 <__NVIC_SetPriority>
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b004      	add	sp, #16
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	0002      	movs	r2, r0
 8004e46:	1dfb      	adds	r3, r7, #7
 8004e48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7ff ff33 	bl	8004cbc <__NVIC_EnableIRQ>
}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7ff ffaf 	bl	8004dcc <SysTick_Config>
 8004e6e:	0003      	movs	r3, r0
}
 8004e70:	0018      	movs	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b002      	add	sp, #8
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e091      	b.n	8004fae <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	001a      	movs	r2, r3
 8004e90:	4b49      	ldr	r3, [pc, #292]	@ (8004fb8 <HAL_DMA_Init+0x140>)
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d810      	bhi.n	8004eb8 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a48      	ldr	r2, [pc, #288]	@ (8004fbc <HAL_DMA_Init+0x144>)
 8004e9c:	4694      	mov	ip, r2
 8004e9e:	4463      	add	r3, ip
 8004ea0:	2114      	movs	r1, #20
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fb f938 	bl	8000118 <__udivsi3>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a43      	ldr	r2, [pc, #268]	@ (8004fc0 <HAL_DMA_Init+0x148>)
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8004eb6:	e00f      	b.n	8004ed8 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a41      	ldr	r2, [pc, #260]	@ (8004fc4 <HAL_DMA_Init+0x14c>)
 8004ebe:	4694      	mov	ip, r2
 8004ec0:	4463      	add	r3, ip
 8004ec2:	2114      	movs	r1, #20
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7fb f927 	bl	8000118 <__udivsi3>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	009a      	lsls	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc8 <HAL_DMA_Init+0x150>)
 8004ed6:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2225      	movs	r2, #37	@ 0x25
 8004edc:	2102      	movs	r1, #2
 8004ede:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4938      	ldr	r1, [pc, #224]	@ (8004fcc <HAL_DMA_Init+0x154>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 f9d7 	bl	80052dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	01db      	lsls	r3, r3, #7
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d102      	bne.n	8004f40 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f48:	217f      	movs	r1, #127	@ 0x7f
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d011      	beq.n	8004f84 <HAL_DMA_Init+0x10c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d80d      	bhi.n	8004f84 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 fa00 	bl	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	e008      	b.n	8004f96 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2225      	movs	r2, #37	@ 0x25
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	@ 0x24
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b002      	add	sp, #8
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	40020407 	.word	0x40020407
 8004fbc:	bffdfff8 	.word	0xbffdfff8
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	bffdfbf8 	.word	0xbffdfbf8
 8004fc8:	40020400 	.word	0x40020400
 8004fcc:	ffff800f 	.word	0xffff800f

08004fd0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2317      	movs	r3, #23
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2224      	movs	r2, #36	@ 0x24
 8004fea:	5c9b      	ldrb	r3, [r3, r2]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_DMA_Start_IT+0x24>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e06f      	b.n	80050d4 <HAL_DMA_Start_IT+0x104>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2224      	movs	r2, #36	@ 0x24
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2225      	movs	r2, #37	@ 0x25
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	d157      	bne.n	80050b8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2225      	movs	r2, #37	@ 0x25
 800500c:	2102      	movs	r1, #2
 800500e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2101      	movs	r1, #1
 8005022:	438a      	bics	r2, r1
 8005024:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f919 	bl	8005264 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	210e      	movs	r1, #14
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e00f      	b.n	800506c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2104      	movs	r1, #4
 8005058:	438a      	bics	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	210a      	movs	r1, #10
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	025b      	lsls	r3, r3, #9
 8005076:	4013      	ands	r3, r2
 8005078:	d008      	beq.n	800508c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005084:	2180      	movs	r1, #128	@ 0x80
 8005086:	0049      	lsls	r1, r1, #1
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	0049      	lsls	r1, r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	430a      	orrs	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e00a      	b.n	80050ce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2280      	movs	r2, #128	@ 0x80
 80050bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2224      	movs	r2, #36	@ 0x24
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80050c6:	2317      	movs	r3, #23
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80050ce:	2317      	movs	r3, #23
 80050d0:	18fb      	adds	r3, r7, r3
 80050d2:	781b      	ldrb	r3, [r3, #0]
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b006      	add	sp, #24
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f8:	221c      	movs	r2, #28
 80050fa:	4013      	ands	r3, r2
 80050fc:	2204      	movs	r2, #4
 80050fe:	409a      	lsls	r2, r3
 8005100:	0013      	movs	r3, r2
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	d026      	beq.n	8005156 <HAL_DMA_IRQHandler+0x7a>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2204      	movs	r2, #4
 800510c:	4013      	ands	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2220      	movs	r2, #32
 8005118:	4013      	ands	r3, r2
 800511a:	d107      	bne.n	800512c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2104      	movs	r1, #4
 8005128:	438a      	bics	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005130:	221c      	movs	r2, #28
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	2104      	movs	r1, #4
 800513a:	4091      	lsls	r1, r2
 800513c:	000a      	movs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d100      	bne.n	800514a <HAL_DMA_IRQHandler+0x6e>
 8005148:	e080      	b.n	800524c <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	0010      	movs	r0, r2
 8005152:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005154:	e07a      	b.n	800524c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	221c      	movs	r2, #28
 800515c:	4013      	ands	r3, r2
 800515e:	2202      	movs	r2, #2
 8005160:	409a      	lsls	r2, r3
 8005162:	0013      	movs	r3, r2
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4013      	ands	r3, r2
 8005168:	d03c      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x108>
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2202      	movs	r2, #2
 800516e:	4013      	ands	r3, r2
 8005170:	d038      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2220      	movs	r2, #32
 800517a:	4013      	ands	r3, r2
 800517c:	d10b      	bne.n	8005196 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	210a      	movs	r1, #10
 800518a:	438a      	bics	r2, r1
 800518c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2225      	movs	r2, #37	@ 0x25
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	001a      	movs	r2, r3
 800519c:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <HAL_DMA_IRQHandler+0x17c>)
 800519e:	429a      	cmp	r2, r3
 80051a0:	d909      	bls.n	80051b6 <HAL_DMA_IRQHandler+0xda>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a6:	221c      	movs	r2, #28
 80051a8:	401a      	ands	r2, r3
 80051aa:	4b2c      	ldr	r3, [pc, #176]	@ (800525c <HAL_DMA_IRQHandler+0x180>)
 80051ac:	2102      	movs	r1, #2
 80051ae:	4091      	lsls	r1, r2
 80051b0:	000a      	movs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e008      	b.n	80051c8 <HAL_DMA_IRQHandler+0xec>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	221c      	movs	r2, #28
 80051bc:	401a      	ands	r2, r3
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <HAL_DMA_IRQHandler+0x184>)
 80051c0:	2102      	movs	r1, #2
 80051c2:	4091      	lsls	r1, r2
 80051c4:	000a      	movs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	@ 0x24
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d039      	beq.n	800524c <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	0010      	movs	r0, r2
 80051e0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80051e2:	e033      	b.n	800524c <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e8:	221c      	movs	r2, #28
 80051ea:	4013      	ands	r3, r2
 80051ec:	2208      	movs	r2, #8
 80051ee:	409a      	lsls	r2, r3
 80051f0:	0013      	movs	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4013      	ands	r3, r2
 80051f6:	d02a      	beq.n	800524e <HAL_DMA_IRQHandler+0x172>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2208      	movs	r2, #8
 80051fc:	4013      	ands	r3, r2
 80051fe:	d026      	beq.n	800524e <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	210e      	movs	r1, #14
 800520c:	438a      	bics	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	221c      	movs	r2, #28
 8005216:	401a      	ands	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	2101      	movs	r1, #1
 800521e:	4091      	lsls	r1, r2
 8005220:	000a      	movs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2225      	movs	r2, #37	@ 0x25
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2224      	movs	r2, #36	@ 0x24
 8005236:	2100      	movs	r1, #0
 8005238:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	0010      	movs	r0, r2
 800524a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800524c:	46c0      	nop			@ (mov r8, r8)
 800524e:	46c0      	nop			@ (mov r8, r8)
}
 8005250:	46bd      	mov	sp, r7
 8005252:	b004      	add	sp, #16
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	40020080 	.word	0x40020080
 800525c:	40020400 	.word	0x40020400
 8005260:	40020000 	.word	0x40020000

08005264 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800527a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800528c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	221c      	movs	r2, #28
 8005294:	401a      	ands	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	2101      	movs	r1, #1
 800529c:	4091      	lsls	r1, r2
 800529e:	000a      	movs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b10      	cmp	r3, #16
 80052b0:	d108      	bne.n	80052c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052c2:	e007      	b.n	80052d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
}
 80052d4:	46c0      	nop			@ (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b004      	add	sp, #16
 80052da:	bd80      	pop	{r7, pc}

080052dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	001a      	movs	r2, r3
 80052ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d814      	bhi.n	800531a <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005364 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80052fa:	189a      	adds	r2, r3, r2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	001a      	movs	r2, r3
 8005306:	23ff      	movs	r3, #255	@ 0xff
 8005308:	4013      	ands	r3, r2
 800530a:	3b08      	subs	r3, #8
 800530c:	2114      	movs	r1, #20
 800530e:	0018      	movs	r0, r3
 8005310:	f7fa ff02 	bl	8000118 <__udivsi3>
 8005314:	0003      	movs	r3, r0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e014      	b.n	8005344 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	089b      	lsrs	r3, r3, #2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a11      	ldr	r2, [pc, #68]	@ (8005368 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005324:	189a      	adds	r2, r3, r2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	001a      	movs	r2, r3
 8005330:	23ff      	movs	r3, #255	@ 0xff
 8005332:	4013      	ands	r3, r2
 8005334:	3b08      	subs	r3, #8
 8005336:	2114      	movs	r1, #20
 8005338:	0018      	movs	r0, r3
 800533a:	f7fa feed 	bl	8000118 <__udivsi3>
 800533e:	0003      	movs	r3, r0
 8005340:	3307      	adds	r3, #7
 8005342:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a09      	ldr	r2, [pc, #36]	@ (800536c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8005348:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	221f      	movs	r2, #31
 800534e:	4013      	ands	r3, r2
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005358:	46c0      	nop			@ (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	b004      	add	sp, #16
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40020407 	.word	0x40020407
 8005364:	40020800 	.word	0x40020800
 8005368:	4002081c 	.word	0x4002081c
 800536c:	40020880 	.word	0x40020880

08005370 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	227f      	movs	r2, #127	@ 0x7f
 800537e:	4013      	ands	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005386:	4694      	mov	ip, r2
 8005388:	4463      	add	r3, ip
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	001a      	movs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a07      	ldr	r2, [pc, #28]	@ (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005396:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b01      	subs	r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	4013      	ands	r3, r2
 80053a0:	2201      	movs	r2, #1
 80053a2:	409a      	lsls	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053a8:	46c0      	nop			@ (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b004      	add	sp, #16
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	1000823f 	.word	0x1000823f
 80053b4:	40020940 	.word	0x40020940

080053b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e14e      	b.n	8005668 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	225c      	movs	r2, #92	@ 0x5c
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	225d      	movs	r2, #93	@ 0x5d
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fe fbc3 	bl	8003b6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2110      	movs	r1, #16
 80053f2:	438a      	bics	r2, r1
 80053f4:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053f6:	f7fe fda3 	bl	8003f40 <HAL_GetTick>
 80053fa:	0003      	movs	r3, r0
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053fe:	e012      	b.n	8005426 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005400:	f7fe fd9e 	bl	8003f40 <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d90b      	bls.n	8005426 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	2201      	movs	r2, #1
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	225c      	movs	r2, #92	@ 0x5c
 800541e:	2103      	movs	r1, #3
 8005420:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e120      	b.n	8005668 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2208      	movs	r2, #8
 800542e:	4013      	ands	r3, r2
 8005430:	2b08      	cmp	r3, #8
 8005432:	d0e5      	beq.n	8005400 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2101      	movs	r1, #1
 8005440:	430a      	orrs	r2, r1
 8005442:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005444:	f7fe fd7c 	bl	8003f40 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800544c:	e012      	b.n	8005474 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800544e:	f7fe fd77 	bl	8003f40 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b0a      	cmp	r3, #10
 800545a:	d90b      	bls.n	8005474 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	2201      	movs	r2, #1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	225c      	movs	r2, #92	@ 0x5c
 800546c:	2103      	movs	r1, #3
 800546e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0f9      	b.n	8005668 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2201      	movs	r2, #1
 800547c:	4013      	ands	r3, r2
 800547e:	d0e6      	beq.n	800544e <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2102      	movs	r1, #2
 800548c:	430a      	orrs	r2, r1
 800548e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a76      	ldr	r2, [pc, #472]	@ (8005670 <HAL_FDCAN_Init+0x2b8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d103      	bne.n	80054a2 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800549a:	4a76      	ldr	r2, [pc, #472]	@ (8005674 <HAL_FDCAN_Init+0x2bc>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7c1b      	ldrb	r3, [r3, #16]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d108      	bne.n	80054bc <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2140      	movs	r1, #64	@ 0x40
 80054b6:	438a      	bics	r2, r1
 80054b8:	619a      	str	r2, [r3, #24]
 80054ba:	e007      	b.n	80054cc <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2140      	movs	r1, #64	@ 0x40
 80054c8:	430a      	orrs	r2, r1
 80054ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	7c5b      	ldrb	r3, [r3, #17]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d109      	bne.n	80054e8 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2180      	movs	r1, #128	@ 0x80
 80054e0:	01c9      	lsls	r1, r1, #7
 80054e2:	430a      	orrs	r2, r1
 80054e4:	619a      	str	r2, [r3, #24]
 80054e6:	e007      	b.n	80054f8 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4961      	ldr	r1, [pc, #388]	@ (8005678 <HAL_FDCAN_Init+0x2c0>)
 80054f4:	400a      	ands	r2, r1
 80054f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7c9b      	ldrb	r3, [r3, #18]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d108      	bne.n	8005512 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	495c      	ldr	r1, [pc, #368]	@ (800567c <HAL_FDCAN_Init+0x2c4>)
 800550c:	400a      	ands	r2, r1
 800550e:	619a      	str	r2, [r3, #24]
 8005510:	e008      	b.n	8005524 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2180      	movs	r1, #128	@ 0x80
 800551e:	0149      	lsls	r1, r1, #5
 8005520:	430a      	orrs	r2, r1
 8005522:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <HAL_FDCAN_Init+0x2c8>)
 800552c:	4013      	ands	r3, r2
 800552e:	0019      	movs	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	21a4      	movs	r1, #164	@ 0xa4
 8005548:	438a      	bics	r2, r1
 800554a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2110      	movs	r1, #16
 8005558:	438a      	bics	r2, r1
 800555a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d108      	bne.n	8005576 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2104      	movs	r1, #4
 8005570:	430a      	orrs	r2, r1
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	e02c      	b.n	80055d0 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d028      	beq.n	80055d0 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d01c      	beq.n	80055c0 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2180      	movs	r1, #128	@ 0x80
 8005592:	430a      	orrs	r2, r1
 8005594:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2110      	movs	r1, #16
 80055a2:	430a      	orrs	r2, r1
 80055a4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d110      	bne.n	80055d0 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2120      	movs	r1, #32
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e007      	b.n	80055d0 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2120      	movs	r1, #32
 80055cc:	430a      	orrs	r2, r1
 80055ce:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	3b01      	subs	r3, #1
 80055de:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055e0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80055e8:	431a      	orrs	r2, r3
 80055ea:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80055f8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80055fa:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	23c0      	movs	r3, #192	@ 0xc0
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	429a      	cmp	r2, r3
 8005606:	d115      	bne.n	8005634 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	3b01      	subs	r3, #1
 8005614:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005616:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	3b01      	subs	r3, #1
 800561e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005620:	431a      	orrs	r2, r3
 8005622:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	3b01      	subs	r3, #1
 800562a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005630:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005632:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	22c0      	movs	r2, #192	@ 0xc0
 800563a:	5899      	ldr	r1, [r3, r2]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	21c0      	movs	r1, #192	@ 0xc0
 8005648:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 fa5b 	bl	8005b08 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	225c      	movs	r2, #92	@ 0x5c
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	0018      	movs	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	b004      	add	sp, #16
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40006400 	.word	0x40006400
 8005674:	40006500 	.word	0x40006500
 8005678:	ffffbfff 	.word	0xffffbfff
 800567c:	ffffefff 	.word	0xffffefff
 8005680:	fffffcff 	.word	0xfffffcff

08005684 <HAL_FDCAN_DeInit>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_DeInit(FDCAN_HandleTypeDef *hfdcan)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_FDCAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e017      	b.n	80056c6 <HAL_FDCAN_DeInit+0x42>

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));

  /* Stop the FDCAN module: return value is voluntary ignored */
  (void)HAL_FDCAN_Stop(hfdcan);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f000 f83e 	bl	800571a <HAL_FDCAN_Stop>

  /* Disable Interrupt lines */
  CLEAR_BIT(hfdcan->Instance->ILE, (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2103      	movs	r1, #3
 80056aa:	438a      	bics	r2, r1
 80056ac:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* DeInit the low level hardware: CLOCK, NVIC */
  hfdcan->MspDeInitCallback(hfdcan);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_FDCAN_MspDeInit(hfdcan);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fe fabd 	bl	8003c30 <HAL_FDCAN_MspDeInit>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Reset the FDCAN ErrorCode */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_RESET;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	225c      	movs	r2, #92	@ 0x5c
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	0018      	movs	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	b002      	add	sp, #8
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	225c      	movs	r2, #92	@ 0x5c
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d110      	bne.n	8005704 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	225c      	movs	r2, #92	@ 0x5c
 80056e6:	2102      	movs	r1, #2
 80056e8:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2101      	movs	r1, #1
 80056f6:	438a      	bics	r2, r1
 80056f8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e006      	b.n	8005712 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	2204      	movs	r2, #4
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
  }
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	225c      	movs	r2, #92	@ 0x5c
 800572a:	5c9b      	ldrb	r3, [r3, r2]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d155      	bne.n	80057de <HAL_FDCAN_Stop+0xc4>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699a      	ldr	r2, [r3, #24]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2101      	movs	r1, #1
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005742:	e011      	b.n	8005768 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b0a      	cmp	r3, #10
 8005748:	d90b      	bls.n	8005762 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574e:	2201      	movs	r2, #1
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	225c      	movs	r2, #92	@ 0x5c
 800575a:	2103      	movs	r1, #3
 800575c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e044      	b.n	80057ec <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2201      	movs	r2, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d0e7      	beq.n	8005744 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2110      	movs	r1, #16
 8005784:	438a      	bics	r2, r1
 8005786:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005788:	e011      	b.n	80057ae <HAL_FDCAN_Stop+0x94>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b0a      	cmp	r3, #10
 800578e:	d90b      	bls.n	80057a8 <HAL_FDCAN_Stop+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005794:	2201      	movs	r2, #1
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	225c      	movs	r2, #92	@ 0x5c
 80057a0:	2103      	movs	r1, #3
 80057a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e021      	b.n	80057ec <HAL_FDCAN_Stop+0xd2>
      }

      /* Increment counter */
      Counter++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2208      	movs	r2, #8
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d0e6      	beq.n	800578a <HAL_FDCAN_Stop+0x70>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2102      	movs	r1, #2
 80057c8:	430a      	orrs	r2, r1
 80057ca:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	225c      	movs	r2, #92	@ 0x5c
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e006      	b.n	80057ec <HAL_FDCAN_Stop+0xd2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057e2:	2208      	movs	r2, #8
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
  }
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b004      	add	sp, #16
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	225c      	movs	r2, #92	@ 0x5c
 8005804:	5c9b      	ldrb	r3, [r3, r2]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d12d      	bne.n	8005868 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	22c4      	movs	r2, #196	@ 0xc4
 8005812:	589a      	ldr	r2, [r3, r2]
 8005814:	2380      	movs	r3, #128	@ 0x80
 8005816:	039b      	lsls	r3, r3, #14
 8005818:	4013      	ands	r3, r2
 800581a:	d008      	beq.n	800582e <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005820:	2280      	movs	r2, #128	@ 0x80
 8005822:	0092      	lsls	r2, r2, #2
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e023      	b.n	8005876 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	22c4      	movs	r2, #196	@ 0xc4
 8005834:	589b      	ldr	r3, [r3, r2]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	2203      	movs	r2, #3
 800583a:	4013      	ands	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f9cb 	bl	8005be0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2101      	movs	r1, #1
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4091      	lsls	r1, r2
 8005854:	000a      	movs	r2, r1
 8005856:	21cc      	movs	r1, #204	@ 0xcc
 8005858:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800585a:	2201      	movs	r2, #1
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	409a      	lsls	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	e006      	b.n	8005876 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800586c:	2208      	movs	r2, #8
 800586e:	431a      	orrs	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
  }
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b006      	add	sp, #24
 800587c:	bd80      	pop	{r7, pc}
	...

08005880 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	@ 0x28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005892:	201b      	movs	r0, #27
 8005894:	183b      	adds	r3, r7, r0
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	215c      	movs	r1, #92	@ 0x5c
 800589a:	5c52      	ldrb	r2, [r2, r1]
 800589c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d000      	beq.n	80058a8 <HAL_FDCAN_GetRxMessage+0x28>
 80058a6:	e0ec      	b.n	8005a82 <HAL_FDCAN_GetRxMessage+0x202>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b40      	cmp	r3, #64	@ 0x40
 80058ac:	d137      	bne.n	800591e <HAL_FDCAN_GetRxMessage+0x9e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2290      	movs	r2, #144	@ 0x90
 80058b4:	589b      	ldr	r3, [r3, r2]
 80058b6:	220f      	movs	r2, #15
 80058b8:	4013      	ands	r3, r2
 80058ba:	d108      	bne.n	80058ce <HAL_FDCAN_GetRxMessage+0x4e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c0:	2280      	movs	r2, #128	@ 0x80
 80058c2:	0052      	lsls	r2, r2, #1
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0e0      	b.n	8005a90 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2290      	movs	r2, #144	@ 0x90
 80058d4:	589b      	ldr	r3, [r3, r2]
 80058d6:	0e1b      	lsrs	r3, r3, #24
 80058d8:	2201      	movs	r2, #1
 80058da:	4013      	ands	r3, r2
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d10a      	bne.n	80058f6 <HAL_FDCAN_GetRxMessage+0x76>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2280      	movs	r2, #128	@ 0x80
 80058e6:	589b      	ldr	r3, [r3, r2]
 80058e8:	0a5b      	lsrs	r3, r3, #9
 80058ea:	2201      	movs	r2, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_FDCAN_GetRxMessage+0x76>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2290      	movs	r2, #144	@ 0x90
 80058fc:	589b      	ldr	r3, [r3, r2]
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	2203      	movs	r2, #3
 8005902:	4013      	ands	r3, r2
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	18d3      	adds	r3, r2, r3
 8005908:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	0013      	movs	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	189b      	adds	r3, r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	18cb      	adds	r3, r1, r3
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
 800591c:	e036      	b.n	800598c <HAL_FDCAN_GetRxMessage+0x10c>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2298      	movs	r2, #152	@ 0x98
 8005924:	589b      	ldr	r3, [r3, r2]
 8005926:	220f      	movs	r2, #15
 8005928:	4013      	ands	r3, r2
 800592a:	d108      	bne.n	800593e <HAL_FDCAN_GetRxMessage+0xbe>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	2280      	movs	r2, #128	@ 0x80
 8005932:	0052      	lsls	r2, r2, #1
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0a8      	b.n	8005a90 <HAL_FDCAN_GetRxMessage+0x210>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2298      	movs	r2, #152	@ 0x98
 8005944:	589b      	ldr	r3, [r3, r2]
 8005946:	0e1b      	lsrs	r3, r3, #24
 8005948:	2201      	movs	r2, #1
 800594a:	4013      	ands	r3, r2
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10a      	bne.n	8005966 <HAL_FDCAN_GetRxMessage+0xe6>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	589b      	ldr	r3, [r3, r2]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	2201      	movs	r2, #1
 800595c:	4013      	ands	r3, r2
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_FDCAN_GetRxMessage+0xe6>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2298      	movs	r2, #152	@ 0x98
 800596c:	589b      	ldr	r3, [r3, r2]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	2203      	movs	r2, #3
 8005972:	4013      	ands	r3, r2
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	18d3      	adds	r3, r2, r3
 8005978:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	0013      	movs	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	189b      	adds	r3, r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	18cb      	adds	r3, r1, r3
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	2380      	movs	r3, #128	@ 0x80
 8005992:	05db      	lsls	r3, r3, #23
 8005994:	401a      	ands	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d107      	bne.n	80059b2 <HAL_FDCAN_GetRxMessage+0x132>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	0c9b      	lsrs	r3, r3, #18
 80059a8:	055b      	lsls	r3, r3, #21
 80059aa:	0d5a      	lsrs	r2, r3, #21
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e005      	b.n	80059be <HAL_FDCAN_GetRxMessage+0x13e>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	08da      	lsrs	r2, r3, #3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	2380      	movs	r3, #128	@ 0x80
 80059c4:	059b      	lsls	r3, r3, #22
 80059c6:	401a      	ands	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0fdb      	lsrs	r3, r3, #31
 80059d2:	07da      	lsls	r2, r3, #31
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	3304      	adds	r3, #4
 80059dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	0c1a      	lsrs	r2, r3, #16
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	220f      	movs	r2, #15
 80059f2:	401a      	ands	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	035b      	lsls	r3, r3, #13
 8005a00:	401a      	ands	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	2380      	movs	r3, #128	@ 0x80
 8005a0c:	039b      	lsls	r3, r3, #14
 8005a0e:	401a      	ands	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0e1b      	lsrs	r3, r3, #24
 8005a1a:	227f      	movs	r2, #127	@ 0x7f
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	0fda      	lsrs	r2, r3, #31
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	3304      	adds	r3, #4
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	623b      	str	r3, [r7, #32]
 8005a3a:	e00a      	b.n	8005a52 <HAL_FDCAN_GetRxMessage+0x1d2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	18d2      	adds	r2, r2, r3
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	18cb      	adds	r3, r1, r3
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a10      	ldr	r2, [pc, #64]	@ (8005a98 <HAL_FDCAN_GetRxMessage+0x218>)
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d3ec      	bcc.n	8005a3c <HAL_FDCAN_GetRxMessage+0x1bc>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d105      	bne.n	8005a74 <HAL_FDCAN_GetRxMessage+0x1f4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2194      	movs	r1, #148	@ 0x94
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	505a      	str	r2, [r3, r1]
 8005a72:	e004      	b.n	8005a7e <HAL_FDCAN_GetRxMessage+0x1fe>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	219c      	movs	r1, #156	@ 0x9c
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e006      	b.n	8005a90 <HAL_FDCAN_GetRxMessage+0x210>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a86:	2208      	movs	r2, #8
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
  }
}
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b00a      	add	sp, #40	@ 0x28
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08008c9c 	.word	0x08008c9c

08005a9c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d107      	bne.n	8005abc <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2290      	movs	r2, #144	@ 0x90
 8005ab2:	589b      	ldr	r3, [r3, r2]
 8005ab4:	220f      	movs	r2, #15
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e006      	b.n	8005aca <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2298      	movs	r2, #152	@ 0x98
 8005ac2:	589b      	ldr	r3, [r3, r2]
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8005aca:	68fb      	ldr	r3, [r7, #12]
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b004      	add	sp, #16
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	22c4      	movs	r2, #196	@ 0xc4
 8005ae2:	589b      	ldr	r3, [r3, r2]
 8005ae4:	2207      	movs	r2, #7
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005aea:	68fb      	ldr	r3, [r7, #12]
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b004      	add	sp, #16
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 8005b00:	0018      	movs	r0, r3
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005b10:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8005b12:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a2e      	ldr	r2, [pc, #184]	@ (8005bd4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d105      	bne.n	8005b2a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	22d4      	movs	r2, #212	@ 0xd4
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	4694      	mov	ip, r2
 8005b26:	4463      	add	r3, ip
 8005b28:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2280      	movs	r2, #128	@ 0x80
 8005b36:	589b      	ldr	r3, [r3, r2]
 8005b38:	4a27      	ldr	r2, [pc, #156]	@ (8005bd8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	0019      	movs	r1, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	041a      	lsls	r2, r3, #16
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3370      	adds	r3, #112	@ 0x70
 8005b52:	001a      	movs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2280      	movs	r2, #128	@ 0x80
 8005b5e:	589b      	ldr	r3, [r3, r2]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	0019      	movs	r1, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	061a      	lsls	r2, r3, #24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	2180      	movs	r1, #128	@ 0x80
 8005b74:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	33b0      	adds	r3, #176	@ 0xb0
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	3389      	adds	r3, #137	@ 0x89
 8005b84:	33ff      	adds	r3, #255	@ 0xff
 8005b86:	001a      	movs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2298      	movs	r2, #152	@ 0x98
 8005b90:	0092      	lsls	r2, r2, #2
 8005b92:	189a      	adds	r2, r3, r2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	229e      	movs	r2, #158	@ 0x9e
 8005b9c:	0092      	lsls	r2, r2, #2
 8005b9e:	189a      	adds	r2, r3, r2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e005      	b.n	8005bb6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	22d4      	movs	r2, #212	@ 0xd4
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	4694      	mov	ip, r2
 8005bbe:	4463      	add	r3, ip
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d3f1      	bcc.n	8005baa <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	46c0      	nop			@ (mov r8, r8)
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b004      	add	sp, #16
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	4000b400 	.word	0x4000b400
 8005bd4:	40006800 	.word	0x40006800
 8005bd8:	ffe0ffff 	.word	0xffe0ffff
 8005bdc:	f0ffffff 	.word	0xf0ffffff

08005be0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005bfe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]
 8005c0a:	e00b      	b.n	8005c24 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005c14:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005c1a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005c1c:	2280      	movs	r2, #128	@ 0x80
 8005c1e:	05d2      	lsls	r2, r2, #23
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c2e:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005c34:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005c3a:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	18cb      	adds	r3, r1, r3
 8005c56:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	3304      	adds	r3, #4
 8005c62:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e020      	b.n	8005cb8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	3303      	adds	r3, #3
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	3302      	adds	r3, #2
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	18cb      	adds	r3, r1, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c8e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	3301      	adds	r3, #1
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	18cb      	adds	r3, r1, r3
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c9c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	188a      	adds	r2, r1, r2
 8005ca4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005ca6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4a05      	ldr	r2, [pc, #20]	@ (8005cd4 <FDCAN_CopyMessageToRAM+0xf4>)
 8005cbe:	5cd3      	ldrb	r3, [r2, r3]
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d3d6      	bcc.n	8005c76 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8005cc8:	46c0      	nop			@ (mov r8, r8)
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	b008      	add	sp, #32
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	46c0      	nop			@ (mov r8, r8)
 8005cd4:	08008c9c 	.word	0x08008c9c

08005cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ce6:	e14d      	b.n	8005f84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2101      	movs	r1, #1
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4091      	lsls	r1, r2
 8005cf2:	000a      	movs	r2, r1
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d100      	bne.n	8005d00 <HAL_GPIO_Init+0x28>
 8005cfe:	e13e      	b.n	8005f7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2203      	movs	r2, #3
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d005      	beq.n	8005d18 <HAL_GPIO_Init+0x40>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2203      	movs	r2, #3
 8005d12:	4013      	ands	r3, r2
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d130      	bne.n	8005d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	2203      	movs	r2, #3
 8005d24:	409a      	lsls	r2, r3
 8005d26:	0013      	movs	r3, r2
 8005d28:	43da      	mvns	r2, r3
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	0013      	movs	r3, r2
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d4e:	2201      	movs	r2, #1
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	409a      	lsls	r2, r3
 8005d54:	0013      	movs	r3, r2
 8005d56:	43da      	mvns	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	091b      	lsrs	r3, r3, #4
 8005d64:	2201      	movs	r2, #1
 8005d66:	401a      	ands	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	0013      	movs	r3, r2
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d017      	beq.n	8005db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	2203      	movs	r2, #3
 8005d92:	409a      	lsls	r2, r3
 8005d94:	0013      	movs	r3, r2
 8005d96:	43da      	mvns	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	409a      	lsls	r2, r3
 8005da8:	0013      	movs	r3, r2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2203      	movs	r2, #3
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d123      	bne.n	8005e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	08da      	lsrs	r2, r3, #3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3208      	adds	r2, #8
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	58d3      	ldr	r3, [r2, r3]
 8005dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2207      	movs	r2, #7
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	220f      	movs	r2, #15
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	0013      	movs	r3, r2
 8005dde:	43da      	mvns	r2, r3
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2107      	movs	r1, #7
 8005dee:	400b      	ands	r3, r1
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	409a      	lsls	r2, r3
 8005df4:	0013      	movs	r3, r2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	08da      	lsrs	r2, r3, #3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3208      	adds	r2, #8
 8005e04:	0092      	lsls	r2, r2, #2
 8005e06:	6939      	ldr	r1, [r7, #16]
 8005e08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	2203      	movs	r2, #3
 8005e16:	409a      	lsls	r2, r3
 8005e18:	0013      	movs	r3, r2
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2203      	movs	r2, #3
 8005e28:	401a      	ands	r2, r3
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	0013      	movs	r3, r2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	23c0      	movs	r3, #192	@ 0xc0
 8005e44:	029b      	lsls	r3, r3, #10
 8005e46:	4013      	ands	r3, r2
 8005e48:	d100      	bne.n	8005e4c <HAL_GPIO_Init+0x174>
 8005e4a:	e098      	b.n	8005f7e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005e4c:	4a53      	ldr	r2, [pc, #332]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3318      	adds	r3, #24
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	589b      	ldr	r3, [r3, r2]
 8005e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	4013      	ands	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	220f      	movs	r2, #15
 8005e64:	409a      	lsls	r2, r3
 8005e66:	0013      	movs	r3, r2
 8005e68:	43da      	mvns	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	23a0      	movs	r3, #160	@ 0xa0
 8005e74:	05db      	lsls	r3, r3, #23
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d019      	beq.n	8005eae <HAL_GPIO_Init+0x1d6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a48      	ldr	r2, [pc, #288]	@ (8005fa0 <HAL_GPIO_Init+0x2c8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <HAL_GPIO_Init+0x1d2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a47      	ldr	r2, [pc, #284]	@ (8005fa4 <HAL_GPIO_Init+0x2cc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00d      	beq.n	8005ea6 <HAL_GPIO_Init+0x1ce>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a46      	ldr	r2, [pc, #280]	@ (8005fa8 <HAL_GPIO_Init+0x2d0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d007      	beq.n	8005ea2 <HAL_GPIO_Init+0x1ca>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a45      	ldr	r2, [pc, #276]	@ (8005fac <HAL_GPIO_Init+0x2d4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_GPIO_Init+0x1c6>
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	e008      	b.n	8005eb0 <HAL_GPIO_Init+0x1d8>
 8005e9e:	2305      	movs	r3, #5
 8005ea0:	e006      	b.n	8005eb0 <HAL_GPIO_Init+0x1d8>
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e004      	b.n	8005eb0 <HAL_GPIO_Init+0x1d8>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e002      	b.n	8005eb0 <HAL_GPIO_Init+0x1d8>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <HAL_GPIO_Init+0x1d8>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	00d2      	lsls	r2, r2, #3
 8005eb8:	4093      	lsls	r3, r2
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005ec0:	4936      	ldr	r1, [pc, #216]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	089b      	lsrs	r3, r3, #2
 8005ec6:	3318      	adds	r3, #24
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ece:	4b33      	ldr	r3, [pc, #204]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	43da      	mvns	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	4013      	ands	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	2380      	movs	r3, #128	@ 0x80
 8005ee4:	035b      	lsls	r3, r3, #13
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005ef8:	4b28      	ldr	r3, [pc, #160]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	43da      	mvns	r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4013      	ands	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	2380      	movs	r3, #128	@ 0x80
 8005f0e:	039b      	lsls	r3, r3, #14
 8005f10:	4013      	ands	r3, r2
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005f22:	4a1e      	ldr	r2, [pc, #120]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005f24:	2384      	movs	r3, #132	@ 0x84
 8005f26:	58d3      	ldr	r3, [r2, r3]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4013      	ands	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f48:	4914      	ldr	r1, [pc, #80]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005f4a:	2284      	movs	r2, #132	@ 0x84
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005f50:	4a12      	ldr	r2, [pc, #72]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005f52:	2380      	movs	r3, #128	@ 0x80
 8005f54:	58d3      	ldr	r3, [r2, r3]
 8005f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	025b      	lsls	r3, r3, #9
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f76:	4909      	ldr	r1, [pc, #36]	@ (8005f9c <HAL_GPIO_Init+0x2c4>)
 8005f78:	2280      	movs	r2, #128	@ 0x80
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	3301      	adds	r3, #1
 8005f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	40da      	lsrs	r2, r3
 8005f8c:	1e13      	subs	r3, r2, #0
 8005f8e:	d000      	beq.n	8005f92 <HAL_GPIO_Init+0x2ba>
 8005f90:	e6aa      	b.n	8005ce8 <HAL_GPIO_Init+0x10>
  }
}
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	46c0      	nop			@ (mov r8, r8)
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b006      	add	sp, #24
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40021800 	.word	0x40021800
 8005fa0:	50000400 	.word	0x50000400
 8005fa4:	50000800 	.word	0x50000800
 8005fa8:	50000c00 	.word	0x50000c00
 8005fac:	50001000 	.word	0x50001000

08005fb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005fbe:	e0ba      	b.n	8006136 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d100      	bne.n	8005fd4 <HAL_GPIO_DeInit+0x24>
 8005fd2:	e0ad      	b.n	8006130 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8005fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	3318      	adds	r3, #24
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	589b      	ldr	r3, [r3, r2]
 8005fe0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	220f      	movs	r2, #15
 8005fec:	409a      	lsls	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	23a0      	movs	r3, #160	@ 0xa0
 8005ff8:	05db      	lsls	r3, r3, #23
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d019      	beq.n	8006032 <HAL_GPIO_DeInit+0x82>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a53      	ldr	r2, [pc, #332]	@ (8006150 <HAL_GPIO_DeInit+0x1a0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <HAL_GPIO_DeInit+0x7e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a52      	ldr	r2, [pc, #328]	@ (8006154 <HAL_GPIO_DeInit+0x1a4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00d      	beq.n	800602a <HAL_GPIO_DeInit+0x7a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a51      	ldr	r2, [pc, #324]	@ (8006158 <HAL_GPIO_DeInit+0x1a8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d007      	beq.n	8006026 <HAL_GPIO_DeInit+0x76>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a50      	ldr	r2, [pc, #320]	@ (800615c <HAL_GPIO_DeInit+0x1ac>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d101      	bne.n	8006022 <HAL_GPIO_DeInit+0x72>
 800601e:	2304      	movs	r3, #4
 8006020:	e008      	b.n	8006034 <HAL_GPIO_DeInit+0x84>
 8006022:	2305      	movs	r3, #5
 8006024:	e006      	b.n	8006034 <HAL_GPIO_DeInit+0x84>
 8006026:	2303      	movs	r3, #3
 8006028:	e004      	b.n	8006034 <HAL_GPIO_DeInit+0x84>
 800602a:	2302      	movs	r3, #2
 800602c:	e002      	b.n	8006034 <HAL_GPIO_DeInit+0x84>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <HAL_GPIO_DeInit+0x84>
 8006032:	2300      	movs	r3, #0
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	2103      	movs	r1, #3
 8006038:	400a      	ands	r2, r1
 800603a:	00d2      	lsls	r2, r2, #3
 800603c:	4093      	lsls	r3, r2
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d136      	bne.n	80060b2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006044:	4a41      	ldr	r2, [pc, #260]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	58d3      	ldr	r3, [r2, r3]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	43d2      	mvns	r2, r2
 800604e:	493f      	ldr	r1, [pc, #252]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006050:	4013      	ands	r3, r2
 8006052:	2280      	movs	r2, #128	@ 0x80
 8006054:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8006056:	4a3d      	ldr	r2, [pc, #244]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006058:	2384      	movs	r3, #132	@ 0x84
 800605a:	58d3      	ldr	r3, [r2, r3]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	43d2      	mvns	r2, r2
 8006060:	493a      	ldr	r1, [pc, #232]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006062:	4013      	ands	r3, r2
 8006064:	2284      	movs	r2, #132	@ 0x84
 8006066:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006068:	4b38      	ldr	r3, [pc, #224]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	43d9      	mvns	r1, r3
 8006070:	4b36      	ldr	r3, [pc, #216]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006072:	400a      	ands	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006076:	4b35      	ldr	r3, [pc, #212]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	43d9      	mvns	r1, r3
 800607e:	4b33      	ldr	r3, [pc, #204]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006080:	400a      	ands	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2203      	movs	r2, #3
 8006088:	4013      	ands	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	220f      	movs	r2, #15
 800608e:	409a      	lsls	r2, r3
 8006090:	0013      	movs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8006094:	4a2d      	ldr	r2, [pc, #180]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	089b      	lsrs	r3, r3, #2
 800609a:	3318      	adds	r3, #24
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	589a      	ldr	r2, [r3, r2]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	43d9      	mvns	r1, r3
 80060a4:	4829      	ldr	r0, [pc, #164]	@ (800614c <HAL_GPIO_DeInit+0x19c>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	400a      	ands	r2, r1
 80060ac:	3318      	adds	r3, #24
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	2103      	movs	r1, #3
 80060bc:	4099      	lsls	r1, r3
 80060be:	000b      	movs	r3, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	08da      	lsrs	r2, r3, #3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3208      	adds	r2, #8
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	58d3      	ldr	r3, [r2, r3]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	2107      	movs	r1, #7
 80060d6:	400a      	ands	r2, r1
 80060d8:	0092      	lsls	r2, r2, #2
 80060da:	210f      	movs	r1, #15
 80060dc:	4091      	lsls	r1, r2
 80060de:	000a      	movs	r2, r1
 80060e0:	43d1      	mvns	r1, r2
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	08d2      	lsrs	r2, r2, #3
 80060e6:	4019      	ands	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3208      	adds	r2, #8
 80060ec:	0092      	lsls	r2, r2, #2
 80060ee:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	0052      	lsls	r2, r2, #1
 80060f8:	2103      	movs	r1, #3
 80060fa:	4091      	lsls	r1, r2
 80060fc:	000a      	movs	r2, r1
 80060fe:	43d2      	mvns	r2, r2
 8006100:	401a      	ands	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2101      	movs	r1, #1
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4091      	lsls	r1, r2
 8006110:	000a      	movs	r2, r1
 8006112:	43d2      	mvns	r2, r2
 8006114:	401a      	ands	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	2103      	movs	r1, #3
 8006124:	4091      	lsls	r1, r2
 8006126:	000a      	movs	r2, r1
 8006128:	43d2      	mvns	r2, r2
 800612a:	401a      	ands	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	3301      	adds	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	40da      	lsrs	r2, r3
 800613c:	1e13      	subs	r3, r2, #0
 800613e:	d000      	beq.n	8006142 <HAL_GPIO_DeInit+0x192>
 8006140:	e73e      	b.n	8005fc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	46c0      	nop			@ (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b006      	add	sp, #24
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40021800 	.word	0x40021800
 8006150:	50000400 	.word	0x50000400
 8006154:	50000800 	.word	0x50000800
 8006158:	50000c00 	.word	0x50000c00
 800615c:	50001000 	.word	0x50001000

08006160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	000a      	movs	r2, r1
 800616a:	1cbb      	adds	r3, r7, #2
 800616c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	1cba      	adds	r2, r7, #2
 8006174:	8812      	ldrh	r2, [r2, #0]
 8006176:	4013      	ands	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800617a:	230f      	movs	r3, #15
 800617c:	18fb      	adds	r3, r7, r3
 800617e:	2201      	movs	r2, #1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	e003      	b.n	800618c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006184:	230f      	movs	r3, #15
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800618c:	230f      	movs	r3, #15
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	781b      	ldrb	r3, [r3, #0]
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b004      	add	sp, #16
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	0008      	movs	r0, r1
 80061a4:	0011      	movs	r1, r2
 80061a6:	1cbb      	adds	r3, r7, #2
 80061a8:	1c02      	adds	r2, r0, #0
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	1c7b      	adds	r3, r7, #1
 80061ae:	1c0a      	adds	r2, r1, #0
 80061b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061b2:	1c7b      	adds	r3, r7, #1
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061ba:	1cbb      	adds	r3, r7, #2
 80061bc:	881a      	ldrh	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061c2:	e003      	b.n	80061cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061c4:	1cbb      	adds	r3, r7, #2
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80061dc:	4b19      	ldr	r3, [pc, #100]	@ (8006244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a19      	ldr	r2, [pc, #100]	@ (8006248 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	0019      	movs	r1, r3
 80061e6:	4b17      	ldr	r3, [pc, #92]	@ (8006244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	2380      	movs	r3, #128	@ 0x80
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d11f      	bne.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80061f8:	4b14      	ldr	r3, [pc, #80]	@ (800624c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	0013      	movs	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	189b      	adds	r3, r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	4912      	ldr	r1, [pc, #72]	@ (8006250 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006206:	0018      	movs	r0, r3
 8006208:	f7f9 ff86 	bl	8000118 <__udivsi3>
 800620c:	0003      	movs	r3, r0
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006212:	e008      	b.n	8006226 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3b01      	subs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e001      	b.n	8006226 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e009      	b.n	800623a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006226:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	2380      	movs	r3, #128	@ 0x80
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	401a      	ands	r2, r3
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	429a      	cmp	r2, r3
 8006236:	d0ed      	beq.n	8006214 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	0018      	movs	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	b004      	add	sp, #16
 8006240:	bd80      	pop	{r7, pc}
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	40007000 	.word	0x40007000
 8006248:	fffff9ff 	.word	0xfffff9ff
 800624c:	20000018 	.word	0x20000018
 8006250:	000f4240 	.word	0x000f4240

08006254 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8006258:	4b03      	ldr	r3, [pc, #12]	@ (8006268 <LL_RCC_GetAPB1Prescaler+0x14>)
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	23e0      	movs	r3, #224	@ 0xe0
 800625e:	01db      	lsls	r3, r3, #7
 8006260:	4013      	ands	r3, r2
}
 8006262:	0018      	movs	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40021000 	.word	0x40021000

0800626c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f000 fb50 	bl	8006920 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	d100      	bne.n	800628c <HAL_RCC_OscConfig+0x20>
 800628a:	e07c      	b.n	8006386 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800628c:	4bc3      	ldr	r3, [pc, #780]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2238      	movs	r2, #56	@ 0x38
 8006292:	4013      	ands	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006296:	4bc1      	ldr	r3, [pc, #772]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	2203      	movs	r2, #3
 800629c:	4013      	ands	r3, r2
 800629e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d102      	bne.n	80062ac <HAL_RCC_OscConfig+0x40>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d002      	beq.n	80062b2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d10b      	bne.n	80062ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b2:	4bba      	ldr	r3, [pc, #744]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	2380      	movs	r3, #128	@ 0x80
 80062b8:	029b      	lsls	r3, r3, #10
 80062ba:	4013      	ands	r3, r2
 80062bc:	d062      	beq.n	8006384 <HAL_RCC_OscConfig+0x118>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d15e      	bne.n	8006384 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e32a      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	025b      	lsls	r3, r3, #9
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d107      	bne.n	80062e6 <HAL_RCC_OscConfig+0x7a>
 80062d6:	4bb1      	ldr	r3, [pc, #708]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4bb0      	ldr	r3, [pc, #704]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80062dc:	2180      	movs	r1, #128	@ 0x80
 80062de:	0249      	lsls	r1, r1, #9
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e020      	b.n	8006328 <HAL_RCC_OscConfig+0xbc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	23a0      	movs	r3, #160	@ 0xa0
 80062ec:	02db      	lsls	r3, r3, #11
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d10e      	bne.n	8006310 <HAL_RCC_OscConfig+0xa4>
 80062f2:	4baa      	ldr	r3, [pc, #680]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4ba9      	ldr	r3, [pc, #676]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	02c9      	lsls	r1, r1, #11
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	4ba6      	ldr	r3, [pc, #664]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4ba5      	ldr	r3, [pc, #660]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006306:	2180      	movs	r1, #128	@ 0x80
 8006308:	0249      	lsls	r1, r1, #9
 800630a:	430a      	orrs	r2, r1
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e00b      	b.n	8006328 <HAL_RCC_OscConfig+0xbc>
 8006310:	4ba2      	ldr	r3, [pc, #648]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4ba1      	ldr	r3, [pc, #644]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006316:	49a2      	ldr	r1, [pc, #648]	@ (80065a0 <HAL_RCC_OscConfig+0x334>)
 8006318:	400a      	ands	r2, r1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	4b9f      	ldr	r3, [pc, #636]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b9e      	ldr	r3, [pc, #632]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006322:	49a0      	ldr	r1, [pc, #640]	@ (80065a4 <HAL_RCC_OscConfig+0x338>)
 8006324:	400a      	ands	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d014      	beq.n	800635a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fd fe06 	bl	8003f40 <HAL_GetTick>
 8006334:	0003      	movs	r3, r0
 8006336:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800633a:	f7fd fe01 	bl	8003f40 <HAL_GetTick>
 800633e:	0002      	movs	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	@ 0x64
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e2e9      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800634c:	4b93      	ldr	r3, [pc, #588]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	4013      	ands	r3, r2
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0xce>
 8006358:	e015      	b.n	8006386 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800635a:	f7fd fdf1 	bl	8003f40 <HAL_GetTick>
 800635e:	0003      	movs	r3, r0
 8006360:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006364:	f7fd fdec 	bl	8003f40 <HAL_GetTick>
 8006368:	0002      	movs	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b64      	cmp	r3, #100	@ 0x64
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e2d4      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006376:	4b89      	ldr	r3, [pc, #548]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	2380      	movs	r3, #128	@ 0x80
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	4013      	ands	r3, r2
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0xf8>
 8006382:	e000      	b.n	8006386 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2202      	movs	r2, #2
 800638c:	4013      	ands	r3, r2
 800638e:	d100      	bne.n	8006392 <HAL_RCC_OscConfig+0x126>
 8006390:	e099      	b.n	80064c6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006392:	4b82      	ldr	r3, [pc, #520]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2238      	movs	r2, #56	@ 0x38
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800639c:	4b7f      	ldr	r3, [pc, #508]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2203      	movs	r2, #3
 80063a2:	4013      	ands	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d102      	bne.n	80063b2 <HAL_RCC_OscConfig+0x146>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d002      	beq.n	80063b8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d135      	bne.n	8006424 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b8:	4b78      	ldr	r3, [pc, #480]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	@ 0x80
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4013      	ands	r3, r2
 80063c2:	d005      	beq.n	80063d0 <HAL_RCC_OscConfig+0x164>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e2a7      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d0:	4b72      	ldr	r3, [pc, #456]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a74      	ldr	r2, [pc, #464]	@ (80065a8 <HAL_RCC_OscConfig+0x33c>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	0019      	movs	r1, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	4b6e      	ldr	r3, [pc, #440]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d112      	bne.n	8006412 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80063ec:	4b6b      	ldr	r3, [pc, #428]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a6e      	ldr	r2, [pc, #440]	@ (80065ac <HAL_RCC_OscConfig+0x340>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	4b68      	ldr	r3, [pc, #416]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006400:	4b66      	ldr	r3, [pc, #408]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	0adb      	lsrs	r3, r3, #11
 8006406:	2207      	movs	r2, #7
 8006408:	4013      	ands	r3, r2
 800640a:	4a69      	ldr	r2, [pc, #420]	@ (80065b0 <HAL_RCC_OscConfig+0x344>)
 800640c:	40da      	lsrs	r2, r3
 800640e:	4b69      	ldr	r3, [pc, #420]	@ (80065b4 <HAL_RCC_OscConfig+0x348>)
 8006410:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006412:	4b69      	ldr	r3, [pc, #420]	@ (80065b8 <HAL_RCC_OscConfig+0x34c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	0018      	movs	r0, r3
 8006418:	f7fd fd36 	bl	8003e88 <HAL_InitTick>
 800641c:	1e03      	subs	r3, r0, #0
 800641e:	d051      	beq.n	80064c4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e27d      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d030      	beq.n	800648e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800642c:	4b5b      	ldr	r3, [pc, #364]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5e      	ldr	r2, [pc, #376]	@ (80065ac <HAL_RCC_OscConfig+0x340>)
 8006432:	4013      	ands	r3, r2
 8006434:	0019      	movs	r1, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	4b58      	ldr	r3, [pc, #352]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006440:	4b56      	ldr	r3, [pc, #344]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b55      	ldr	r3, [pc, #340]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006446:	2180      	movs	r1, #128	@ 0x80
 8006448:	0049      	lsls	r1, r1, #1
 800644a:	430a      	orrs	r2, r1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fd fd77 	bl	8003f40 <HAL_GetTick>
 8006452:	0003      	movs	r3, r0
 8006454:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006458:	f7fd fd72 	bl	8003f40 <HAL_GetTick>
 800645c:	0002      	movs	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e25a      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800646a:	4b4c      	ldr	r3, [pc, #304]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	4013      	ands	r3, r2
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006476:	4b49      	ldr	r3, [pc, #292]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4a4b      	ldr	r2, [pc, #300]	@ (80065a8 <HAL_RCC_OscConfig+0x33c>)
 800647c:	4013      	ands	r3, r2
 800647e:	0019      	movs	r1, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	021a      	lsls	r2, r3, #8
 8006486:	4b45      	ldr	r3, [pc, #276]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	e01b      	b.n	80064c6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800648e:	4b43      	ldr	r3, [pc, #268]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b42      	ldr	r3, [pc, #264]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006494:	4949      	ldr	r1, [pc, #292]	@ (80065bc <HAL_RCC_OscConfig+0x350>)
 8006496:	400a      	ands	r2, r1
 8006498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649a:	f7fd fd51 	bl	8003f40 <HAL_GetTick>
 800649e:	0003      	movs	r3, r0
 80064a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a4:	f7fd fd4c 	bl	8003f40 <HAL_GetTick>
 80064a8:	0002      	movs	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e234      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80064b6:	4b39      	ldr	r3, [pc, #228]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2380      	movs	r3, #128	@ 0x80
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	4013      	ands	r3, r2
 80064c0:	d1f0      	bne.n	80064a4 <HAL_RCC_OscConfig+0x238>
 80064c2:	e000      	b.n	80064c6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2208      	movs	r2, #8
 80064cc:	4013      	ands	r3, r2
 80064ce:	d047      	beq.n	8006560 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80064d0:	4b32      	ldr	r3, [pc, #200]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2238      	movs	r2, #56	@ 0x38
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b18      	cmp	r3, #24
 80064da:	d10a      	bne.n	80064f2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80064dc:	4b2f      	ldr	r3, [pc, #188]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80064de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e0:	2202      	movs	r2, #2
 80064e2:	4013      	ands	r3, r2
 80064e4:	d03c      	beq.n	8006560 <HAL_RCC_OscConfig+0x2f4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d138      	bne.n	8006560 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e216      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d019      	beq.n	800652e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80064fa:	4b28      	ldr	r3, [pc, #160]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 80064fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80064fe:	4b27      	ldr	r3, [pc, #156]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006500:	2101      	movs	r1, #1
 8006502:	430a      	orrs	r2, r1
 8006504:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006506:	f7fd fd1b 	bl	8003f40 <HAL_GetTick>
 800650a:	0003      	movs	r3, r0
 800650c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006510:	f7fd fd16 	bl	8003f40 <HAL_GetTick>
 8006514:	0002      	movs	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e1fe      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006522:	4b1e      	ldr	r3, [pc, #120]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	d0f1      	beq.n	8006510 <HAL_RCC_OscConfig+0x2a4>
 800652c:	e018      	b.n	8006560 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800652e:	4b1b      	ldr	r3, [pc, #108]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006530:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006532:	4b1a      	ldr	r3, [pc, #104]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006534:	2101      	movs	r1, #1
 8006536:	438a      	bics	r2, r1
 8006538:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653a:	f7fd fd01 	bl	8003f40 <HAL_GetTick>
 800653e:	0003      	movs	r3, r0
 8006540:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006544:	f7fd fcfc 	bl	8003f40 <HAL_GetTick>
 8006548:	0002      	movs	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e1e4      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006556:	4b11      	ldr	r3, [pc, #68]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800655a:	2202      	movs	r2, #2
 800655c:	4013      	ands	r3, r2
 800655e:	d1f1      	bne.n	8006544 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2204      	movs	r2, #4
 8006566:	4013      	ands	r3, r2
 8006568:	d100      	bne.n	800656c <HAL_RCC_OscConfig+0x300>
 800656a:	e0c7      	b.n	80066fc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656c:	231f      	movs	r3, #31
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2238      	movs	r2, #56	@ 0x38
 800657a:	4013      	ands	r3, r2
 800657c:	2b20      	cmp	r3, #32
 800657e:	d11f      	bne.n	80065c0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <HAL_RCC_OscConfig+0x330>)
 8006582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006584:	2202      	movs	r2, #2
 8006586:	4013      	ands	r3, r2
 8006588:	d100      	bne.n	800658c <HAL_RCC_OscConfig+0x320>
 800658a:	e0b7      	b.n	80066fc <HAL_RCC_OscConfig+0x490>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d000      	beq.n	8006596 <HAL_RCC_OscConfig+0x32a>
 8006594:	e0b2      	b.n	80066fc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e1c2      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	40021000 	.word	0x40021000
 80065a0:	fffeffff 	.word	0xfffeffff
 80065a4:	fffbffff 	.word	0xfffbffff
 80065a8:	ffff80ff 	.word	0xffff80ff
 80065ac:	ffffc7ff 	.word	0xffffc7ff
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	20000018 	.word	0x20000018
 80065b8:	2000001c 	.word	0x2000001c
 80065bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065c0:	4bb5      	ldr	r3, [pc, #724]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80065c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c4:	2380      	movs	r3, #128	@ 0x80
 80065c6:	055b      	lsls	r3, r3, #21
 80065c8:	4013      	ands	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_OscConfig+0x364>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_RCC_OscConfig+0x366>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	4bb0      	ldr	r3, [pc, #704]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80065d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065da:	4baf      	ldr	r3, [pc, #700]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80065dc:	2180      	movs	r1, #128	@ 0x80
 80065de:	0549      	lsls	r1, r1, #21
 80065e0:	430a      	orrs	r2, r1
 80065e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80065e4:	4bac      	ldr	r3, [pc, #688]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80065e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065e8:	2380      	movs	r3, #128	@ 0x80
 80065ea:	055b      	lsls	r3, r3, #21
 80065ec:	4013      	ands	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80065f2:	231f      	movs	r3, #31
 80065f4:	18fb      	adds	r3, r7, r3
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065fa:	4ba8      	ldr	r3, [pc, #672]	@ (800689c <HAL_RCC_OscConfig+0x630>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4013      	ands	r3, r2
 8006604:	d11a      	bne.n	800663c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006606:	4ba5      	ldr	r3, [pc, #660]	@ (800689c <HAL_RCC_OscConfig+0x630>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4ba4      	ldr	r3, [pc, #656]	@ (800689c <HAL_RCC_OscConfig+0x630>)
 800660c:	2180      	movs	r1, #128	@ 0x80
 800660e:	0049      	lsls	r1, r1, #1
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006614:	f7fd fc94 	bl	8003f40 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fd fc8f 	bl	8003f40 <HAL_GetTick>
 8006622:	0002      	movs	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e177      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006630:	4b9a      	ldr	r3, [pc, #616]	@ (800689c <HAL_RCC_OscConfig+0x630>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	2380      	movs	r3, #128	@ 0x80
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4013      	ands	r3, r2
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x3e6>
 8006644:	4b94      	ldr	r3, [pc, #592]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006646:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006648:	4b93      	ldr	r3, [pc, #588]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800664a:	2101      	movs	r1, #1
 800664c:	430a      	orrs	r2, r1
 800664e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006650:	e01c      	b.n	800668c <HAL_RCC_OscConfig+0x420>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x408>
 800665a:	4b8f      	ldr	r3, [pc, #572]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800665c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800665e:	4b8e      	ldr	r3, [pc, #568]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006660:	2104      	movs	r1, #4
 8006662:	430a      	orrs	r2, r1
 8006664:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006666:	4b8c      	ldr	r3, [pc, #560]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006668:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800666a:	4b8b      	ldr	r3, [pc, #556]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800666c:	2101      	movs	r1, #1
 800666e:	430a      	orrs	r2, r1
 8006670:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006672:	e00b      	b.n	800668c <HAL_RCC_OscConfig+0x420>
 8006674:	4b88      	ldr	r3, [pc, #544]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006676:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006678:	4b87      	ldr	r3, [pc, #540]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800667a:	2101      	movs	r1, #1
 800667c:	438a      	bics	r2, r1
 800667e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006680:	4b85      	ldr	r3, [pc, #532]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006682:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006684:	4b84      	ldr	r3, [pc, #528]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006686:	2104      	movs	r1, #4
 8006688:	438a      	bics	r2, r1
 800668a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d014      	beq.n	80066be <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fd fc54 	bl	8003f40 <HAL_GetTick>
 8006698:	0003      	movs	r3, r0
 800669a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800669c:	e009      	b.n	80066b2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fd fc4f 	bl	8003f40 <HAL_GetTick>
 80066a2:	0002      	movs	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	4a7d      	ldr	r2, [pc, #500]	@ (80068a0 <HAL_RCC_OscConfig+0x634>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e136      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066b2:	4b79      	ldr	r3, [pc, #484]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	2202      	movs	r2, #2
 80066b8:	4013      	ands	r3, r2
 80066ba:	d0f0      	beq.n	800669e <HAL_RCC_OscConfig+0x432>
 80066bc:	e013      	b.n	80066e6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fd fc3f 	bl	8003f40 <HAL_GetTick>
 80066c2:	0003      	movs	r3, r0
 80066c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066c6:	e009      	b.n	80066dc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fd fc3a 	bl	8003f40 <HAL_GetTick>
 80066cc:	0002      	movs	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a73      	ldr	r2, [pc, #460]	@ (80068a0 <HAL_RCC_OscConfig+0x634>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e121      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066dc:	4b6e      	ldr	r3, [pc, #440]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80066de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066e0:	2202      	movs	r2, #2
 80066e2:	4013      	ands	r3, r2
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80066e6:	231f      	movs	r3, #31
 80066e8:	18fb      	adds	r3, r7, r3
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80066f0:	4b69      	ldr	r3, [pc, #420]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80066f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066f4:	4b68      	ldr	r3, [pc, #416]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80066f6:	496b      	ldr	r1, [pc, #428]	@ (80068a4 <HAL_RCC_OscConfig+0x638>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2220      	movs	r2, #32
 8006702:	4013      	ands	r3, r2
 8006704:	d039      	beq.n	800677a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800670e:	4b62      	ldr	r3, [pc, #392]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b61      	ldr	r3, [pc, #388]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006714:	2180      	movs	r1, #128	@ 0x80
 8006716:	03c9      	lsls	r1, r1, #15
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671c:	f7fd fc10 	bl	8003f40 <HAL_GetTick>
 8006720:	0003      	movs	r3, r0
 8006722:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006726:	f7fd fc0b 	bl	8003f40 <HAL_GetTick>
 800672a:	0002      	movs	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e0f3      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006738:	4b57      	ldr	r3, [pc, #348]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	2380      	movs	r3, #128	@ 0x80
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	4013      	ands	r3, r2
 8006742:	d0f0      	beq.n	8006726 <HAL_RCC_OscConfig+0x4ba>
 8006744:	e019      	b.n	800677a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006746:	4b54      	ldr	r3, [pc, #336]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4b53      	ldr	r3, [pc, #332]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800674c:	4956      	ldr	r1, [pc, #344]	@ (80068a8 <HAL_RCC_OscConfig+0x63c>)
 800674e:	400a      	ands	r2, r1
 8006750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006752:	f7fd fbf5 	bl	8003f40 <HAL_GetTick>
 8006756:	0003      	movs	r3, r0
 8006758:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800675c:	f7fd fbf0 	bl	8003f40 <HAL_GetTick>
 8006760:	0002      	movs	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e0d8      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800676e:	4b4a      	ldr	r3, [pc, #296]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	2380      	movs	r3, #128	@ 0x80
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4013      	ands	r3, r2
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d100      	bne.n	8006784 <HAL_RCC_OscConfig+0x518>
 8006782:	e0cc      	b.n	800691e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006784:	4b44      	ldr	r3, [pc, #272]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2238      	movs	r2, #56	@ 0x38
 800678a:	4013      	ands	r3, r2
 800678c:	2b10      	cmp	r3, #16
 800678e:	d100      	bne.n	8006792 <HAL_RCC_OscConfig+0x526>
 8006790:	e07b      	b.n	800688a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d156      	bne.n	8006848 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800679a:	4b3f      	ldr	r3, [pc, #252]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b3e      	ldr	r3, [pc, #248]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80067a0:	4942      	ldr	r1, [pc, #264]	@ (80068ac <HAL_RCC_OscConfig+0x640>)
 80067a2:	400a      	ands	r2, r1
 80067a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fd fbcb 	bl	8003f40 <HAL_GetTick>
 80067aa:	0003      	movs	r3, r0
 80067ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b0:	f7fd fbc6 	bl	8003f40 <HAL_GetTick>
 80067b4:	0002      	movs	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e0ae      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c2:	4b35      	ldr	r3, [pc, #212]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	2380      	movs	r3, #128	@ 0x80
 80067c8:	049b      	lsls	r3, r3, #18
 80067ca:	4013      	ands	r3, r2
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ce:	4b32      	ldr	r3, [pc, #200]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	4a37      	ldr	r2, [pc, #220]	@ (80068b0 <HAL_RCC_OscConfig+0x644>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	0019      	movs	r1, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	431a      	orrs	r2, r3
 80067fc:	4b26      	ldr	r3, [pc, #152]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 80067fe:	430a      	orrs	r2, r1
 8006800:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006802:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b24      	ldr	r3, [pc, #144]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006808:	2180      	movs	r1, #128	@ 0x80
 800680a:	0449      	lsls	r1, r1, #17
 800680c:	430a      	orrs	r2, r1
 800680e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006810:	4b21      	ldr	r3, [pc, #132]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	4b20      	ldr	r3, [pc, #128]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006816:	2180      	movs	r1, #128	@ 0x80
 8006818:	0549      	lsls	r1, r1, #21
 800681a:	430a      	orrs	r2, r1
 800681c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681e:	f7fd fb8f 	bl	8003f40 <HAL_GetTick>
 8006822:	0003      	movs	r3, r0
 8006824:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006828:	f7fd fb8a 	bl	8003f40 <HAL_GetTick>
 800682c:	0002      	movs	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e072      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800683a:	4b17      	ldr	r3, [pc, #92]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	2380      	movs	r3, #128	@ 0x80
 8006840:	049b      	lsls	r3, r3, #18
 8006842:	4013      	ands	r3, r2
 8006844:	d0f0      	beq.n	8006828 <HAL_RCC_OscConfig+0x5bc>
 8006846:	e06a      	b.n	800691e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800684e:	4917      	ldr	r1, [pc, #92]	@ (80068ac <HAL_RCC_OscConfig+0x640>)
 8006850:	400a      	ands	r2, r1
 8006852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fd fb74 	bl	8003f40 <HAL_GetTick>
 8006858:	0003      	movs	r3, r0
 800685a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800685e:	f7fd fb6f 	bl	8003f40 <HAL_GetTick>
 8006862:	0002      	movs	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e057      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006870:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2380      	movs	r3, #128	@ 0x80
 8006876:	049b      	lsls	r3, r3, #18
 8006878:	4013      	ands	r3, r2
 800687a:	d1f0      	bne.n	800685e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800687c:	4b06      	ldr	r3, [pc, #24]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	4b05      	ldr	r3, [pc, #20]	@ (8006898 <HAL_RCC_OscConfig+0x62c>)
 8006882:	490c      	ldr	r1, [pc, #48]	@ (80068b4 <HAL_RCC_OscConfig+0x648>)
 8006884:	400a      	ands	r2, r1
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	e049      	b.n	800691e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d112      	bne.n	80068b8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e044      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	40021000 	.word	0x40021000
 800689c:	40007000 	.word	0x40007000
 80068a0:	00001388 	.word	0x00001388
 80068a4:	efffffff 	.word	0xefffffff
 80068a8:	ffbfffff 	.word	0xffbfffff
 80068ac:	feffffff 	.word	0xfeffffff
 80068b0:	11c1808c 	.word	0x11c1808c
 80068b4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006928 <HAL_RCC_OscConfig+0x6bc>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2203      	movs	r2, #3
 80068c2:	401a      	ands	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d126      	bne.n	800691a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2270      	movs	r2, #112	@ 0x70
 80068d0:	401a      	ands	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d11f      	bne.n	800691a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	23fe      	movs	r3, #254	@ 0xfe
 80068de:	01db      	lsls	r3, r3, #7
 80068e0:	401a      	ands	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d116      	bne.n	800691a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	23f8      	movs	r3, #248	@ 0xf8
 80068f0:	039b      	lsls	r3, r3, #14
 80068f2:	401a      	ands	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d10e      	bne.n	800691a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	23e0      	movs	r3, #224	@ 0xe0
 8006900:	051b      	lsls	r3, r3, #20
 8006902:	401a      	ands	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d106      	bne.n	800691a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	0f5b      	lsrs	r3, r3, #29
 8006910:	075a      	lsls	r2, r3, #29
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006916:	429a      	cmp	r2, r3
 8006918:	d001      	beq.n	800691e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	0018      	movs	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	b008      	add	sp, #32
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40021000 	.word	0x40021000

0800692c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0e9      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006940:	4b76      	ldr	r3, [pc, #472]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2207      	movs	r2, #7
 8006946:	4013      	ands	r3, r2
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d91e      	bls.n	800698c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b73      	ldr	r3, [pc, #460]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2207      	movs	r2, #7
 8006954:	4393      	bics	r3, r2
 8006956:	0019      	movs	r1, r3
 8006958:	4b70      	ldr	r3, [pc, #448]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006960:	f7fd faee 	bl	8003f40 <HAL_GetTick>
 8006964:	0003      	movs	r3, r0
 8006966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006968:	e009      	b.n	800697e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696a:	f7fd fae9 	bl	8003f40 <HAL_GetTick>
 800696e:	0002      	movs	r2, r0
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	4a6a      	ldr	r2, [pc, #424]	@ (8006b20 <HAL_RCC_ClockConfig+0x1f4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e0ca      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800697e:	4b67      	ldr	r3, [pc, #412]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2207      	movs	r2, #7
 8006984:	4013      	ands	r3, r2
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d1ee      	bne.n	800696a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2202      	movs	r2, #2
 8006992:	4013      	ands	r3, r2
 8006994:	d015      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2204      	movs	r2, #4
 800699c:	4013      	ands	r3, r2
 800699e:	d006      	beq.n	80069ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80069a0:	4b60      	ldr	r3, [pc, #384]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	4b5f      	ldr	r3, [pc, #380]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069a6:	21e0      	movs	r1, #224	@ 0xe0
 80069a8:	01c9      	lsls	r1, r1, #7
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006b28 <HAL_RCC_ClockConfig+0x1fc>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	0019      	movs	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	4b59      	ldr	r3, [pc, #356]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069be:	430a      	orrs	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2201      	movs	r2, #1
 80069c8:	4013      	ands	r3, r2
 80069ca:	d057      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069d4:	4b53      	ldr	r3, [pc, #332]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	2380      	movs	r3, #128	@ 0x80
 80069da:	029b      	lsls	r3, r3, #10
 80069dc:	4013      	ands	r3, r2
 80069de:	d12b      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e097      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d107      	bne.n	80069fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	2380      	movs	r3, #128	@ 0x80
 80069f2:	049b      	lsls	r3, r3, #18
 80069f4:	4013      	ands	r3, r2
 80069f6:	d11f      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e08b      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d107      	bne.n	8006a14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a04:	4b47      	ldr	r3, [pc, #284]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2380      	movs	r3, #128	@ 0x80
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d113      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e07f      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a1c:	4b41      	ldr	r3, [pc, #260]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a20:	2202      	movs	r2, #2
 8006a22:	4013      	ands	r3, r2
 8006a24:	d108      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e074      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a2e:	2202      	movs	r2, #2
 8006a30:	4013      	ands	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e06d      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a38:	4b3a      	ldr	r3, [pc, #232]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2207      	movs	r2, #7
 8006a3e:	4393      	bics	r3, r2
 8006a40:	0019      	movs	r1, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	4b37      	ldr	r3, [pc, #220]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4c:	f7fd fa78 	bl	8003f40 <HAL_GetTick>
 8006a50:	0003      	movs	r3, r0
 8006a52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a54:	e009      	b.n	8006a6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a56:	f7fd fa73 	bl	8003f40 <HAL_GetTick>
 8006a5a:	0002      	movs	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	4a2f      	ldr	r2, [pc, #188]	@ (8006b20 <HAL_RCC_ClockConfig+0x1f4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e054      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2238      	movs	r2, #56	@ 0x38
 8006a70:	401a      	ands	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1ec      	bne.n	8006a56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b27      	ldr	r3, [pc, #156]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2207      	movs	r2, #7
 8006a82:	4013      	ands	r3, r2
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d21e      	bcs.n	8006ac8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2207      	movs	r2, #7
 8006a90:	4393      	bics	r3, r2
 8006a92:	0019      	movs	r1, r3
 8006a94:	4b21      	ldr	r3, [pc, #132]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a9c:	f7fd fa50 	bl	8003f40 <HAL_GetTick>
 8006aa0:	0003      	movs	r3, r0
 8006aa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aa4:	e009      	b.n	8006aba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa6:	f7fd fa4b 	bl	8003f40 <HAL_GetTick>
 8006aaa:	0002      	movs	r2, r0
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <HAL_RCC_ClockConfig+0x1f4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e02c      	b.n	8006b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006aba:	4b18      	ldr	r3, [pc, #96]	@ (8006b1c <HAL_RCC_ClockConfig+0x1f0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d1ee      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2204      	movs	r2, #4
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ad2:	4b14      	ldr	r3, [pc, #80]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <HAL_RCC_ClockConfig+0x200>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	0019      	movs	r1, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68da      	ldr	r2, [r3, #12]
 8006ae0:	4b10      	ldr	r3, [pc, #64]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006ae6:	f000 f829 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 8006aea:	0001      	movs	r1, r0
 8006aec:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <HAL_RCC_ClockConfig+0x1f8>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	220f      	movs	r2, #15
 8006af4:	401a      	ands	r2, r3
 8006af6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b30 <HAL_RCC_ClockConfig+0x204>)
 8006af8:	0092      	lsls	r2, r2, #2
 8006afa:	58d3      	ldr	r3, [r2, r3]
 8006afc:	221f      	movs	r2, #31
 8006afe:	4013      	ands	r3, r2
 8006b00:	000a      	movs	r2, r1
 8006b02:	40da      	lsrs	r2, r3
 8006b04:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <HAL_RCC_ClockConfig+0x208>)
 8006b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <HAL_RCC_ClockConfig+0x20c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7fd f9bb 	bl	8003e88 <HAL_InitTick>
 8006b12:	0003      	movs	r3, r0
}
 8006b14:	0018      	movs	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b004      	add	sp, #16
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40022000 	.word	0x40022000
 8006b20:	00001388 	.word	0x00001388
 8006b24:	40021000 	.word	0x40021000
 8006b28:	fffff0ff 	.word	0xfffff0ff
 8006b2c:	ffff8fff 	.word	0xffff8fff
 8006b30:	08008c3c 	.word	0x08008c3c
 8006b34:	20000018 	.word	0x20000018
 8006b38:	2000001c 	.word	0x2000001c

08006b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b42:	4b3c      	ldr	r3, [pc, #240]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	2238      	movs	r2, #56	@ 0x38
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d10f      	bne.n	8006b6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006b4c:	4b39      	ldr	r3, [pc, #228]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	0adb      	lsrs	r3, r3, #11
 8006b52:	2207      	movs	r2, #7
 8006b54:	4013      	ands	r3, r2
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	0013      	movs	r3, r2
 8006b5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	4835      	ldr	r0, [pc, #212]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b62:	f7f9 fad9 	bl	8000118 <__udivsi3>
 8006b66:	0003      	movs	r3, r0
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	e05d      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b6c:	4b31      	ldr	r3, [pc, #196]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2238      	movs	r2, #56	@ 0x38
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d102      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b78:	4b30      	ldr	r3, [pc, #192]	@ (8006c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	e054      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2238      	movs	r2, #56	@ 0x38
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d138      	bne.n	8006bfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2203      	movs	r2, #3
 8006b90:	4013      	ands	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b94:	4b27      	ldr	r3, [pc, #156]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	091b      	lsrs	r3, r3, #4
 8006b9a:	2207      	movs	r2, #7
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b03      	cmp	r3, #3
 8006ba6:	d10d      	bne.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4824      	ldr	r0, [pc, #144]	@ (8006c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8006bac:	f7f9 fab4 	bl	8000118 <__udivsi3>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	0a1b      	lsrs	r3, r3, #8
 8006bba:	227f      	movs	r2, #127	@ 0x7f
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	434b      	muls	r3, r1
 8006bc0:	617b      	str	r3, [r7, #20]
        break;
 8006bc2:	e00d      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	481c      	ldr	r0, [pc, #112]	@ (8006c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006bc8:	f7f9 faa6 	bl	8000118 <__udivsi3>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	0019      	movs	r1, r3
 8006bd0:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	227f      	movs	r2, #127	@ 0x7f
 8006bd8:	4013      	ands	r3, r2
 8006bda:	434b      	muls	r3, r1
 8006bdc:	617b      	str	r3, [r7, #20]
        break;
 8006bde:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006be0:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	0f5b      	lsrs	r3, r3, #29
 8006be6:	2207      	movs	r2, #7
 8006be8:	4013      	ands	r3, r2
 8006bea:	3301      	adds	r3, #1
 8006bec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	6978      	ldr	r0, [r7, #20]
 8006bf2:	f7f9 fa91 	bl	8000118 <__udivsi3>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	e015      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2238      	movs	r2, #56	@ 0x38
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d103      	bne.n	8006c10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006c08:	2380      	movs	r3, #128	@ 0x80
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	e00b      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006c10:	4b08      	ldr	r3, [pc, #32]	@ (8006c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2238      	movs	r2, #56	@ 0x38
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b18      	cmp	r3, #24
 8006c1a:	d103      	bne.n	8006c24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006c1c:	23fa      	movs	r3, #250	@ 0xfa
 8006c1e:	01db      	lsls	r3, r3, #7
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	e001      	b.n	8006c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006c28:	693b      	ldr	r3, [r7, #16]
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b006      	add	sp, #24
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	40021000 	.word	0x40021000
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	007a1200 	.word	0x007a1200

08006c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c44:	4b02      	ldr	r3, [pc, #8]	@ (8006c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c46:	681b      	ldr	r3, [r3, #0]
}
 8006c48:	0018      	movs	r0, r3
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			@ (mov r8, r8)
 8006c50:	20000018 	.word	0x20000018

08006c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c54:	b5b0      	push	{r4, r5, r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006c58:	f7ff fff2 	bl	8006c40 <HAL_RCC_GetHCLKFreq>
 8006c5c:	0004      	movs	r4, r0
 8006c5e:	f7ff faf9 	bl	8006254 <LL_RCC_GetAPB1Prescaler>
 8006c62:	0003      	movs	r3, r0
 8006c64:	0b1a      	lsrs	r2, r3, #12
 8006c66:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c68:	0092      	lsls	r2, r2, #2
 8006c6a:	58d3      	ldr	r3, [r2, r3]
 8006c6c:	221f      	movs	r2, #31
 8006c6e:	4013      	ands	r3, r2
 8006c70:	40dc      	lsrs	r4, r3
 8006c72:	0023      	movs	r3, r4
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7a:	46c0      	nop			@ (mov r8, r8)
 8006c7c:	08008c7c 	.word	0x08008c7c

08006c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006c88:	2313      	movs	r3, #19
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c90:	2312      	movs	r3, #18
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2380      	movs	r3, #128	@ 0x80
 8006c9e:	029b      	lsls	r3, r3, #10
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006ca4:	e0ad      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca6:	2011      	movs	r0, #17
 8006ca8:	183b      	adds	r3, r7, r0
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cae:	4b47      	ldr	r3, [pc, #284]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cb2:	2380      	movs	r3, #128	@ 0x80
 8006cb4:	055b      	lsls	r3, r3, #21
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	d110      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	4b44      	ldr	r3, [pc, #272]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cbe:	4b43      	ldr	r3, [pc, #268]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cc0:	2180      	movs	r1, #128	@ 0x80
 8006cc2:	0549      	lsls	r1, r1, #21
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006cc8:	4b40      	ldr	r3, [pc, #256]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ccc:	2380      	movs	r3, #128	@ 0x80
 8006cce:	055b      	lsls	r3, r3, #21
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	2201      	movs	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006ce2:	2180      	movs	r1, #128	@ 0x80
 8006ce4:	0049      	lsls	r1, r1, #1
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cea:	f7fd f929 	bl	8003f40 <HAL_GetTick>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf2:	e00b      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cf4:	f7fd f924 	bl	8003f40 <HAL_GetTick>
 8006cf8:	0002      	movs	r2, r0
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d904      	bls.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006d02:	2313      	movs	r3, #19
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2203      	movs	r2, #3
 8006d08:	701a      	strb	r2, [r3, #0]
        break;
 8006d0a:	e005      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0c:	4b30      	ldr	r3, [pc, #192]	@ (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2380      	movs	r3, #128	@ 0x80
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4013      	ands	r3, r2
 8006d16:	d0ed      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006d18:	2313      	movs	r3, #19
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d15e      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d22:	4b2a      	ldr	r3, [pc, #168]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d26:	23c0      	movs	r3, #192	@ 0xc0
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d019      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d014      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d3e:	4b23      	ldr	r3, [pc, #140]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d42:	4a24      	ldr	r2, [pc, #144]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d48:	4b20      	ldr	r3, [pc, #128]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d4e:	2180      	movs	r1, #128	@ 0x80
 8006d50:	0249      	lsls	r1, r1, #9
 8006d52:	430a      	orrs	r2, r1
 8006d54:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d56:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d5c:	491e      	ldr	r1, [pc, #120]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006d5e:	400a      	ands	r2, r1
 8006d60:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d62:	4b1a      	ldr	r3, [pc, #104]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d016      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fd f8e6 	bl	8003f40 <HAL_GetTick>
 8006d74:	0003      	movs	r3, r0
 8006d76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d78:	e00c      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7a:	f7fd f8e1 	bl	8003f40 <HAL_GetTick>
 8006d7e:	0002      	movs	r2, r0
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	4a15      	ldr	r2, [pc, #84]	@ (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d904      	bls.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006d8a:	2313      	movs	r3, #19
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2203      	movs	r2, #3
 8006d90:	701a      	strb	r2, [r3, #0]
            break;
 8006d92:	e004      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d94:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d98:	2202      	movs	r2, #2
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d0ed      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006d9e:	2313      	movs	r3, #19
 8006da0:	18fb      	adds	r3, r7, r3
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006da8:	4b08      	ldr	r3, [pc, #32]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dac:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	0019      	movs	r1, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db6:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006db8:	430a      	orrs	r2, r1
 8006dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006dbc:	e016      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dbe:	2312      	movs	r3, #18
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	2213      	movs	r2, #19
 8006dc4:	18ba      	adds	r2, r7, r2
 8006dc6:	7812      	ldrb	r2, [r2, #0]
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e00f      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40007000 	.word	0x40007000
 8006dd4:	fffffcff 	.word	0xfffffcff
 8006dd8:	fffeffff 	.word	0xfffeffff
 8006ddc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	2312      	movs	r3, #18
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	2213      	movs	r2, #19
 8006de6:	18ba      	adds	r2, r7, r2
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dec:	2311      	movs	r3, #17
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df6:	4bb6      	ldr	r3, [pc, #728]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dfa:	4bb5      	ldr	r3, [pc, #724]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006dfc:	49b5      	ldr	r1, [pc, #724]	@ (80070d4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8006dfe:	400a      	ands	r2, r1
 8006e00:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2201      	movs	r2, #1
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d009      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e0c:	4bb0      	ldr	r3, [pc, #704]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e10:	2203      	movs	r2, #3
 8006e12:	4393      	bics	r3, r2
 8006e14:	0019      	movs	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	4bad      	ldr	r3, [pc, #692]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2202      	movs	r2, #2
 8006e26:	4013      	ands	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e2a:	4ba9      	ldr	r3, [pc, #676]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2e:	220c      	movs	r2, #12
 8006e30:	4393      	bics	r3, r2
 8006e32:	0019      	movs	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	4ba5      	ldr	r3, [pc, #660]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2204      	movs	r2, #4
 8006e44:	4013      	ands	r3, r2
 8006e46:	d009      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e48:	4ba1      	ldr	r3, [pc, #644]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4c:	2230      	movs	r2, #48	@ 0x30
 8006e4e:	4393      	bics	r3, r2
 8006e50:	0019      	movs	r1, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	4b9e      	ldr	r3, [pc, #632]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2210      	movs	r2, #16
 8006e62:	4013      	ands	r3, r2
 8006e64:	d009      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e66:	4b9a      	ldr	r3, [pc, #616]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e6a:	4a9b      	ldr	r2, [pc, #620]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	0019      	movs	r1, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	4b96      	ldr	r3, [pc, #600]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e76:	430a      	orrs	r2, r1
 8006e78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	2380      	movs	r3, #128	@ 0x80
 8006e80:	015b      	lsls	r3, r3, #5
 8006e82:	4013      	ands	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8006e86:	4b92      	ldr	r3, [pc, #584]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8a:	4a94      	ldr	r2, [pc, #592]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	0019      	movs	r1, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	4b8e      	ldr	r3, [pc, #568]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e96:	430a      	orrs	r2, r1
 8006e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	2380      	movs	r3, #128	@ 0x80
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eaa:	4a8d      	ldr	r2, [pc, #564]	@ (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	0019      	movs	r1, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eb4:	4b86      	ldr	r3, [pc, #536]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ec6:	4b82      	ldr	r3, [pc, #520]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eca:	4a86      	ldr	r2, [pc, #536]	@ (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	0019      	movs	r1, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ee4:	4b7a      	ldr	r3, [pc, #488]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee8:	4a7f      	ldr	r2, [pc, #508]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	4b77      	ldr	r3, [pc, #476]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2240      	movs	r2, #64	@ 0x40
 8006efe:	4013      	ands	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f02:	4b73      	ldr	r3, [pc, #460]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f06:	4a79      	ldr	r2, [pc, #484]	@ (80070ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	0019      	movs	r1, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f12:	430a      	orrs	r2, r1
 8006f14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	2380      	movs	r3, #128	@ 0x80
 8006f1c:	01db      	lsls	r3, r3, #7
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d015      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f22:	4b6b      	ldr	r3, [pc, #428]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	0899      	lsrs	r1, r3, #2
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f2e:	4b68      	ldr	r3, [pc, #416]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f30:	430a      	orrs	r2, r1
 8006f32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f38:	2380      	movs	r3, #128	@ 0x80
 8006f3a:	05db      	lsls	r3, r3, #23
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006f40:	4b63      	ldr	r3, [pc, #396]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	4b62      	ldr	r3, [pc, #392]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f46:	2180      	movs	r1, #128	@ 0x80
 8006f48:	0249      	lsls	r1, r1, #9
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	2380      	movs	r3, #128	@ 0x80
 8006f54:	031b      	lsls	r3, r3, #12
 8006f56:	4013      	ands	r3, r2
 8006f58:	d009      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5e:	2240      	movs	r2, #64	@ 0x40
 8006f60:	4393      	bics	r3, r2
 8006f62:	0019      	movs	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f68:	4b59      	ldr	r3, [pc, #356]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	2380      	movs	r3, #128	@ 0x80
 8006f74:	039b      	lsls	r3, r3, #14
 8006f76:	4013      	ands	r3, r2
 8006f78:	d016      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006f7a:	4b55      	ldr	r3, [pc, #340]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80070f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f88:	4b51      	ldr	r3, [pc, #324]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	03db      	lsls	r3, r3, #15
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d106      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fa0:	2180      	movs	r1, #128	@ 0x80
 8006fa2:	0449      	lsls	r1, r1, #17
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	03db      	lsls	r3, r3, #15
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d016      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006fb4:	4b46      	ldr	r3, [pc, #280]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb8:	4a4e      	ldr	r2, [pc, #312]	@ (80070f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	0019      	movs	r1, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fc2:	4b43      	ldr	r3, [pc, #268]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	045b      	lsls	r3, r3, #17
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	0449      	lsls	r1, r1, #17
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	4013      	ands	r3, r2
 8006fec:	d014      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	4393      	bics	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1a      	ldr	r2, [r3, #32]
 8006ffc:	4b34      	ldr	r3, [pc, #208]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006ffe:	430a      	orrs	r2, r1
 8007000:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d106      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800700a:	4b31      	ldr	r3, [pc, #196]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	4b30      	ldr	r3, [pc, #192]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007010:	2180      	movs	r1, #128	@ 0x80
 8007012:	0249      	lsls	r1, r1, #9
 8007014:	430a      	orrs	r2, r1
 8007016:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	019b      	lsls	r3, r3, #6
 8007020:	4013      	ands	r3, r2
 8007022:	d014      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007024:	4b2a      	ldr	r3, [pc, #168]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007028:	220c      	movs	r2, #12
 800702a:	4393      	bics	r3, r2
 800702c:	0019      	movs	r1, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007032:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007034:	430a      	orrs	r2, r1
 8007036:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	2b04      	cmp	r3, #4
 800703e:	d106      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007040:	4b23      	ldr	r3, [pc, #140]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	4b22      	ldr	r3, [pc, #136]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007046:	2180      	movs	r1, #128	@ 0x80
 8007048:	0249      	lsls	r1, r1, #9
 800704a:	430a      	orrs	r2, r1
 800704c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	2380      	movs	r3, #128	@ 0x80
 8007054:	045b      	lsls	r3, r3, #17
 8007056:	4013      	ands	r3, r2
 8007058:	d016      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800705a:	4b1d      	ldr	r3, [pc, #116]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800705c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800705e:	4a22      	ldr	r2, [pc, #136]	@ (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007060:	4013      	ands	r3, r2
 8007062:	0019      	movs	r1, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007068:	4b19      	ldr	r3, [pc, #100]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800706a:	430a      	orrs	r2, r1
 800706c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007072:	2380      	movs	r3, #128	@ 0x80
 8007074:	019b      	lsls	r3, r3, #6
 8007076:	429a      	cmp	r2, r3
 8007078:	d106      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800707a:	4b15      	ldr	r3, [pc, #84]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800707c:	68da      	ldr	r2, [r3, #12]
 800707e:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007080:	2180      	movs	r1, #128	@ 0x80
 8007082:	0449      	lsls	r1, r1, #17
 8007084:	430a      	orrs	r2, r1
 8007086:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	2380      	movs	r3, #128	@ 0x80
 800708e:	049b      	lsls	r3, r3, #18
 8007090:	4013      	ands	r3, r2
 8007092:	d016      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007094:	4b0e      	ldr	r3, [pc, #56]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007098:	4a10      	ldr	r2, [pc, #64]	@ (80070dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800709a:	4013      	ands	r3, r2
 800709c:	0019      	movs	r1, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070a2:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070a4:	430a      	orrs	r2, r1
 80070a6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d106      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80070b4:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070ba:	2180      	movs	r1, #128	@ 0x80
 80070bc:	0449      	lsls	r1, r1, #17
 80070be:	430a      	orrs	r2, r1
 80070c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80070c2:	2312      	movs	r3, #18
 80070c4:	18fb      	adds	r3, r7, r3
 80070c6:	781b      	ldrb	r3, [r3, #0]
}
 80070c8:	0018      	movs	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	b006      	add	sp, #24
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40021000 	.word	0x40021000
 80070d4:	efffffff 	.word	0xefffffff
 80070d8:	fffff3ff 	.word	0xfffff3ff
 80070dc:	fffffcff 	.word	0xfffffcff
 80070e0:	fff3ffff 	.word	0xfff3ffff
 80070e4:	ffcfffff 	.word	0xffcfffff
 80070e8:	ffffcfff 	.word	0xffffcfff
 80070ec:	ffff3fff 	.word	0xffff3fff
 80070f0:	ffbfffff 	.word	0xffbfffff
 80070f4:	feffffff 	.word	0xfeffffff

080070f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e046      	b.n	8007198 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2288      	movs	r2, #136	@ 0x88
 800710e:	589b      	ldr	r3, [r3, r2]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2284      	movs	r2, #132	@ 0x84
 8007118:	2100      	movs	r1, #0
 800711a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0018      	movs	r0, r3
 8007120:	f7fc fda6 	bl	8003c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2288      	movs	r2, #136	@ 0x88
 8007128:	2124      	movs	r1, #36	@ 0x24
 800712a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2101      	movs	r1, #1
 8007138:	438a      	bics	r2, r1
 800713a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	0018      	movs	r0, r3
 8007148:	f000 fc26 	bl	8007998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 f8cc 	bl	80072ec <UART_SetConfig>
 8007154:	0003      	movs	r3, r0
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e01c      	b.n	8007198 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	490d      	ldr	r1, [pc, #52]	@ (80071a0 <HAL_UART_Init+0xa8>)
 800716a:	400a      	ands	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	212a      	movs	r1, #42	@ 0x2a
 800717a:	438a      	bics	r2, r1
 800717c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2101      	movs	r1, #1
 800718a:	430a      	orrs	r2, r1
 800718c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	0018      	movs	r0, r3
 8007192:	f000 fcb5 	bl	8007b00 <UART_CheckIdleState>
 8007196:	0003      	movs	r3, r0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	ffffb7ff 	.word	0xffffb7ff

080071a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	@ 0x28
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	1dbb      	adds	r3, r7, #6
 80071b2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2288      	movs	r2, #136	@ 0x88
 80071b8:	589b      	ldr	r3, [r3, r2]
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d000      	beq.n	80071c0 <HAL_UART_Transmit+0x1c>
 80071be:	e090      	b.n	80072e2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_UART_Transmit+0x2a>
 80071c6:	1dbb      	adds	r3, r7, #6
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e088      	b.n	80072e4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	2380      	movs	r3, #128	@ 0x80
 80071d8:	015b      	lsls	r3, r3, #5
 80071da:	429a      	cmp	r2, r3
 80071dc:	d109      	bne.n	80071f2 <HAL_UART_Transmit+0x4e>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d105      	bne.n	80071f2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2201      	movs	r2, #1
 80071ea:	4013      	ands	r3, r2
 80071ec:	d001      	beq.n	80071f2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e078      	b.n	80072e4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2290      	movs	r2, #144	@ 0x90
 80071f6:	2100      	movs	r1, #0
 80071f8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2288      	movs	r2, #136	@ 0x88
 80071fe:	2121      	movs	r1, #33	@ 0x21
 8007200:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007202:	f7fc fe9d 	bl	8003f40 <HAL_GetTick>
 8007206:	0003      	movs	r3, r0
 8007208:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1dba      	adds	r2, r7, #6
 800720e:	2154      	movs	r1, #84	@ 0x54
 8007210:	8812      	ldrh	r2, [r2, #0]
 8007212:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1dba      	adds	r2, r7, #6
 8007218:	2156      	movs	r1, #86	@ 0x56
 800721a:	8812      	ldrh	r2, [r2, #0]
 800721c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	2380      	movs	r3, #128	@ 0x80
 8007224:	015b      	lsls	r3, r3, #5
 8007226:	429a      	cmp	r2, r3
 8007228:	d108      	bne.n	800723c <HAL_UART_Transmit+0x98>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e003      	b.n	8007244 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007244:	e030      	b.n	80072a8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	0013      	movs	r3, r2
 8007250:	2200      	movs	r2, #0
 8007252:	2180      	movs	r1, #128	@ 0x80
 8007254:	f000 fcfe 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 8007258:	1e03      	subs	r3, r0, #0
 800725a:	d005      	beq.n	8007268 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2288      	movs	r2, #136	@ 0x88
 8007260:	2120      	movs	r1, #32
 8007262:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e03d      	b.n	80072e4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	001a      	movs	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	05d2      	lsls	r2, r2, #23
 800727a:	0dd2      	lsrs	r2, r2, #23
 800727c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3302      	adds	r3, #2
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e007      	b.n	8007296 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2256      	movs	r2, #86	@ 0x56
 800729a:	5a9b      	ldrh	r3, [r3, r2]
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b299      	uxth	r1, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2256      	movs	r2, #86	@ 0x56
 80072a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2256      	movs	r2, #86	@ 0x56
 80072ac:	5a9b      	ldrh	r3, [r3, r2]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1c8      	bne.n	8007246 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	0013      	movs	r3, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	2140      	movs	r1, #64	@ 0x40
 80072c2:	f000 fcc7 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 80072c6:	1e03      	subs	r3, r0, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2288      	movs	r2, #136	@ 0x88
 80072ce:	2120      	movs	r1, #32
 80072d0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e006      	b.n	80072e4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2288      	movs	r2, #136	@ 0x88
 80072da:	2120      	movs	r1, #32
 80072dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e000      	b.n	80072e4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80072e2:	2302      	movs	r3, #2
  }
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b008      	add	sp, #32
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	b5b0      	push	{r4, r5, r7, lr}
 80072ee:	b090      	sub	sp, #64	@ 0x40
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f4:	231a      	movs	r3, #26
 80072f6:	2220      	movs	r2, #32
 80072f8:	189b      	adds	r3, r3, r2
 80072fa:	19db      	adds	r3, r3, r7
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	431a      	orrs	r2, r3
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	431a      	orrs	r2, r3
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	4313      	orrs	r3, r2
 8007316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4ac1      	ldr	r2, [pc, #772]	@ (8007624 <UART_SetConfig+0x338>)
 8007320:	4013      	ands	r3, r2
 8007322:	0019      	movs	r1, r3
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732a:	430b      	orrs	r3, r1
 800732c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	4abc      	ldr	r2, [pc, #752]	@ (8007628 <UART_SetConfig+0x33c>)
 8007336:	4013      	ands	r3, r2
 8007338:	0018      	movs	r0, r3
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	68d9      	ldr	r1, [r3, #12]
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	0003      	movs	r3, r0
 8007344:	430b      	orrs	r3, r1
 8007346:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4ab6      	ldr	r2, [pc, #728]	@ (800762c <UART_SetConfig+0x340>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d009      	beq.n	800736c <UART_SetConfig+0x80>
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4ab4      	ldr	r2, [pc, #720]	@ (8007630 <UART_SetConfig+0x344>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007368:	4313      	orrs	r3, r2
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4ab0      	ldr	r2, [pc, #704]	@ (8007634 <UART_SetConfig+0x348>)
 8007374:	4013      	ands	r3, r2
 8007376:	0019      	movs	r1, r3
 8007378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800737e:	430b      	orrs	r3, r1
 8007380:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	220f      	movs	r2, #15
 800738a:	4393      	bics	r3, r2
 800738c:	0018      	movs	r0, r3
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	0003      	movs	r3, r0
 8007398:	430b      	orrs	r3, r1
 800739a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4aa5      	ldr	r2, [pc, #660]	@ (8007638 <UART_SetConfig+0x34c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d131      	bne.n	800740a <UART_SetConfig+0x11e>
 80073a6:	4ba5      	ldr	r3, [pc, #660]	@ (800763c <UART_SetConfig+0x350>)
 80073a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073aa:	2203      	movs	r2, #3
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d01d      	beq.n	80073ee <UART_SetConfig+0x102>
 80073b2:	d823      	bhi.n	80073fc <UART_SetConfig+0x110>
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d00c      	beq.n	80073d2 <UART_SetConfig+0xe6>
 80073b8:	d820      	bhi.n	80073fc <UART_SetConfig+0x110>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <UART_SetConfig+0xd8>
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d00e      	beq.n	80073e0 <UART_SetConfig+0xf4>
 80073c2:	e01b      	b.n	80073fc <UART_SetConfig+0x110>
 80073c4:	231b      	movs	r3, #27
 80073c6:	2220      	movs	r2, #32
 80073c8:	189b      	adds	r3, r3, r2
 80073ca:	19db      	adds	r3, r3, r7
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	e154      	b.n	800767c <UART_SetConfig+0x390>
 80073d2:	231b      	movs	r3, #27
 80073d4:	2220      	movs	r2, #32
 80073d6:	189b      	adds	r3, r3, r2
 80073d8:	19db      	adds	r3, r3, r7
 80073da:	2202      	movs	r2, #2
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	e14d      	b.n	800767c <UART_SetConfig+0x390>
 80073e0:	231b      	movs	r3, #27
 80073e2:	2220      	movs	r2, #32
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	19db      	adds	r3, r3, r7
 80073e8:	2204      	movs	r2, #4
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e146      	b.n	800767c <UART_SetConfig+0x390>
 80073ee:	231b      	movs	r3, #27
 80073f0:	2220      	movs	r2, #32
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	19db      	adds	r3, r3, r7
 80073f6:	2208      	movs	r2, #8
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e13f      	b.n	800767c <UART_SetConfig+0x390>
 80073fc:	231b      	movs	r3, #27
 80073fe:	2220      	movs	r2, #32
 8007400:	189b      	adds	r3, r3, r2
 8007402:	19db      	adds	r3, r3, r7
 8007404:	2210      	movs	r2, #16
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e138      	b.n	800767c <UART_SetConfig+0x390>
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a8c      	ldr	r2, [pc, #560]	@ (8007640 <UART_SetConfig+0x354>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d131      	bne.n	8007478 <UART_SetConfig+0x18c>
 8007414:	4b89      	ldr	r3, [pc, #548]	@ (800763c <UART_SetConfig+0x350>)
 8007416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007418:	220c      	movs	r2, #12
 800741a:	4013      	ands	r3, r2
 800741c:	2b0c      	cmp	r3, #12
 800741e:	d01d      	beq.n	800745c <UART_SetConfig+0x170>
 8007420:	d823      	bhi.n	800746a <UART_SetConfig+0x17e>
 8007422:	2b08      	cmp	r3, #8
 8007424:	d00c      	beq.n	8007440 <UART_SetConfig+0x154>
 8007426:	d820      	bhi.n	800746a <UART_SetConfig+0x17e>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <UART_SetConfig+0x146>
 800742c:	2b04      	cmp	r3, #4
 800742e:	d00e      	beq.n	800744e <UART_SetConfig+0x162>
 8007430:	e01b      	b.n	800746a <UART_SetConfig+0x17e>
 8007432:	231b      	movs	r3, #27
 8007434:	2220      	movs	r2, #32
 8007436:	189b      	adds	r3, r3, r2
 8007438:	19db      	adds	r3, r3, r7
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	e11d      	b.n	800767c <UART_SetConfig+0x390>
 8007440:	231b      	movs	r3, #27
 8007442:	2220      	movs	r2, #32
 8007444:	189b      	adds	r3, r3, r2
 8007446:	19db      	adds	r3, r3, r7
 8007448:	2202      	movs	r2, #2
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e116      	b.n	800767c <UART_SetConfig+0x390>
 800744e:	231b      	movs	r3, #27
 8007450:	2220      	movs	r2, #32
 8007452:	189b      	adds	r3, r3, r2
 8007454:	19db      	adds	r3, r3, r7
 8007456:	2204      	movs	r2, #4
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	e10f      	b.n	800767c <UART_SetConfig+0x390>
 800745c:	231b      	movs	r3, #27
 800745e:	2220      	movs	r2, #32
 8007460:	189b      	adds	r3, r3, r2
 8007462:	19db      	adds	r3, r3, r7
 8007464:	2208      	movs	r2, #8
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e108      	b.n	800767c <UART_SetConfig+0x390>
 800746a:	231b      	movs	r3, #27
 800746c:	2220      	movs	r2, #32
 800746e:	189b      	adds	r3, r3, r2
 8007470:	19db      	adds	r3, r3, r7
 8007472:	2210      	movs	r2, #16
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	e101      	b.n	800767c <UART_SetConfig+0x390>
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a71      	ldr	r2, [pc, #452]	@ (8007644 <UART_SetConfig+0x358>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d131      	bne.n	80074e6 <UART_SetConfig+0x1fa>
 8007482:	4b6e      	ldr	r3, [pc, #440]	@ (800763c <UART_SetConfig+0x350>)
 8007484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007486:	2230      	movs	r2, #48	@ 0x30
 8007488:	4013      	ands	r3, r2
 800748a:	2b30      	cmp	r3, #48	@ 0x30
 800748c:	d01d      	beq.n	80074ca <UART_SetConfig+0x1de>
 800748e:	d823      	bhi.n	80074d8 <UART_SetConfig+0x1ec>
 8007490:	2b20      	cmp	r3, #32
 8007492:	d00c      	beq.n	80074ae <UART_SetConfig+0x1c2>
 8007494:	d820      	bhi.n	80074d8 <UART_SetConfig+0x1ec>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UART_SetConfig+0x1b4>
 800749a:	2b10      	cmp	r3, #16
 800749c:	d00e      	beq.n	80074bc <UART_SetConfig+0x1d0>
 800749e:	e01b      	b.n	80074d8 <UART_SetConfig+0x1ec>
 80074a0:	231b      	movs	r3, #27
 80074a2:	2220      	movs	r2, #32
 80074a4:	189b      	adds	r3, r3, r2
 80074a6:	19db      	adds	r3, r3, r7
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	e0e6      	b.n	800767c <UART_SetConfig+0x390>
 80074ae:	231b      	movs	r3, #27
 80074b0:	2220      	movs	r2, #32
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	19db      	adds	r3, r3, r7
 80074b6:	2202      	movs	r2, #2
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e0df      	b.n	800767c <UART_SetConfig+0x390>
 80074bc:	231b      	movs	r3, #27
 80074be:	2220      	movs	r2, #32
 80074c0:	189b      	adds	r3, r3, r2
 80074c2:	19db      	adds	r3, r3, r7
 80074c4:	2204      	movs	r2, #4
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e0d8      	b.n	800767c <UART_SetConfig+0x390>
 80074ca:	231b      	movs	r3, #27
 80074cc:	2220      	movs	r2, #32
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	19db      	adds	r3, r3, r7
 80074d2:	2208      	movs	r2, #8
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e0d1      	b.n	800767c <UART_SetConfig+0x390>
 80074d8:	231b      	movs	r3, #27
 80074da:	2220      	movs	r2, #32
 80074dc:	189b      	adds	r3, r3, r2
 80074de:	19db      	adds	r3, r3, r7
 80074e0:	2210      	movs	r2, #16
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	e0ca      	b.n	800767c <UART_SetConfig+0x390>
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a57      	ldr	r2, [pc, #348]	@ (8007648 <UART_SetConfig+0x35c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d106      	bne.n	80074fe <UART_SetConfig+0x212>
 80074f0:	231b      	movs	r3, #27
 80074f2:	2220      	movs	r2, #32
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	19db      	adds	r3, r3, r7
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e0be      	b.n	800767c <UART_SetConfig+0x390>
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a52      	ldr	r2, [pc, #328]	@ (800764c <UART_SetConfig+0x360>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d106      	bne.n	8007516 <UART_SetConfig+0x22a>
 8007508:	231b      	movs	r3, #27
 800750a:	2220      	movs	r2, #32
 800750c:	189b      	adds	r3, r3, r2
 800750e:	19db      	adds	r3, r3, r7
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e0b2      	b.n	800767c <UART_SetConfig+0x390>
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a4d      	ldr	r2, [pc, #308]	@ (8007650 <UART_SetConfig+0x364>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d106      	bne.n	800752e <UART_SetConfig+0x242>
 8007520:	231b      	movs	r3, #27
 8007522:	2220      	movs	r2, #32
 8007524:	189b      	adds	r3, r3, r2
 8007526:	19db      	adds	r3, r3, r7
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	e0a6      	b.n	800767c <UART_SetConfig+0x390>
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a3e      	ldr	r2, [pc, #248]	@ (800762c <UART_SetConfig+0x340>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d13e      	bne.n	80075b6 <UART_SetConfig+0x2ca>
 8007538:	4b40      	ldr	r3, [pc, #256]	@ (800763c <UART_SetConfig+0x350>)
 800753a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800753c:	23c0      	movs	r3, #192	@ 0xc0
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	4013      	ands	r3, r2
 8007542:	22c0      	movs	r2, #192	@ 0xc0
 8007544:	0112      	lsls	r2, r2, #4
 8007546:	4293      	cmp	r3, r2
 8007548:	d027      	beq.n	800759a <UART_SetConfig+0x2ae>
 800754a:	22c0      	movs	r2, #192	@ 0xc0
 800754c:	0112      	lsls	r2, r2, #4
 800754e:	4293      	cmp	r3, r2
 8007550:	d82a      	bhi.n	80075a8 <UART_SetConfig+0x2bc>
 8007552:	2280      	movs	r2, #128	@ 0x80
 8007554:	0112      	lsls	r2, r2, #4
 8007556:	4293      	cmp	r3, r2
 8007558:	d011      	beq.n	800757e <UART_SetConfig+0x292>
 800755a:	2280      	movs	r2, #128	@ 0x80
 800755c:	0112      	lsls	r2, r2, #4
 800755e:	4293      	cmp	r3, r2
 8007560:	d822      	bhi.n	80075a8 <UART_SetConfig+0x2bc>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <UART_SetConfig+0x284>
 8007566:	2280      	movs	r2, #128	@ 0x80
 8007568:	00d2      	lsls	r2, r2, #3
 800756a:	4293      	cmp	r3, r2
 800756c:	d00e      	beq.n	800758c <UART_SetConfig+0x2a0>
 800756e:	e01b      	b.n	80075a8 <UART_SetConfig+0x2bc>
 8007570:	231b      	movs	r3, #27
 8007572:	2220      	movs	r2, #32
 8007574:	189b      	adds	r3, r3, r2
 8007576:	19db      	adds	r3, r3, r7
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	e07e      	b.n	800767c <UART_SetConfig+0x390>
 800757e:	231b      	movs	r3, #27
 8007580:	2220      	movs	r2, #32
 8007582:	189b      	adds	r3, r3, r2
 8007584:	19db      	adds	r3, r3, r7
 8007586:	2202      	movs	r2, #2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	e077      	b.n	800767c <UART_SetConfig+0x390>
 800758c:	231b      	movs	r3, #27
 800758e:	2220      	movs	r2, #32
 8007590:	189b      	adds	r3, r3, r2
 8007592:	19db      	adds	r3, r3, r7
 8007594:	2204      	movs	r2, #4
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e070      	b.n	800767c <UART_SetConfig+0x390>
 800759a:	231b      	movs	r3, #27
 800759c:	2220      	movs	r2, #32
 800759e:	189b      	adds	r3, r3, r2
 80075a0:	19db      	adds	r3, r3, r7
 80075a2:	2208      	movs	r2, #8
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	e069      	b.n	800767c <UART_SetConfig+0x390>
 80075a8:	231b      	movs	r3, #27
 80075aa:	2220      	movs	r2, #32
 80075ac:	189b      	adds	r3, r3, r2
 80075ae:	19db      	adds	r3, r3, r7
 80075b0:	2210      	movs	r2, #16
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	e062      	b.n	800767c <UART_SetConfig+0x390>
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007630 <UART_SetConfig+0x344>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d157      	bne.n	8007670 <UART_SetConfig+0x384>
 80075c0:	4b1e      	ldr	r3, [pc, #120]	@ (800763c <UART_SetConfig+0x350>)
 80075c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075c4:	23c0      	movs	r3, #192	@ 0xc0
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4013      	ands	r3, r2
 80075ca:	22c0      	movs	r2, #192	@ 0xc0
 80075cc:	0092      	lsls	r2, r2, #2
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d040      	beq.n	8007654 <UART_SetConfig+0x368>
 80075d2:	22c0      	movs	r2, #192	@ 0xc0
 80075d4:	0092      	lsls	r2, r2, #2
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d843      	bhi.n	8007662 <UART_SetConfig+0x376>
 80075da:	2280      	movs	r2, #128	@ 0x80
 80075dc:	0092      	lsls	r2, r2, #2
 80075de:	4293      	cmp	r3, r2
 80075e0:	d011      	beq.n	8007606 <UART_SetConfig+0x31a>
 80075e2:	2280      	movs	r2, #128	@ 0x80
 80075e4:	0092      	lsls	r2, r2, #2
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d83b      	bhi.n	8007662 <UART_SetConfig+0x376>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <UART_SetConfig+0x30c>
 80075ee:	2280      	movs	r2, #128	@ 0x80
 80075f0:	0052      	lsls	r2, r2, #1
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00e      	beq.n	8007614 <UART_SetConfig+0x328>
 80075f6:	e034      	b.n	8007662 <UART_SetConfig+0x376>
 80075f8:	231b      	movs	r3, #27
 80075fa:	2220      	movs	r2, #32
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	19db      	adds	r3, r3, r7
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e03a      	b.n	800767c <UART_SetConfig+0x390>
 8007606:	231b      	movs	r3, #27
 8007608:	2220      	movs	r2, #32
 800760a:	189b      	adds	r3, r3, r2
 800760c:	19db      	adds	r3, r3, r7
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e033      	b.n	800767c <UART_SetConfig+0x390>
 8007614:	231b      	movs	r3, #27
 8007616:	2220      	movs	r2, #32
 8007618:	189b      	adds	r3, r3, r2
 800761a:	19db      	adds	r3, r3, r7
 800761c:	2204      	movs	r2, #4
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e02c      	b.n	800767c <UART_SetConfig+0x390>
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	cfff69f3 	.word	0xcfff69f3
 8007628:	ffffcfff 	.word	0xffffcfff
 800762c:	40008000 	.word	0x40008000
 8007630:	40008400 	.word	0x40008400
 8007634:	11fff4ff 	.word	0x11fff4ff
 8007638:	40013800 	.word	0x40013800
 800763c:	40021000 	.word	0x40021000
 8007640:	40004400 	.word	0x40004400
 8007644:	40004800 	.word	0x40004800
 8007648:	40004c00 	.word	0x40004c00
 800764c:	40005000 	.word	0x40005000
 8007650:	40013c00 	.word	0x40013c00
 8007654:	231b      	movs	r3, #27
 8007656:	2220      	movs	r2, #32
 8007658:	189b      	adds	r3, r3, r2
 800765a:	19db      	adds	r3, r3, r7
 800765c:	2208      	movs	r2, #8
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e00c      	b.n	800767c <UART_SetConfig+0x390>
 8007662:	231b      	movs	r3, #27
 8007664:	2220      	movs	r2, #32
 8007666:	189b      	adds	r3, r3, r2
 8007668:	19db      	adds	r3, r3, r7
 800766a:	2210      	movs	r2, #16
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e005      	b.n	800767c <UART_SetConfig+0x390>
 8007670:	231b      	movs	r3, #27
 8007672:	2220      	movs	r2, #32
 8007674:	189b      	adds	r3, r3, r2
 8007676:	19db      	adds	r3, r3, r7
 8007678:	2210      	movs	r2, #16
 800767a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4ac1      	ldr	r2, [pc, #772]	@ (8007988 <UART_SetConfig+0x69c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d005      	beq.n	8007692 <UART_SetConfig+0x3a6>
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4ac0      	ldr	r2, [pc, #768]	@ (800798c <UART_SetConfig+0x6a0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d000      	beq.n	8007692 <UART_SetConfig+0x3a6>
 8007690:	e093      	b.n	80077ba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007692:	231b      	movs	r3, #27
 8007694:	2220      	movs	r2, #32
 8007696:	189b      	adds	r3, r3, r2
 8007698:	19db      	adds	r3, r3, r7
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b08      	cmp	r3, #8
 800769e:	d015      	beq.n	80076cc <UART_SetConfig+0x3e0>
 80076a0:	dc18      	bgt.n	80076d4 <UART_SetConfig+0x3e8>
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d00d      	beq.n	80076c2 <UART_SetConfig+0x3d6>
 80076a6:	dc15      	bgt.n	80076d4 <UART_SetConfig+0x3e8>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <UART_SetConfig+0x3c6>
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d005      	beq.n	80076bc <UART_SetConfig+0x3d0>
 80076b0:	e010      	b.n	80076d4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b2:	f7ff facf 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 80076b6:	0003      	movs	r3, r0
 80076b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ba:	e014      	b.n	80076e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076bc:	4bb4      	ldr	r3, [pc, #720]	@ (8007990 <UART_SetConfig+0x6a4>)
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c0:	e011      	b.n	80076e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076c2:	f7ff fa3b 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 80076c6:	0003      	movs	r3, r0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076ca:	e00c      	b.n	80076e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076cc:	2380      	movs	r3, #128	@ 0x80
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d2:	e008      	b.n	80076e6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80076d8:	231a      	movs	r3, #26
 80076da:	2220      	movs	r2, #32
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	19db      	adds	r3, r3, r7
 80076e0:	2201      	movs	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
        break;
 80076e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d100      	bne.n	80076ee <UART_SetConfig+0x402>
 80076ec:	e135      	b.n	800795a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076f2:	4ba8      	ldr	r3, [pc, #672]	@ (8007994 <UART_SetConfig+0x6a8>)
 80076f4:	0052      	lsls	r2, r2, #1
 80076f6:	5ad3      	ldrh	r3, [r2, r3]
 80076f8:	0019      	movs	r1, r3
 80076fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80076fc:	f7f8 fd0c 	bl	8000118 <__udivsi3>
 8007700:	0003      	movs	r3, r0
 8007702:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	0013      	movs	r3, r2
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	189b      	adds	r3, r3, r2
 800770e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007710:	429a      	cmp	r2, r3
 8007712:	d305      	bcc.n	8007720 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800771a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800771c:	429a      	cmp	r2, r3
 800771e:	d906      	bls.n	800772e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007720:	231a      	movs	r3, #26
 8007722:	2220      	movs	r2, #32
 8007724:	189b      	adds	r3, r3, r2
 8007726:	19db      	adds	r3, r3, r7
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e044      	b.n	80077b8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800772e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	2300      	movs	r3, #0
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800773a:	4b96      	ldr	r3, [pc, #600]	@ (8007994 <UART_SetConfig+0x6a8>)
 800773c:	0052      	lsls	r2, r2, #1
 800773e:	5ad3      	ldrh	r3, [r2, r3]
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	69b8      	ldr	r0, [r7, #24]
 800774c:	69f9      	ldr	r1, [r7, #28]
 800774e:	f7f8 fe93 	bl	8000478 <__aeabi_uldivmod>
 8007752:	0002      	movs	r2, r0
 8007754:	000b      	movs	r3, r1
 8007756:	0e11      	lsrs	r1, r2, #24
 8007758:	021d      	lsls	r5, r3, #8
 800775a:	430d      	orrs	r5, r1
 800775c:	0214      	lsls	r4, r2, #8
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	68f9      	ldr	r1, [r7, #12]
 800776e:	1900      	adds	r0, r0, r4
 8007770:	4169      	adcs	r1, r5
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	2300      	movs	r3, #0
 800777a:	607b      	str	r3, [r7, #4]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f7f8 fe7a 	bl	8000478 <__aeabi_uldivmod>
 8007784:	0002      	movs	r2, r0
 8007786:	000b      	movs	r3, r1
 8007788:	0013      	movs	r3, r2
 800778a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800778c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778e:	23c0      	movs	r3, #192	@ 0xc0
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	429a      	cmp	r2, r3
 8007794:	d309      	bcc.n	80077aa <UART_SetConfig+0x4be>
 8007796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007798:	2380      	movs	r3, #128	@ 0x80
 800779a:	035b      	lsls	r3, r3, #13
 800779c:	429a      	cmp	r2, r3
 800779e:	d204      	bcs.n	80077aa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	e006      	b.n	80077b8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80077aa:	231a      	movs	r3, #26
 80077ac:	2220      	movs	r2, #32
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	19db      	adds	r3, r3, r7
 80077b2:	2201      	movs	r2, #1
 80077b4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80077b6:	e0d0      	b.n	800795a <UART_SetConfig+0x66e>
 80077b8:	e0cf      	b.n	800795a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	69da      	ldr	r2, [r3, #28]
 80077be:	2380      	movs	r3, #128	@ 0x80
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d000      	beq.n	80077c8 <UART_SetConfig+0x4dc>
 80077c6:	e070      	b.n	80078aa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80077c8:	231b      	movs	r3, #27
 80077ca:	2220      	movs	r2, #32
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	19db      	adds	r3, r3, r7
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d015      	beq.n	8007802 <UART_SetConfig+0x516>
 80077d6:	dc18      	bgt.n	800780a <UART_SetConfig+0x51e>
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d00d      	beq.n	80077f8 <UART_SetConfig+0x50c>
 80077dc:	dc15      	bgt.n	800780a <UART_SetConfig+0x51e>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UART_SetConfig+0x4fc>
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d005      	beq.n	80077f2 <UART_SetConfig+0x506>
 80077e6:	e010      	b.n	800780a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e8:	f7ff fa34 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 80077ec:	0003      	movs	r3, r0
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077f0:	e014      	b.n	800781c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f2:	4b67      	ldr	r3, [pc, #412]	@ (8007990 <UART_SetConfig+0x6a4>)
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077f6:	e011      	b.n	800781c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f8:	f7ff f9a0 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 80077fc:	0003      	movs	r3, r0
 80077fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007800:	e00c      	b.n	800781c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007808:	e008      	b.n	800781c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800780e:	231a      	movs	r3, #26
 8007810:	2220      	movs	r2, #32
 8007812:	189b      	adds	r3, r3, r2
 8007814:	19db      	adds	r3, r3, r7
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
        break;
 800781a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800781c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781e:	2b00      	cmp	r3, #0
 8007820:	d100      	bne.n	8007824 <UART_SetConfig+0x538>
 8007822:	e09a      	b.n	800795a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007828:	4b5a      	ldr	r3, [pc, #360]	@ (8007994 <UART_SetConfig+0x6a8>)
 800782a:	0052      	lsls	r2, r2, #1
 800782c:	5ad3      	ldrh	r3, [r2, r3]
 800782e:	0019      	movs	r1, r3
 8007830:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007832:	f7f8 fc71 	bl	8000118 <__udivsi3>
 8007836:	0003      	movs	r3, r0
 8007838:	005a      	lsls	r2, r3, #1
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	18d2      	adds	r2, r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	0019      	movs	r1, r3
 8007848:	0010      	movs	r0, r2
 800784a:	f7f8 fc65 	bl	8000118 <__udivsi3>
 800784e:	0003      	movs	r3, r0
 8007850:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d921      	bls.n	800789c <UART_SetConfig+0x5b0>
 8007858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800785a:	2380      	movs	r3, #128	@ 0x80
 800785c:	025b      	lsls	r3, r3, #9
 800785e:	429a      	cmp	r2, r3
 8007860:	d21c      	bcs.n	800789c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	b29a      	uxth	r2, r3
 8007866:	200e      	movs	r0, #14
 8007868:	2420      	movs	r4, #32
 800786a:	1903      	adds	r3, r0, r4
 800786c:	19db      	adds	r3, r3, r7
 800786e:	210f      	movs	r1, #15
 8007870:	438a      	bics	r2, r1
 8007872:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	b29b      	uxth	r3, r3
 800787a:	2207      	movs	r2, #7
 800787c:	4013      	ands	r3, r2
 800787e:	b299      	uxth	r1, r3
 8007880:	1903      	adds	r3, r0, r4
 8007882:	19db      	adds	r3, r3, r7
 8007884:	1902      	adds	r2, r0, r4
 8007886:	19d2      	adds	r2, r2, r7
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	1902      	adds	r2, r0, r4
 8007894:	19d2      	adds	r2, r2, r7
 8007896:	8812      	ldrh	r2, [r2, #0]
 8007898:	60da      	str	r2, [r3, #12]
 800789a:	e05e      	b.n	800795a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800789c:	231a      	movs	r3, #26
 800789e:	2220      	movs	r2, #32
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	19db      	adds	r3, r3, r7
 80078a4:	2201      	movs	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e057      	b.n	800795a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078aa:	231b      	movs	r3, #27
 80078ac:	2220      	movs	r2, #32
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d015      	beq.n	80078e4 <UART_SetConfig+0x5f8>
 80078b8:	dc18      	bgt.n	80078ec <UART_SetConfig+0x600>
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d00d      	beq.n	80078da <UART_SetConfig+0x5ee>
 80078be:	dc15      	bgt.n	80078ec <UART_SetConfig+0x600>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <UART_SetConfig+0x5de>
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d005      	beq.n	80078d4 <UART_SetConfig+0x5e8>
 80078c8:	e010      	b.n	80078ec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078ca:	f7ff f9c3 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 80078ce:	0003      	movs	r3, r0
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078d2:	e014      	b.n	80078fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b2e      	ldr	r3, [pc, #184]	@ (8007990 <UART_SetConfig+0x6a4>)
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078d8:	e011      	b.n	80078fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7ff f92f 	bl	8006b3c <HAL_RCC_GetSysClockFreq>
 80078de:	0003      	movs	r3, r0
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078e2:	e00c      	b.n	80078fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e4:	2380      	movs	r3, #128	@ 0x80
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078ea:	e008      	b.n	80078fe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80078f0:	231a      	movs	r3, #26
 80078f2:	2220      	movs	r2, #32
 80078f4:	189b      	adds	r3, r3, r2
 80078f6:	19db      	adds	r3, r3, r7
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
        break;
 80078fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	d02a      	beq.n	800795a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007908:	4b22      	ldr	r3, [pc, #136]	@ (8007994 <UART_SetConfig+0x6a8>)
 800790a:	0052      	lsls	r2, r2, #1
 800790c:	5ad3      	ldrh	r3, [r2, r3]
 800790e:	0019      	movs	r1, r3
 8007910:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007912:	f7f8 fc01 	bl	8000118 <__udivsi3>
 8007916:	0003      	movs	r3, r0
 8007918:	001a      	movs	r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	18d2      	adds	r2, r2, r3
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	0019      	movs	r1, r3
 8007928:	0010      	movs	r0, r2
 800792a:	f7f8 fbf5 	bl	8000118 <__udivsi3>
 800792e:	0003      	movs	r3, r0
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d90a      	bls.n	800794e <UART_SetConfig+0x662>
 8007938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800793a:	2380      	movs	r3, #128	@ 0x80
 800793c:	025b      	lsls	r3, r3, #9
 800793e:	429a      	cmp	r2, r3
 8007940:	d205      	bcs.n	800794e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	b29a      	uxth	r2, r3
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
 800794c:	e005      	b.n	800795a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800794e:	231a      	movs	r3, #26
 8007950:	2220      	movs	r2, #32
 8007952:	189b      	adds	r3, r3, r2
 8007954:	19db      	adds	r3, r3, r7
 8007956:	2201      	movs	r2, #1
 8007958:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	226a      	movs	r2, #106	@ 0x6a
 800795e:	2101      	movs	r1, #1
 8007960:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2268      	movs	r2, #104	@ 0x68
 8007966:	2101      	movs	r1, #1
 8007968:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	2200      	movs	r2, #0
 800796e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007972:	2200      	movs	r2, #0
 8007974:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007976:	231a      	movs	r3, #26
 8007978:	2220      	movs	r2, #32
 800797a:	189b      	adds	r3, r3, r2
 800797c:	19db      	adds	r3, r3, r7
 800797e:	781b      	ldrb	r3, [r3, #0]
}
 8007980:	0018      	movs	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	b010      	add	sp, #64	@ 0x40
 8007986:	bdb0      	pop	{r4, r5, r7, pc}
 8007988:	40008000 	.word	0x40008000
 800798c:	40008400 	.word	0x40008400
 8007990:	00f42400 	.word	0x00f42400
 8007994:	08008cac 	.word	0x08008cac

08007998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	2208      	movs	r2, #8
 80079a6:	4013      	ands	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4a4a      	ldr	r2, [pc, #296]	@ (8007adc <UART_AdvFeatureConfig+0x144>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	0019      	movs	r1, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	2201      	movs	r2, #1
 80079c8:	4013      	ands	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4a43      	ldr	r2, [pc, #268]	@ (8007ae0 <UART_AdvFeatureConfig+0x148>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e8:	2202      	movs	r2, #2
 80079ea:	4013      	ands	r3, r2
 80079ec:	d00b      	beq.n	8007a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a3b      	ldr	r2, [pc, #236]	@ (8007ae4 <UART_AdvFeatureConfig+0x14c>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	0019      	movs	r1, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	d00b      	beq.n	8007a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4a34      	ldr	r2, [pc, #208]	@ (8007ae8 <UART_AdvFeatureConfig+0x150>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	0019      	movs	r1, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	2210      	movs	r2, #16
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4a2c      	ldr	r2, [pc, #176]	@ (8007aec <UART_AdvFeatureConfig+0x154>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	0019      	movs	r1, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4e:	2220      	movs	r2, #32
 8007a50:	4013      	ands	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	4a25      	ldr	r2, [pc, #148]	@ (8007af0 <UART_AdvFeatureConfig+0x158>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	0019      	movs	r1, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	2240      	movs	r2, #64	@ 0x40
 8007a72:	4013      	ands	r3, r2
 8007a74:	d01d      	beq.n	8007ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007af4 <UART_AdvFeatureConfig+0x15c>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	0019      	movs	r1, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	035b      	lsls	r3, r3, #13
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d10b      	bne.n	8007ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <UART_AdvFeatureConfig+0x160>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	2280      	movs	r2, #128	@ 0x80
 8007ab8:	4013      	ands	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8007afc <UART_AdvFeatureConfig+0x164>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	0019      	movs	r1, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]
  }
}
 8007ad4:	46c0      	nop			@ (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	ffff7fff 	.word	0xffff7fff
 8007ae0:	fffdffff 	.word	0xfffdffff
 8007ae4:	fffeffff 	.word	0xfffeffff
 8007ae8:	fffbffff 	.word	0xfffbffff
 8007aec:	ffffefff 	.word	0xffffefff
 8007af0:	ffffdfff 	.word	0xffffdfff
 8007af4:	ffefffff 	.word	0xffefffff
 8007af8:	ff9fffff 	.word	0xff9fffff
 8007afc:	fff7ffff 	.word	0xfff7ffff

08007b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b092      	sub	sp, #72	@ 0x48
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2290      	movs	r2, #144	@ 0x90
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b10:	f7fc fa16 	bl	8003f40 <HAL_GetTick>
 8007b14:	0003      	movs	r3, r0
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2208      	movs	r2, #8
 8007b20:	4013      	ands	r3, r2
 8007b22:	2b08      	cmp	r3, #8
 8007b24:	d12d      	bne.n	8007b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b28:	2280      	movs	r2, #128	@ 0x80
 8007b2a:	0391      	lsls	r1, r2, #14
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	4a47      	ldr	r2, [pc, #284]	@ (8007c4c <UART_CheckIdleState+0x14c>)
 8007b30:	9200      	str	r2, [sp, #0]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f000 f88e 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 8007b38:	1e03      	subs	r3, r0, #0
 8007b3a:	d022      	beq.n	8007b82 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b46:	2301      	movs	r3, #1
 8007b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	f383 8810 	msr	PRIMASK, r3
}
 8007b50:	46c0      	nop			@ (mov r8, r8)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2180      	movs	r1, #128	@ 0x80
 8007b5e:	438a      	bics	r2, r1
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	f383 8810 	msr	PRIMASK, r3
}
 8007b6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2288      	movs	r2, #136	@ 0x88
 8007b72:	2120      	movs	r1, #32
 8007b74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2284      	movs	r2, #132	@ 0x84
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e060      	b.n	8007c44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d146      	bne.n	8007c1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b92:	2280      	movs	r2, #128	@ 0x80
 8007b94:	03d1      	lsls	r1, r2, #15
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4a2c      	ldr	r2, [pc, #176]	@ (8007c4c <UART_CheckIdleState+0x14c>)
 8007b9a:	9200      	str	r2, [sp, #0]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f000 f859 	bl	8007c54 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	1e03      	subs	r3, r0, #0
 8007ba4:	d03b      	beq.n	8007c1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8007baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f383 8810 	msr	PRIMASK, r3
}
 8007bba:	46c0      	nop			@ (mov r8, r8)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4922      	ldr	r1, [pc, #136]	@ (8007c50 <UART_CheckIdleState+0x150>)
 8007bc8:	400a      	ands	r2, r1
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f383 8810 	msr	PRIMASK, r3
}
 8007bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bde:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007be2:	2301      	movs	r3, #1
 8007be4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f383 8810 	msr	PRIMASK, r3
}
 8007bec:	46c0      	nop			@ (mov r8, r8)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	438a      	bics	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	f383 8810 	msr	PRIMASK, r3
}
 8007c08:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	228c      	movs	r2, #140	@ 0x8c
 8007c0e:	2120      	movs	r1, #32
 8007c10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2284      	movs	r2, #132	@ 0x84
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e012      	b.n	8007c44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2288      	movs	r2, #136	@ 0x88
 8007c22:	2120      	movs	r1, #32
 8007c24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	228c      	movs	r2, #140	@ 0x8c
 8007c2a:	2120      	movs	r1, #32
 8007c2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2284      	movs	r2, #132	@ 0x84
 8007c3e:	2100      	movs	r1, #0
 8007c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	0018      	movs	r0, r3
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b010      	add	sp, #64	@ 0x40
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	01ffffff 	.word	0x01ffffff
 8007c50:	fffffedf 	.word	0xfffffedf

08007c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	1dfb      	adds	r3, r7, #7
 8007c62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c64:	e051      	b.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	d04e      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6c:	f7fc f968 	bl	8003f40 <HAL_GetTick>
 8007c70:	0002      	movs	r2, r0
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d302      	bcc.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e051      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	4013      	ands	r3, r2
 8007c90:	d03b      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b80      	cmp	r3, #128	@ 0x80
 8007c96:	d038      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b40      	cmp	r3, #64	@ 0x40
 8007c9c:	d035      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d111      	bne.n	8007cd0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f000 f83c 	bl	8007d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2290      	movs	r2, #144	@ 0x90
 8007cc0:	2108      	movs	r1, #8
 8007cc2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2284      	movs	r2, #132	@ 0x84
 8007cc8:	2100      	movs	r1, #0
 8007cca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e02c      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69da      	ldr	r2, [r3, #28]
 8007cd6:	2380      	movs	r3, #128	@ 0x80
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	401a      	ands	r2, r3
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d112      	bne.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2280      	movs	r2, #128	@ 0x80
 8007cea:	0112      	lsls	r2, r2, #4
 8007cec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f000 f81f 	bl	8007d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2290      	movs	r2, #144	@ 0x90
 8007cfa:	2120      	movs	r1, #32
 8007cfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2284      	movs	r2, #132	@ 0x84
 8007d02:	2100      	movs	r1, #0
 8007d04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e00f      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	4013      	ands	r3, r2
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	425a      	negs	r2, r3
 8007d1a:	4153      	adcs	r3, r2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	001a      	movs	r2, r3
 8007d20:	1dfb      	adds	r3, r7, #7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d09e      	beq.n	8007c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b004      	add	sp, #16
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08e      	sub	sp, #56	@ 0x38
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d40:	617b      	str	r3, [r7, #20]
  return(result);
 8007d42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d46:	2301      	movs	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	f383 8810 	msr	PRIMASK, r3
}
 8007d50:	46c0      	nop			@ (mov r8, r8)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4926      	ldr	r1, [pc, #152]	@ (8007df8 <UART_EndRxTransfer+0xc4>)
 8007d5e:	400a      	ands	r2, r1
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	f383 8810 	msr	PRIMASK, r3
}
 8007d6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d72:	623b      	str	r3, [r7, #32]
  return(result);
 8007d74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d78:	2301      	movs	r3, #1
 8007d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	f383 8810 	msr	PRIMASK, r3
}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	491b      	ldr	r1, [pc, #108]	@ (8007dfc <UART_EndRxTransfer+0xc8>)
 8007d90:	400a      	ands	r2, r1
 8007d92:	609a      	str	r2, [r3, #8]
 8007d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	f383 8810 	msr	PRIMASK, r3
}
 8007d9e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d118      	bne.n	8007dda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007db2:	2301      	movs	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f383 8810 	msr	PRIMASK, r3
}
 8007dbc:	46c0      	nop			@ (mov r8, r8)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2110      	movs	r1, #16
 8007dca:	438a      	bics	r2, r1
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f383 8810 	msr	PRIMASK, r3
}
 8007dd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	228c      	movs	r2, #140	@ 0x8c
 8007dde:	2120      	movs	r1, #32
 8007de0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b00e      	add	sp, #56	@ 0x38
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			@ (mov r8, r8)
 8007df8:	fffffedf 	.word	0xfffffedf
 8007dfc:	effffffe 	.word	0xeffffffe

08007e00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2284      	movs	r2, #132	@ 0x84
 8007e0c:	5c9b      	ldrb	r3, [r3, r2]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e027      	b.n	8007e66 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2284      	movs	r2, #132	@ 0x84
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2288      	movs	r2, #136	@ 0x88
 8007e22:	2124      	movs	r1, #36	@ 0x24
 8007e24:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2101      	movs	r1, #1
 8007e3a:	438a      	bics	r2, r1
 8007e3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4a0b      	ldr	r2, [pc, #44]	@ (8007e70 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2288      	movs	r2, #136	@ 0x88
 8007e58:	2120      	movs	r1, #32
 8007e5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2284      	movs	r2, #132	@ 0x84
 8007e60:	2100      	movs	r1, #0
 8007e62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b004      	add	sp, #16
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			@ (mov r8, r8)
 8007e70:	dfffffff 	.word	0xdfffffff

08007e74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2284      	movs	r2, #132	@ 0x84
 8007e82:	5c9b      	ldrb	r3, [r3, r2]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e02e      	b.n	8007eea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2284      	movs	r2, #132	@ 0x84
 8007e90:	2101      	movs	r1, #1
 8007e92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2288      	movs	r2, #136	@ 0x88
 8007e98:	2124      	movs	r1, #36	@ 0x24
 8007e9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2101      	movs	r1, #1
 8007eb0:	438a      	bics	r2, r1
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	08d9      	lsrs	r1, r3, #3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f000 f854 	bl	8007f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2288      	movs	r2, #136	@ 0x88
 8007edc:	2120      	movs	r1, #32
 8007ede:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2284      	movs	r2, #132	@ 0x84
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2284      	movs	r2, #132	@ 0x84
 8007f02:	5c9b      	ldrb	r3, [r3, r2]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e02f      	b.n	8007f6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2284      	movs	r2, #132	@ 0x84
 8007f10:	2101      	movs	r1, #1
 8007f12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2288      	movs	r2, #136	@ 0x88
 8007f18:	2124      	movs	r1, #36	@ 0x24
 8007f1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2101      	movs	r1, #1
 8007f30:	438a      	bics	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	0019      	movs	r1, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 f813 	bl	8007f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2288      	movs	r2, #136	@ 0x88
 8007f5e:	2120      	movs	r1, #32
 8007f60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2284      	movs	r2, #132	@ 0x84
 8007f66:	2100      	movs	r1, #0
 8007f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	b004      	add	sp, #16
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	f1ffffff 	.word	0xf1ffffff

08007f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d108      	bne.n	8007f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	226a      	movs	r2, #106	@ 0x6a
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2268      	movs	r2, #104	@ 0x68
 8007f94:	2101      	movs	r1, #1
 8007f96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f98:	e043      	b.n	8008022 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f9a:	260f      	movs	r6, #15
 8007f9c:	19bb      	adds	r3, r7, r6
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fa2:	200e      	movs	r0, #14
 8007fa4:	183b      	adds	r3, r7, r0
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	0e5b      	lsrs	r3, r3, #25
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	240d      	movs	r4, #13
 8007fb6:	193b      	adds	r3, r7, r4
 8007fb8:	2107      	movs	r1, #7
 8007fba:	400a      	ands	r2, r1
 8007fbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	0f5b      	lsrs	r3, r3, #29
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	250c      	movs	r5, #12
 8007fca:	197b      	adds	r3, r7, r5
 8007fcc:	2107      	movs	r1, #7
 8007fce:	400a      	ands	r2, r1
 8007fd0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd2:	183b      	adds	r3, r7, r0
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	197a      	adds	r2, r7, r5
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	4914      	ldr	r1, [pc, #80]	@ (800802c <UARTEx_SetNbDataToProcess+0xb4>)
 8007fdc:	5c8a      	ldrb	r2, [r1, r2]
 8007fde:	435a      	muls	r2, r3
 8007fe0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fe2:	197b      	adds	r3, r7, r5
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	4a12      	ldr	r2, [pc, #72]	@ (8008030 <UARTEx_SetNbDataToProcess+0xb8>)
 8007fe8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fea:	0019      	movs	r1, r3
 8007fec:	f7f8 f91e 	bl	800022c <__divsi3>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	b299      	uxth	r1, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	226a      	movs	r2, #106	@ 0x6a
 8007ff8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ffa:	19bb      	adds	r3, r7, r6
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	193a      	adds	r2, r7, r4
 8008000:	7812      	ldrb	r2, [r2, #0]
 8008002:	490a      	ldr	r1, [pc, #40]	@ (800802c <UARTEx_SetNbDataToProcess+0xb4>)
 8008004:	5c8a      	ldrb	r2, [r1, r2]
 8008006:	435a      	muls	r2, r3
 8008008:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800800a:	193b      	adds	r3, r7, r4
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	4a08      	ldr	r2, [pc, #32]	@ (8008030 <UARTEx_SetNbDataToProcess+0xb8>)
 8008010:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008012:	0019      	movs	r1, r3
 8008014:	f7f8 f90a 	bl	800022c <__divsi3>
 8008018:	0003      	movs	r3, r0
 800801a:	b299      	uxth	r1, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2268      	movs	r2, #104	@ 0x68
 8008020:	5299      	strh	r1, [r3, r2]
}
 8008022:	46c0      	nop			@ (mov r8, r8)
 8008024:	46bd      	mov	sp, r7
 8008026:	b005      	add	sp, #20
 8008028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800802a:	46c0      	nop			@ (mov r8, r8)
 800802c:	08008cc4 	.word	0x08008cc4
 8008030:	08008ccc 	.word	0x08008ccc

08008034 <sniprintf>:
 8008034:	b40c      	push	{r2, r3}
 8008036:	b530      	push	{r4, r5, lr}
 8008038:	4b17      	ldr	r3, [pc, #92]	@ (8008098 <sniprintf+0x64>)
 800803a:	000c      	movs	r4, r1
 800803c:	681d      	ldr	r5, [r3, #0]
 800803e:	b09d      	sub	sp, #116	@ 0x74
 8008040:	2900      	cmp	r1, #0
 8008042:	da08      	bge.n	8008056 <sniprintf+0x22>
 8008044:	238b      	movs	r3, #139	@ 0x8b
 8008046:	2001      	movs	r0, #1
 8008048:	602b      	str	r3, [r5, #0]
 800804a:	4240      	negs	r0, r0
 800804c:	b01d      	add	sp, #116	@ 0x74
 800804e:	bc30      	pop	{r4, r5}
 8008050:	bc08      	pop	{r3}
 8008052:	b002      	add	sp, #8
 8008054:	4718      	bx	r3
 8008056:	2382      	movs	r3, #130	@ 0x82
 8008058:	466a      	mov	r2, sp
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	8293      	strh	r3, [r2, #20]
 800805e:	2300      	movs	r3, #0
 8008060:	9002      	str	r0, [sp, #8]
 8008062:	9006      	str	r0, [sp, #24]
 8008064:	4299      	cmp	r1, r3
 8008066:	d000      	beq.n	800806a <sniprintf+0x36>
 8008068:	1e4b      	subs	r3, r1, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9307      	str	r3, [sp, #28]
 800806e:	2301      	movs	r3, #1
 8008070:	466a      	mov	r2, sp
 8008072:	425b      	negs	r3, r3
 8008074:	82d3      	strh	r3, [r2, #22]
 8008076:	0028      	movs	r0, r5
 8008078:	ab21      	add	r3, sp, #132	@ 0x84
 800807a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800807c:	a902      	add	r1, sp, #8
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	f000 f8a0 	bl	80081c4 <_svfiprintf_r>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	da01      	bge.n	800808c <sniprintf+0x58>
 8008088:	238b      	movs	r3, #139	@ 0x8b
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	2c00      	cmp	r4, #0
 800808e:	d0dd      	beq.n	800804c <sniprintf+0x18>
 8008090:	2200      	movs	r2, #0
 8008092:	9b02      	ldr	r3, [sp, #8]
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e7d9      	b.n	800804c <sniprintf+0x18>
 8008098:	20000024 	.word	0x20000024

0800809c <memset>:
 800809c:	0003      	movs	r3, r0
 800809e:	1882      	adds	r2, r0, r2
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	7019      	strb	r1, [r3, #0]
 80080a8:	3301      	adds	r3, #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <__errno>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	@ (80080b4 <__errno+0x8>)
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	4770      	bx	lr
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	20000024 	.word	0x20000024

080080b8 <__libc_init_array>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	2600      	movs	r6, #0
 80080bc:	4c0c      	ldr	r4, [pc, #48]	@ (80080f0 <__libc_init_array+0x38>)
 80080be:	4d0d      	ldr	r5, [pc, #52]	@ (80080f4 <__libc_init_array+0x3c>)
 80080c0:	1b64      	subs	r4, r4, r5
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	42a6      	cmp	r6, r4
 80080c6:	d109      	bne.n	80080dc <__libc_init_array+0x24>
 80080c8:	2600      	movs	r6, #0
 80080ca:	f000 fc63 	bl	8008994 <_init>
 80080ce:	4c0a      	ldr	r4, [pc, #40]	@ (80080f8 <__libc_init_array+0x40>)
 80080d0:	4d0a      	ldr	r5, [pc, #40]	@ (80080fc <__libc_init_array+0x44>)
 80080d2:	1b64      	subs	r4, r4, r5
 80080d4:	10a4      	asrs	r4, r4, #2
 80080d6:	42a6      	cmp	r6, r4
 80080d8:	d105      	bne.n	80080e6 <__libc_init_array+0x2e>
 80080da:	bd70      	pop	{r4, r5, r6, pc}
 80080dc:	00b3      	lsls	r3, r6, #2
 80080de:	58eb      	ldr	r3, [r5, r3]
 80080e0:	4798      	blx	r3
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7ee      	b.n	80080c4 <__libc_init_array+0xc>
 80080e6:	00b3      	lsls	r3, r6, #2
 80080e8:	58eb      	ldr	r3, [r5, r3]
 80080ea:	4798      	blx	r3
 80080ec:	3601      	adds	r6, #1
 80080ee:	e7f2      	b.n	80080d6 <__libc_init_array+0x1e>
 80080f0:	08008d10 	.word	0x08008d10
 80080f4:	08008d10 	.word	0x08008d10
 80080f8:	08008d14 	.word	0x08008d14
 80080fc:	08008d10 	.word	0x08008d10

08008100 <__retarget_lock_acquire_recursive>:
 8008100:	4770      	bx	lr

08008102 <__retarget_lock_release_recursive>:
 8008102:	4770      	bx	lr

08008104 <__ssputs_r>:
 8008104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008106:	688e      	ldr	r6, [r1, #8]
 8008108:	b085      	sub	sp, #20
 800810a:	001f      	movs	r7, r3
 800810c:	000c      	movs	r4, r1
 800810e:	680b      	ldr	r3, [r1, #0]
 8008110:	9002      	str	r0, [sp, #8]
 8008112:	9203      	str	r2, [sp, #12]
 8008114:	42be      	cmp	r6, r7
 8008116:	d830      	bhi.n	800817a <__ssputs_r+0x76>
 8008118:	210c      	movs	r1, #12
 800811a:	5e62      	ldrsh	r2, [r4, r1]
 800811c:	2190      	movs	r1, #144	@ 0x90
 800811e:	00c9      	lsls	r1, r1, #3
 8008120:	420a      	tst	r2, r1
 8008122:	d028      	beq.n	8008176 <__ssputs_r+0x72>
 8008124:	2003      	movs	r0, #3
 8008126:	6921      	ldr	r1, [r4, #16]
 8008128:	1a5b      	subs	r3, r3, r1
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	6963      	ldr	r3, [r4, #20]
 800812e:	4343      	muls	r3, r0
 8008130:	9801      	ldr	r0, [sp, #4]
 8008132:	0fdd      	lsrs	r5, r3, #31
 8008134:	18ed      	adds	r5, r5, r3
 8008136:	1c7b      	adds	r3, r7, #1
 8008138:	181b      	adds	r3, r3, r0
 800813a:	106d      	asrs	r5, r5, #1
 800813c:	42ab      	cmp	r3, r5
 800813e:	d900      	bls.n	8008142 <__ssputs_r+0x3e>
 8008140:	001d      	movs	r5, r3
 8008142:	0552      	lsls	r2, r2, #21
 8008144:	d528      	bpl.n	8008198 <__ssputs_r+0x94>
 8008146:	0029      	movs	r1, r5
 8008148:	9802      	ldr	r0, [sp, #8]
 800814a:	f000 f95b 	bl	8008404 <_malloc_r>
 800814e:	1e06      	subs	r6, r0, #0
 8008150:	d02c      	beq.n	80081ac <__ssputs_r+0xa8>
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	6921      	ldr	r1, [r4, #16]
 8008156:	f000 fbc2 	bl	80088de <memcpy>
 800815a:	89a2      	ldrh	r2, [r4, #12]
 800815c:	4b18      	ldr	r3, [pc, #96]	@ (80081c0 <__ssputs_r+0xbc>)
 800815e:	401a      	ands	r2, r3
 8008160:	2380      	movs	r3, #128	@ 0x80
 8008162:	4313      	orrs	r3, r2
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	6126      	str	r6, [r4, #16]
 800816a:	18f6      	adds	r6, r6, r3
 800816c:	6026      	str	r6, [r4, #0]
 800816e:	003e      	movs	r6, r7
 8008170:	6165      	str	r5, [r4, #20]
 8008172:	1aed      	subs	r5, r5, r3
 8008174:	60a5      	str	r5, [r4, #8]
 8008176:	42be      	cmp	r6, r7
 8008178:	d900      	bls.n	800817c <__ssputs_r+0x78>
 800817a:	003e      	movs	r6, r7
 800817c:	0032      	movs	r2, r6
 800817e:	9903      	ldr	r1, [sp, #12]
 8008180:	6820      	ldr	r0, [r4, #0]
 8008182:	f000 fb7c 	bl	800887e <memmove>
 8008186:	2000      	movs	r0, #0
 8008188:	68a3      	ldr	r3, [r4, #8]
 800818a:	1b9b      	subs	r3, r3, r6
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	199b      	adds	r3, r3, r6
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	b005      	add	sp, #20
 8008196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008198:	002a      	movs	r2, r5
 800819a:	9802      	ldr	r0, [sp, #8]
 800819c:	f000 fb40 	bl	8008820 <_realloc_r>
 80081a0:	1e06      	subs	r6, r0, #0
 80081a2:	d1e0      	bne.n	8008166 <__ssputs_r+0x62>
 80081a4:	6921      	ldr	r1, [r4, #16]
 80081a6:	9802      	ldr	r0, [sp, #8]
 80081a8:	f000 fba2 	bl	80088f0 <_free_r>
 80081ac:	230c      	movs	r3, #12
 80081ae:	2001      	movs	r0, #1
 80081b0:	9a02      	ldr	r2, [sp, #8]
 80081b2:	4240      	negs	r0, r0
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	89a2      	ldrh	r2, [r4, #12]
 80081b8:	3334      	adds	r3, #52	@ 0x34
 80081ba:	4313      	orrs	r3, r2
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	e7e9      	b.n	8008194 <__ssputs_r+0x90>
 80081c0:	fffffb7f 	.word	0xfffffb7f

080081c4 <_svfiprintf_r>:
 80081c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c6:	b0a1      	sub	sp, #132	@ 0x84
 80081c8:	9003      	str	r0, [sp, #12]
 80081ca:	001d      	movs	r5, r3
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	000f      	movs	r7, r1
 80081d0:	0016      	movs	r6, r2
 80081d2:	061b      	lsls	r3, r3, #24
 80081d4:	d511      	bpl.n	80081fa <_svfiprintf_r+0x36>
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10e      	bne.n	80081fa <_svfiprintf_r+0x36>
 80081dc:	2140      	movs	r1, #64	@ 0x40
 80081de:	f000 f911 	bl	8008404 <_malloc_r>
 80081e2:	6038      	str	r0, [r7, #0]
 80081e4:	6138      	str	r0, [r7, #16]
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d105      	bne.n	80081f6 <_svfiprintf_r+0x32>
 80081ea:	230c      	movs	r3, #12
 80081ec:	9a03      	ldr	r2, [sp, #12]
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	2001      	movs	r0, #1
 80081f2:	4240      	negs	r0, r0
 80081f4:	e0cf      	b.n	8008396 <_svfiprintf_r+0x1d2>
 80081f6:	2340      	movs	r3, #64	@ 0x40
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	2300      	movs	r3, #0
 80081fc:	ac08      	add	r4, sp, #32
 80081fe:	6163      	str	r3, [r4, #20]
 8008200:	3320      	adds	r3, #32
 8008202:	7663      	strb	r3, [r4, #25]
 8008204:	3310      	adds	r3, #16
 8008206:	76a3      	strb	r3, [r4, #26]
 8008208:	9507      	str	r5, [sp, #28]
 800820a:	0035      	movs	r5, r6
 800820c:	782b      	ldrb	r3, [r5, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <_svfiprintf_r+0x52>
 8008212:	2b25      	cmp	r3, #37	@ 0x25
 8008214:	d148      	bne.n	80082a8 <_svfiprintf_r+0xe4>
 8008216:	1bab      	subs	r3, r5, r6
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	42b5      	cmp	r5, r6
 800821c:	d00b      	beq.n	8008236 <_svfiprintf_r+0x72>
 800821e:	0032      	movs	r2, r6
 8008220:	0039      	movs	r1, r7
 8008222:	9803      	ldr	r0, [sp, #12]
 8008224:	f7ff ff6e 	bl	8008104 <__ssputs_r>
 8008228:	3001      	adds	r0, #1
 800822a:	d100      	bne.n	800822e <_svfiprintf_r+0x6a>
 800822c:	e0ae      	b.n	800838c <_svfiprintf_r+0x1c8>
 800822e:	6963      	ldr	r3, [r4, #20]
 8008230:	9a05      	ldr	r2, [sp, #20]
 8008232:	189b      	adds	r3, r3, r2
 8008234:	6163      	str	r3, [r4, #20]
 8008236:	782b      	ldrb	r3, [r5, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d100      	bne.n	800823e <_svfiprintf_r+0x7a>
 800823c:	e0a6      	b.n	800838c <_svfiprintf_r+0x1c8>
 800823e:	2201      	movs	r2, #1
 8008240:	2300      	movs	r3, #0
 8008242:	4252      	negs	r2, r2
 8008244:	6062      	str	r2, [r4, #4]
 8008246:	a904      	add	r1, sp, #16
 8008248:	3254      	adds	r2, #84	@ 0x54
 800824a:	1852      	adds	r2, r2, r1
 800824c:	1c6e      	adds	r6, r5, #1
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	60e3      	str	r3, [r4, #12]
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	7013      	strb	r3, [r2, #0]
 8008256:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008258:	4b54      	ldr	r3, [pc, #336]	@ (80083ac <_svfiprintf_r+0x1e8>)
 800825a:	2205      	movs	r2, #5
 800825c:	0018      	movs	r0, r3
 800825e:	7831      	ldrb	r1, [r6, #0]
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	f000 fb31 	bl	80088c8 <memchr>
 8008266:	1c75      	adds	r5, r6, #1
 8008268:	2800      	cmp	r0, #0
 800826a:	d11f      	bne.n	80082ac <_svfiprintf_r+0xe8>
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	06d3      	lsls	r3, r2, #27
 8008270:	d504      	bpl.n	800827c <_svfiprintf_r+0xb8>
 8008272:	2353      	movs	r3, #83	@ 0x53
 8008274:	a904      	add	r1, sp, #16
 8008276:	185b      	adds	r3, r3, r1
 8008278:	2120      	movs	r1, #32
 800827a:	7019      	strb	r1, [r3, #0]
 800827c:	0713      	lsls	r3, r2, #28
 800827e:	d504      	bpl.n	800828a <_svfiprintf_r+0xc6>
 8008280:	2353      	movs	r3, #83	@ 0x53
 8008282:	a904      	add	r1, sp, #16
 8008284:	185b      	adds	r3, r3, r1
 8008286:	212b      	movs	r1, #43	@ 0x2b
 8008288:	7019      	strb	r1, [r3, #0]
 800828a:	7833      	ldrb	r3, [r6, #0]
 800828c:	2b2a      	cmp	r3, #42	@ 0x2a
 800828e:	d016      	beq.n	80082be <_svfiprintf_r+0xfa>
 8008290:	0035      	movs	r5, r6
 8008292:	2100      	movs	r1, #0
 8008294:	200a      	movs	r0, #10
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	782a      	ldrb	r2, [r5, #0]
 800829a:	1c6e      	adds	r6, r5, #1
 800829c:	3a30      	subs	r2, #48	@ 0x30
 800829e:	2a09      	cmp	r2, #9
 80082a0:	d950      	bls.n	8008344 <_svfiprintf_r+0x180>
 80082a2:	2900      	cmp	r1, #0
 80082a4:	d111      	bne.n	80082ca <_svfiprintf_r+0x106>
 80082a6:	e017      	b.n	80082d8 <_svfiprintf_r+0x114>
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7af      	b.n	800820c <_svfiprintf_r+0x48>
 80082ac:	9b05      	ldr	r3, [sp, #20]
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	1ac0      	subs	r0, r0, r3
 80082b2:	2301      	movs	r3, #1
 80082b4:	4083      	lsls	r3, r0
 80082b6:	4313      	orrs	r3, r2
 80082b8:	002e      	movs	r6, r5
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	e7cc      	b.n	8008258 <_svfiprintf_r+0x94>
 80082be:	9b07      	ldr	r3, [sp, #28]
 80082c0:	1d19      	adds	r1, r3, #4
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	9107      	str	r1, [sp, #28]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	db01      	blt.n	80082ce <_svfiprintf_r+0x10a>
 80082ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082cc:	e004      	b.n	80082d8 <_svfiprintf_r+0x114>
 80082ce:	425b      	negs	r3, r3
 80082d0:	60e3      	str	r3, [r4, #12]
 80082d2:	2302      	movs	r3, #2
 80082d4:	4313      	orrs	r3, r2
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	782b      	ldrb	r3, [r5, #0]
 80082da:	2b2e      	cmp	r3, #46	@ 0x2e
 80082dc:	d10c      	bne.n	80082f8 <_svfiprintf_r+0x134>
 80082de:	786b      	ldrb	r3, [r5, #1]
 80082e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082e2:	d134      	bne.n	800834e <_svfiprintf_r+0x18a>
 80082e4:	9b07      	ldr	r3, [sp, #28]
 80082e6:	3502      	adds	r5, #2
 80082e8:	1d1a      	adds	r2, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9207      	str	r2, [sp, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da01      	bge.n	80082f6 <_svfiprintf_r+0x132>
 80082f2:	2301      	movs	r3, #1
 80082f4:	425b      	negs	r3, r3
 80082f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f8:	4e2d      	ldr	r6, [pc, #180]	@ (80083b0 <_svfiprintf_r+0x1ec>)
 80082fa:	2203      	movs	r2, #3
 80082fc:	0030      	movs	r0, r6
 80082fe:	7829      	ldrb	r1, [r5, #0]
 8008300:	f000 fae2 	bl	80088c8 <memchr>
 8008304:	2800      	cmp	r0, #0
 8008306:	d006      	beq.n	8008316 <_svfiprintf_r+0x152>
 8008308:	2340      	movs	r3, #64	@ 0x40
 800830a:	1b80      	subs	r0, r0, r6
 800830c:	4083      	lsls	r3, r0
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	3501      	adds	r5, #1
 8008312:	4313      	orrs	r3, r2
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	7829      	ldrb	r1, [r5, #0]
 8008318:	2206      	movs	r2, #6
 800831a:	4826      	ldr	r0, [pc, #152]	@ (80083b4 <_svfiprintf_r+0x1f0>)
 800831c:	1c6e      	adds	r6, r5, #1
 800831e:	7621      	strb	r1, [r4, #24]
 8008320:	f000 fad2 	bl	80088c8 <memchr>
 8008324:	2800      	cmp	r0, #0
 8008326:	d038      	beq.n	800839a <_svfiprintf_r+0x1d6>
 8008328:	4b23      	ldr	r3, [pc, #140]	@ (80083b8 <_svfiprintf_r+0x1f4>)
 800832a:	2b00      	cmp	r3, #0
 800832c:	d122      	bne.n	8008374 <_svfiprintf_r+0x1b0>
 800832e:	2207      	movs	r2, #7
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	3307      	adds	r3, #7
 8008334:	4393      	bics	r3, r2
 8008336:	3308      	adds	r3, #8
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	6963      	ldr	r3, [r4, #20]
 800833c:	9a04      	ldr	r2, [sp, #16]
 800833e:	189b      	adds	r3, r3, r2
 8008340:	6163      	str	r3, [r4, #20]
 8008342:	e762      	b.n	800820a <_svfiprintf_r+0x46>
 8008344:	4343      	muls	r3, r0
 8008346:	0035      	movs	r5, r6
 8008348:	2101      	movs	r1, #1
 800834a:	189b      	adds	r3, r3, r2
 800834c:	e7a4      	b.n	8008298 <_svfiprintf_r+0xd4>
 800834e:	2300      	movs	r3, #0
 8008350:	200a      	movs	r0, #10
 8008352:	0019      	movs	r1, r3
 8008354:	3501      	adds	r5, #1
 8008356:	6063      	str	r3, [r4, #4]
 8008358:	782a      	ldrb	r2, [r5, #0]
 800835a:	1c6e      	adds	r6, r5, #1
 800835c:	3a30      	subs	r2, #48	@ 0x30
 800835e:	2a09      	cmp	r2, #9
 8008360:	d903      	bls.n	800836a <_svfiprintf_r+0x1a6>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d0c8      	beq.n	80082f8 <_svfiprintf_r+0x134>
 8008366:	9109      	str	r1, [sp, #36]	@ 0x24
 8008368:	e7c6      	b.n	80082f8 <_svfiprintf_r+0x134>
 800836a:	4341      	muls	r1, r0
 800836c:	0035      	movs	r5, r6
 800836e:	2301      	movs	r3, #1
 8008370:	1889      	adds	r1, r1, r2
 8008372:	e7f1      	b.n	8008358 <_svfiprintf_r+0x194>
 8008374:	aa07      	add	r2, sp, #28
 8008376:	9200      	str	r2, [sp, #0]
 8008378:	0021      	movs	r1, r4
 800837a:	003a      	movs	r2, r7
 800837c:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <_svfiprintf_r+0x1f8>)
 800837e:	9803      	ldr	r0, [sp, #12]
 8008380:	e000      	b.n	8008384 <_svfiprintf_r+0x1c0>
 8008382:	bf00      	nop
 8008384:	9004      	str	r0, [sp, #16]
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	3301      	adds	r3, #1
 800838a:	d1d6      	bne.n	800833a <_svfiprintf_r+0x176>
 800838c:	89bb      	ldrh	r3, [r7, #12]
 800838e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008390:	065b      	lsls	r3, r3, #25
 8008392:	d500      	bpl.n	8008396 <_svfiprintf_r+0x1d2>
 8008394:	e72c      	b.n	80081f0 <_svfiprintf_r+0x2c>
 8008396:	b021      	add	sp, #132	@ 0x84
 8008398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839a:	aa07      	add	r2, sp, #28
 800839c:	9200      	str	r2, [sp, #0]
 800839e:	0021      	movs	r1, r4
 80083a0:	003a      	movs	r2, r7
 80083a2:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <_svfiprintf_r+0x1f8>)
 80083a4:	9803      	ldr	r0, [sp, #12]
 80083a6:	f000 f91d 	bl	80085e4 <_printf_i>
 80083aa:	e7eb      	b.n	8008384 <_svfiprintf_r+0x1c0>
 80083ac:	08008cd4 	.word	0x08008cd4
 80083b0:	08008cda 	.word	0x08008cda
 80083b4:	08008cde 	.word	0x08008cde
 80083b8:	00000000 	.word	0x00000000
 80083bc:	08008105 	.word	0x08008105

080083c0 <sbrk_aligned>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4e0f      	ldr	r6, [pc, #60]	@ (8008400 <sbrk_aligned+0x40>)
 80083c4:	000d      	movs	r5, r1
 80083c6:	6831      	ldr	r1, [r6, #0]
 80083c8:	0004      	movs	r4, r0
 80083ca:	2900      	cmp	r1, #0
 80083cc:	d102      	bne.n	80083d4 <sbrk_aligned+0x14>
 80083ce:	f000 fa69 	bl	80088a4 <_sbrk_r>
 80083d2:	6030      	str	r0, [r6, #0]
 80083d4:	0029      	movs	r1, r5
 80083d6:	0020      	movs	r0, r4
 80083d8:	f000 fa64 	bl	80088a4 <_sbrk_r>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d103      	bne.n	80083e8 <sbrk_aligned+0x28>
 80083e0:	2501      	movs	r5, #1
 80083e2:	426d      	negs	r5, r5
 80083e4:	0028      	movs	r0, r5
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	2303      	movs	r3, #3
 80083ea:	1cc5      	adds	r5, r0, #3
 80083ec:	439d      	bics	r5, r3
 80083ee:	42a8      	cmp	r0, r5
 80083f0:	d0f8      	beq.n	80083e4 <sbrk_aligned+0x24>
 80083f2:	1a29      	subs	r1, r5, r0
 80083f4:	0020      	movs	r0, r4
 80083f6:	f000 fa55 	bl	80088a4 <_sbrk_r>
 80083fa:	3001      	adds	r0, #1
 80083fc:	d1f2      	bne.n	80083e4 <sbrk_aligned+0x24>
 80083fe:	e7ef      	b.n	80083e0 <sbrk_aligned+0x20>
 8008400:	20000408 	.word	0x20000408

08008404 <_malloc_r>:
 8008404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008406:	2203      	movs	r2, #3
 8008408:	1ccb      	adds	r3, r1, #3
 800840a:	4393      	bics	r3, r2
 800840c:	3308      	adds	r3, #8
 800840e:	0005      	movs	r5, r0
 8008410:	001f      	movs	r7, r3
 8008412:	2b0c      	cmp	r3, #12
 8008414:	d234      	bcs.n	8008480 <_malloc_r+0x7c>
 8008416:	270c      	movs	r7, #12
 8008418:	42b9      	cmp	r1, r7
 800841a:	d833      	bhi.n	8008484 <_malloc_r+0x80>
 800841c:	0028      	movs	r0, r5
 800841e:	f000 f9ef 	bl	8008800 <__malloc_lock>
 8008422:	4e37      	ldr	r6, [pc, #220]	@ (8008500 <_malloc_r+0xfc>)
 8008424:	6833      	ldr	r3, [r6, #0]
 8008426:	001c      	movs	r4, r3
 8008428:	2c00      	cmp	r4, #0
 800842a:	d12f      	bne.n	800848c <_malloc_r+0x88>
 800842c:	0039      	movs	r1, r7
 800842e:	0028      	movs	r0, r5
 8008430:	f7ff ffc6 	bl	80083c0 <sbrk_aligned>
 8008434:	0004      	movs	r4, r0
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d15f      	bne.n	80084fa <_malloc_r+0xf6>
 800843a:	6834      	ldr	r4, [r6, #0]
 800843c:	9400      	str	r4, [sp, #0]
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d14a      	bne.n	80084da <_malloc_r+0xd6>
 8008444:	2c00      	cmp	r4, #0
 8008446:	d052      	beq.n	80084ee <_malloc_r+0xea>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	0028      	movs	r0, r5
 800844c:	18e3      	adds	r3, r4, r3
 800844e:	9900      	ldr	r1, [sp, #0]
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	f000 fa27 	bl	80088a4 <_sbrk_r>
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	4283      	cmp	r3, r0
 800845a:	d148      	bne.n	80084ee <_malloc_r+0xea>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	0028      	movs	r0, r5
 8008460:	1aff      	subs	r7, r7, r3
 8008462:	0039      	movs	r1, r7
 8008464:	f7ff ffac 	bl	80083c0 <sbrk_aligned>
 8008468:	3001      	adds	r0, #1
 800846a:	d040      	beq.n	80084ee <_malloc_r+0xea>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	19db      	adds	r3, r3, r7
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	6833      	ldr	r3, [r6, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	2a00      	cmp	r2, #0
 8008478:	d133      	bne.n	80084e2 <_malloc_r+0xde>
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	6033      	str	r3, [r6, #0]
 800847e:	e019      	b.n	80084b4 <_malloc_r+0xb0>
 8008480:	2b00      	cmp	r3, #0
 8008482:	dac9      	bge.n	8008418 <_malloc_r+0x14>
 8008484:	230c      	movs	r3, #12
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	2000      	movs	r0, #0
 800848a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800848c:	6821      	ldr	r1, [r4, #0]
 800848e:	1bc9      	subs	r1, r1, r7
 8008490:	d420      	bmi.n	80084d4 <_malloc_r+0xd0>
 8008492:	290b      	cmp	r1, #11
 8008494:	d90a      	bls.n	80084ac <_malloc_r+0xa8>
 8008496:	19e2      	adds	r2, r4, r7
 8008498:	6027      	str	r7, [r4, #0]
 800849a:	42a3      	cmp	r3, r4
 800849c:	d104      	bne.n	80084a8 <_malloc_r+0xa4>
 800849e:	6032      	str	r2, [r6, #0]
 80084a0:	6863      	ldr	r3, [r4, #4]
 80084a2:	6011      	str	r1, [r2, #0]
 80084a4:	6053      	str	r3, [r2, #4]
 80084a6:	e005      	b.n	80084b4 <_malloc_r+0xb0>
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	e7f9      	b.n	80084a0 <_malloc_r+0x9c>
 80084ac:	6862      	ldr	r2, [r4, #4]
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	d10e      	bne.n	80084d0 <_malloc_r+0xcc>
 80084b2:	6032      	str	r2, [r6, #0]
 80084b4:	0028      	movs	r0, r5
 80084b6:	f000 f9ab 	bl	8008810 <__malloc_unlock>
 80084ba:	0020      	movs	r0, r4
 80084bc:	2207      	movs	r2, #7
 80084be:	300b      	adds	r0, #11
 80084c0:	1d23      	adds	r3, r4, #4
 80084c2:	4390      	bics	r0, r2
 80084c4:	1ac2      	subs	r2, r0, r3
 80084c6:	4298      	cmp	r0, r3
 80084c8:	d0df      	beq.n	800848a <_malloc_r+0x86>
 80084ca:	1a1b      	subs	r3, r3, r0
 80084cc:	50a3      	str	r3, [r4, r2]
 80084ce:	e7dc      	b.n	800848a <_malloc_r+0x86>
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	e7ef      	b.n	80084b4 <_malloc_r+0xb0>
 80084d4:	0023      	movs	r3, r4
 80084d6:	6864      	ldr	r4, [r4, #4]
 80084d8:	e7a6      	b.n	8008428 <_malloc_r+0x24>
 80084da:	9c00      	ldr	r4, [sp, #0]
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	e7ad      	b.n	800843e <_malloc_r+0x3a>
 80084e2:	001a      	movs	r2, r3
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	d1fb      	bne.n	80084e2 <_malloc_r+0xde>
 80084ea:	2300      	movs	r3, #0
 80084ec:	e7da      	b.n	80084a4 <_malloc_r+0xa0>
 80084ee:	230c      	movs	r3, #12
 80084f0:	0028      	movs	r0, r5
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f000 f98c 	bl	8008810 <__malloc_unlock>
 80084f8:	e7c6      	b.n	8008488 <_malloc_r+0x84>
 80084fa:	6007      	str	r7, [r0, #0]
 80084fc:	e7da      	b.n	80084b4 <_malloc_r+0xb0>
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	2000040c 	.word	0x2000040c

08008504 <_printf_common>:
 8008504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008506:	0016      	movs	r6, r2
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	688a      	ldr	r2, [r1, #8]
 800850c:	690b      	ldr	r3, [r1, #16]
 800850e:	000c      	movs	r4, r1
 8008510:	9000      	str	r0, [sp, #0]
 8008512:	4293      	cmp	r3, r2
 8008514:	da00      	bge.n	8008518 <_printf_common+0x14>
 8008516:	0013      	movs	r3, r2
 8008518:	0022      	movs	r2, r4
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	3243      	adds	r2, #67	@ 0x43
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	2a00      	cmp	r2, #0
 8008522:	d001      	beq.n	8008528 <_printf_common+0x24>
 8008524:	3301      	adds	r3, #1
 8008526:	6033      	str	r3, [r6, #0]
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	069b      	lsls	r3, r3, #26
 800852c:	d502      	bpl.n	8008534 <_printf_common+0x30>
 800852e:	6833      	ldr	r3, [r6, #0]
 8008530:	3302      	adds	r3, #2
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	2306      	movs	r3, #6
 8008538:	0015      	movs	r5, r2
 800853a:	401d      	ands	r5, r3
 800853c:	421a      	tst	r2, r3
 800853e:	d027      	beq.n	8008590 <_printf_common+0x8c>
 8008540:	0023      	movs	r3, r4
 8008542:	3343      	adds	r3, #67	@ 0x43
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	4193      	sbcs	r3, r2
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	0692      	lsls	r2, r2, #26
 800854e:	d430      	bmi.n	80085b2 <_printf_common+0xae>
 8008550:	0022      	movs	r2, r4
 8008552:	9901      	ldr	r1, [sp, #4]
 8008554:	9800      	ldr	r0, [sp, #0]
 8008556:	9d08      	ldr	r5, [sp, #32]
 8008558:	3243      	adds	r2, #67	@ 0x43
 800855a:	47a8      	blx	r5
 800855c:	3001      	adds	r0, #1
 800855e:	d025      	beq.n	80085ac <_printf_common+0xa8>
 8008560:	2206      	movs	r2, #6
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	2500      	movs	r5, #0
 8008566:	4013      	ands	r3, r2
 8008568:	2b04      	cmp	r3, #4
 800856a:	d105      	bne.n	8008578 <_printf_common+0x74>
 800856c:	6833      	ldr	r3, [r6, #0]
 800856e:	68e5      	ldr	r5, [r4, #12]
 8008570:	1aed      	subs	r5, r5, r3
 8008572:	43eb      	mvns	r3, r5
 8008574:	17db      	asrs	r3, r3, #31
 8008576:	401d      	ands	r5, r3
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	6922      	ldr	r2, [r4, #16]
 800857c:	4293      	cmp	r3, r2
 800857e:	dd01      	ble.n	8008584 <_printf_common+0x80>
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	18ed      	adds	r5, r5, r3
 8008584:	2600      	movs	r6, #0
 8008586:	42b5      	cmp	r5, r6
 8008588:	d120      	bne.n	80085cc <_printf_common+0xc8>
 800858a:	2000      	movs	r0, #0
 800858c:	e010      	b.n	80085b0 <_printf_common+0xac>
 800858e:	3501      	adds	r5, #1
 8008590:	68e3      	ldr	r3, [r4, #12]
 8008592:	6832      	ldr	r2, [r6, #0]
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	42ab      	cmp	r3, r5
 8008598:	ddd2      	ble.n	8008540 <_printf_common+0x3c>
 800859a:	0022      	movs	r2, r4
 800859c:	2301      	movs	r3, #1
 800859e:	9901      	ldr	r1, [sp, #4]
 80085a0:	9800      	ldr	r0, [sp, #0]
 80085a2:	9f08      	ldr	r7, [sp, #32]
 80085a4:	3219      	adds	r2, #25
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d1f0      	bne.n	800858e <_printf_common+0x8a>
 80085ac:	2001      	movs	r0, #1
 80085ae:	4240      	negs	r0, r0
 80085b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085b2:	2030      	movs	r0, #48	@ 0x30
 80085b4:	18e1      	adds	r1, r4, r3
 80085b6:	3143      	adds	r1, #67	@ 0x43
 80085b8:	7008      	strb	r0, [r1, #0]
 80085ba:	0021      	movs	r1, r4
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	3145      	adds	r1, #69	@ 0x45
 80085c0:	7809      	ldrb	r1, [r1, #0]
 80085c2:	18a2      	adds	r2, r4, r2
 80085c4:	3243      	adds	r2, #67	@ 0x43
 80085c6:	3302      	adds	r3, #2
 80085c8:	7011      	strb	r1, [r2, #0]
 80085ca:	e7c1      	b.n	8008550 <_printf_common+0x4c>
 80085cc:	0022      	movs	r2, r4
 80085ce:	2301      	movs	r3, #1
 80085d0:	9901      	ldr	r1, [sp, #4]
 80085d2:	9800      	ldr	r0, [sp, #0]
 80085d4:	9f08      	ldr	r7, [sp, #32]
 80085d6:	321a      	adds	r2, #26
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	d0e6      	beq.n	80085ac <_printf_common+0xa8>
 80085de:	3601      	adds	r6, #1
 80085e0:	e7d1      	b.n	8008586 <_printf_common+0x82>
	...

080085e4 <_printf_i>:
 80085e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e6:	b08b      	sub	sp, #44	@ 0x2c
 80085e8:	9206      	str	r2, [sp, #24]
 80085ea:	000a      	movs	r2, r1
 80085ec:	3243      	adds	r2, #67	@ 0x43
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	9005      	str	r0, [sp, #20]
 80085f2:	9203      	str	r2, [sp, #12]
 80085f4:	7e0a      	ldrb	r2, [r1, #24]
 80085f6:	000c      	movs	r4, r1
 80085f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80085fa:	2a78      	cmp	r2, #120	@ 0x78
 80085fc:	d809      	bhi.n	8008612 <_printf_i+0x2e>
 80085fe:	2a62      	cmp	r2, #98	@ 0x62
 8008600:	d80b      	bhi.n	800861a <_printf_i+0x36>
 8008602:	2a00      	cmp	r2, #0
 8008604:	d100      	bne.n	8008608 <_printf_i+0x24>
 8008606:	e0bc      	b.n	8008782 <_printf_i+0x19e>
 8008608:	497b      	ldr	r1, [pc, #492]	@ (80087f8 <_printf_i+0x214>)
 800860a:	9104      	str	r1, [sp, #16]
 800860c:	2a58      	cmp	r2, #88	@ 0x58
 800860e:	d100      	bne.n	8008612 <_printf_i+0x2e>
 8008610:	e090      	b.n	8008734 <_printf_i+0x150>
 8008612:	0025      	movs	r5, r4
 8008614:	3542      	adds	r5, #66	@ 0x42
 8008616:	702a      	strb	r2, [r5, #0]
 8008618:	e022      	b.n	8008660 <_printf_i+0x7c>
 800861a:	0010      	movs	r0, r2
 800861c:	3863      	subs	r0, #99	@ 0x63
 800861e:	2815      	cmp	r0, #21
 8008620:	d8f7      	bhi.n	8008612 <_printf_i+0x2e>
 8008622:	f7f7 fd6f 	bl	8000104 <__gnu_thumb1_case_shi>
 8008626:	0016      	.short	0x0016
 8008628:	fff6001f 	.word	0xfff6001f
 800862c:	fff6fff6 	.word	0xfff6fff6
 8008630:	001ffff6 	.word	0x001ffff6
 8008634:	fff6fff6 	.word	0xfff6fff6
 8008638:	fff6fff6 	.word	0xfff6fff6
 800863c:	003600a1 	.word	0x003600a1
 8008640:	fff60080 	.word	0xfff60080
 8008644:	00b2fff6 	.word	0x00b2fff6
 8008648:	0036fff6 	.word	0x0036fff6
 800864c:	fff6fff6 	.word	0xfff6fff6
 8008650:	0084      	.short	0x0084
 8008652:	0025      	movs	r5, r4
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	3542      	adds	r5, #66	@ 0x42
 8008658:	1d11      	adds	r1, r2, #4
 800865a:	6019      	str	r1, [r3, #0]
 800865c:	6813      	ldr	r3, [r2, #0]
 800865e:	702b      	strb	r3, [r5, #0]
 8008660:	2301      	movs	r3, #1
 8008662:	e0a0      	b.n	80087a6 <_printf_i+0x1c2>
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	6809      	ldr	r1, [r1, #0]
 8008668:	1d02      	adds	r2, r0, #4
 800866a:	060d      	lsls	r5, r1, #24
 800866c:	d50b      	bpl.n	8008686 <_printf_i+0xa2>
 800866e:	6806      	ldr	r6, [r0, #0]
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	2e00      	cmp	r6, #0
 8008674:	da03      	bge.n	800867e <_printf_i+0x9a>
 8008676:	232d      	movs	r3, #45	@ 0x2d
 8008678:	9a03      	ldr	r2, [sp, #12]
 800867a:	4276      	negs	r6, r6
 800867c:	7013      	strb	r3, [r2, #0]
 800867e:	4b5e      	ldr	r3, [pc, #376]	@ (80087f8 <_printf_i+0x214>)
 8008680:	270a      	movs	r7, #10
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	e018      	b.n	80086b8 <_printf_i+0xd4>
 8008686:	6806      	ldr	r6, [r0, #0]
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	0649      	lsls	r1, r1, #25
 800868c:	d5f1      	bpl.n	8008672 <_printf_i+0x8e>
 800868e:	b236      	sxth	r6, r6
 8008690:	e7ef      	b.n	8008672 <_printf_i+0x8e>
 8008692:	6808      	ldr	r0, [r1, #0]
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	c940      	ldmia	r1!, {r6}
 8008698:	0605      	lsls	r5, r0, #24
 800869a:	d402      	bmi.n	80086a2 <_printf_i+0xbe>
 800869c:	0640      	lsls	r0, r0, #25
 800869e:	d500      	bpl.n	80086a2 <_printf_i+0xbe>
 80086a0:	b2b6      	uxth	r6, r6
 80086a2:	6019      	str	r1, [r3, #0]
 80086a4:	4b54      	ldr	r3, [pc, #336]	@ (80087f8 <_printf_i+0x214>)
 80086a6:	270a      	movs	r7, #10
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	2a6f      	cmp	r2, #111	@ 0x6f
 80086ac:	d100      	bne.n	80086b0 <_printf_i+0xcc>
 80086ae:	3f02      	subs	r7, #2
 80086b0:	0023      	movs	r3, r4
 80086b2:	2200      	movs	r2, #0
 80086b4:	3343      	adds	r3, #67	@ 0x43
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	6863      	ldr	r3, [r4, #4]
 80086ba:	60a3      	str	r3, [r4, #8]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	db03      	blt.n	80086c8 <_printf_i+0xe4>
 80086c0:	2104      	movs	r1, #4
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	438a      	bics	r2, r1
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	2e00      	cmp	r6, #0
 80086ca:	d102      	bne.n	80086d2 <_printf_i+0xee>
 80086cc:	9d03      	ldr	r5, [sp, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <_printf_i+0x108>
 80086d2:	9d03      	ldr	r5, [sp, #12]
 80086d4:	0030      	movs	r0, r6
 80086d6:	0039      	movs	r1, r7
 80086d8:	f7f7 fda4 	bl	8000224 <__aeabi_uidivmod>
 80086dc:	9b04      	ldr	r3, [sp, #16]
 80086de:	3d01      	subs	r5, #1
 80086e0:	5c5b      	ldrb	r3, [r3, r1]
 80086e2:	702b      	strb	r3, [r5, #0]
 80086e4:	0033      	movs	r3, r6
 80086e6:	0006      	movs	r6, r0
 80086e8:	429f      	cmp	r7, r3
 80086ea:	d9f3      	bls.n	80086d4 <_printf_i+0xf0>
 80086ec:	2f08      	cmp	r7, #8
 80086ee:	d109      	bne.n	8008704 <_printf_i+0x120>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	07db      	lsls	r3, r3, #31
 80086f4:	d506      	bpl.n	8008704 <_printf_i+0x120>
 80086f6:	6862      	ldr	r2, [r4, #4]
 80086f8:	6923      	ldr	r3, [r4, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	dc02      	bgt.n	8008704 <_printf_i+0x120>
 80086fe:	2330      	movs	r3, #48	@ 0x30
 8008700:	3d01      	subs	r5, #1
 8008702:	702b      	strb	r3, [r5, #0]
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	1b5b      	subs	r3, r3, r5
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	9b07      	ldr	r3, [sp, #28]
 800870c:	0021      	movs	r1, r4
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	9805      	ldr	r0, [sp, #20]
 8008712:	9b06      	ldr	r3, [sp, #24]
 8008714:	aa09      	add	r2, sp, #36	@ 0x24
 8008716:	f7ff fef5 	bl	8008504 <_printf_common>
 800871a:	3001      	adds	r0, #1
 800871c:	d148      	bne.n	80087b0 <_printf_i+0x1cc>
 800871e:	2001      	movs	r0, #1
 8008720:	4240      	negs	r0, r0
 8008722:	b00b      	add	sp, #44	@ 0x2c
 8008724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008726:	2220      	movs	r2, #32
 8008728:	6809      	ldr	r1, [r1, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	2278      	movs	r2, #120	@ 0x78
 8008730:	4932      	ldr	r1, [pc, #200]	@ (80087fc <_printf_i+0x218>)
 8008732:	9104      	str	r1, [sp, #16]
 8008734:	0021      	movs	r1, r4
 8008736:	3145      	adds	r1, #69	@ 0x45
 8008738:	700a      	strb	r2, [r1, #0]
 800873a:	6819      	ldr	r1, [r3, #0]
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	c940      	ldmia	r1!, {r6}
 8008740:	0610      	lsls	r0, r2, #24
 8008742:	d402      	bmi.n	800874a <_printf_i+0x166>
 8008744:	0650      	lsls	r0, r2, #25
 8008746:	d500      	bpl.n	800874a <_printf_i+0x166>
 8008748:	b2b6      	uxth	r6, r6
 800874a:	6019      	str	r1, [r3, #0]
 800874c:	07d3      	lsls	r3, r2, #31
 800874e:	d502      	bpl.n	8008756 <_printf_i+0x172>
 8008750:	2320      	movs	r3, #32
 8008752:	4313      	orrs	r3, r2
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	2e00      	cmp	r6, #0
 8008758:	d001      	beq.n	800875e <_printf_i+0x17a>
 800875a:	2710      	movs	r7, #16
 800875c:	e7a8      	b.n	80086b0 <_printf_i+0xcc>
 800875e:	2220      	movs	r2, #32
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	4393      	bics	r3, r2
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	e7f8      	b.n	800875a <_printf_i+0x176>
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	680d      	ldr	r5, [r1, #0]
 800876c:	1d10      	adds	r0, r2, #4
 800876e:	6949      	ldr	r1, [r1, #20]
 8008770:	6018      	str	r0, [r3, #0]
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	062e      	lsls	r6, r5, #24
 8008776:	d501      	bpl.n	800877c <_printf_i+0x198>
 8008778:	6019      	str	r1, [r3, #0]
 800877a:	e002      	b.n	8008782 <_printf_i+0x19e>
 800877c:	066d      	lsls	r5, r5, #25
 800877e:	d5fb      	bpl.n	8008778 <_printf_i+0x194>
 8008780:	8019      	strh	r1, [r3, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	9d03      	ldr	r5, [sp, #12]
 8008786:	6123      	str	r3, [r4, #16]
 8008788:	e7bf      	b.n	800870a <_printf_i+0x126>
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	1d11      	adds	r1, r2, #4
 800878e:	6019      	str	r1, [r3, #0]
 8008790:	6815      	ldr	r5, [r2, #0]
 8008792:	2100      	movs	r1, #0
 8008794:	0028      	movs	r0, r5
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	f000 f896 	bl	80088c8 <memchr>
 800879c:	2800      	cmp	r0, #0
 800879e:	d001      	beq.n	80087a4 <_printf_i+0x1c0>
 80087a0:	1b40      	subs	r0, r0, r5
 80087a2:	6060      	str	r0, [r4, #4]
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	2300      	movs	r3, #0
 80087aa:	9a03      	ldr	r2, [sp, #12]
 80087ac:	7013      	strb	r3, [r2, #0]
 80087ae:	e7ac      	b.n	800870a <_printf_i+0x126>
 80087b0:	002a      	movs	r2, r5
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	9906      	ldr	r1, [sp, #24]
 80087b6:	9805      	ldr	r0, [sp, #20]
 80087b8:	9d07      	ldr	r5, [sp, #28]
 80087ba:	47a8      	blx	r5
 80087bc:	3001      	adds	r0, #1
 80087be:	d0ae      	beq.n	800871e <_printf_i+0x13a>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	079b      	lsls	r3, r3, #30
 80087c4:	d415      	bmi.n	80087f2 <_printf_i+0x20e>
 80087c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c8:	68e0      	ldr	r0, [r4, #12]
 80087ca:	4298      	cmp	r0, r3
 80087cc:	daa9      	bge.n	8008722 <_printf_i+0x13e>
 80087ce:	0018      	movs	r0, r3
 80087d0:	e7a7      	b.n	8008722 <_printf_i+0x13e>
 80087d2:	0022      	movs	r2, r4
 80087d4:	2301      	movs	r3, #1
 80087d6:	9906      	ldr	r1, [sp, #24]
 80087d8:	9805      	ldr	r0, [sp, #20]
 80087da:	9e07      	ldr	r6, [sp, #28]
 80087dc:	3219      	adds	r2, #25
 80087de:	47b0      	blx	r6
 80087e0:	3001      	adds	r0, #1
 80087e2:	d09c      	beq.n	800871e <_printf_i+0x13a>
 80087e4:	3501      	adds	r5, #1
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dcf0      	bgt.n	80087d2 <_printf_i+0x1ee>
 80087f0:	e7e9      	b.n	80087c6 <_printf_i+0x1e2>
 80087f2:	2500      	movs	r5, #0
 80087f4:	e7f7      	b.n	80087e6 <_printf_i+0x202>
 80087f6:	46c0      	nop			@ (mov r8, r8)
 80087f8:	08008ce5 	.word	0x08008ce5
 80087fc:	08008cf6 	.word	0x08008cf6

08008800 <__malloc_lock>:
 8008800:	b510      	push	{r4, lr}
 8008802:	4802      	ldr	r0, [pc, #8]	@ (800880c <__malloc_lock+0xc>)
 8008804:	f7ff fc7c 	bl	8008100 <__retarget_lock_acquire_recursive>
 8008808:	bd10      	pop	{r4, pc}
 800880a:	46c0      	nop			@ (mov r8, r8)
 800880c:	20000404 	.word	0x20000404

08008810 <__malloc_unlock>:
 8008810:	b510      	push	{r4, lr}
 8008812:	4802      	ldr	r0, [pc, #8]	@ (800881c <__malloc_unlock+0xc>)
 8008814:	f7ff fc75 	bl	8008102 <__retarget_lock_release_recursive>
 8008818:	bd10      	pop	{r4, pc}
 800881a:	46c0      	nop			@ (mov r8, r8)
 800881c:	20000404 	.word	0x20000404

08008820 <_realloc_r>:
 8008820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008822:	0006      	movs	r6, r0
 8008824:	000c      	movs	r4, r1
 8008826:	0015      	movs	r5, r2
 8008828:	2900      	cmp	r1, #0
 800882a:	d105      	bne.n	8008838 <_realloc_r+0x18>
 800882c:	0011      	movs	r1, r2
 800882e:	f7ff fde9 	bl	8008404 <_malloc_r>
 8008832:	0004      	movs	r4, r0
 8008834:	0020      	movs	r0, r4
 8008836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008838:	2a00      	cmp	r2, #0
 800883a:	d103      	bne.n	8008844 <_realloc_r+0x24>
 800883c:	f000 f858 	bl	80088f0 <_free_r>
 8008840:	2400      	movs	r4, #0
 8008842:	e7f7      	b.n	8008834 <_realloc_r+0x14>
 8008844:	f000 f89e 	bl	8008984 <_malloc_usable_size_r>
 8008848:	0007      	movs	r7, r0
 800884a:	4285      	cmp	r5, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	0843      	lsrs	r3, r0, #1
 8008850:	42ab      	cmp	r3, r5
 8008852:	d3ef      	bcc.n	8008834 <_realloc_r+0x14>
 8008854:	0029      	movs	r1, r5
 8008856:	0030      	movs	r0, r6
 8008858:	f7ff fdd4 	bl	8008404 <_malloc_r>
 800885c:	9001      	str	r0, [sp, #4]
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ee      	beq.n	8008840 <_realloc_r+0x20>
 8008862:	002a      	movs	r2, r5
 8008864:	42bd      	cmp	r5, r7
 8008866:	d900      	bls.n	800886a <_realloc_r+0x4a>
 8008868:	003a      	movs	r2, r7
 800886a:	0021      	movs	r1, r4
 800886c:	9801      	ldr	r0, [sp, #4]
 800886e:	f000 f836 	bl	80088de <memcpy>
 8008872:	0021      	movs	r1, r4
 8008874:	0030      	movs	r0, r6
 8008876:	f000 f83b 	bl	80088f0 <_free_r>
 800887a:	9c01      	ldr	r4, [sp, #4]
 800887c:	e7da      	b.n	8008834 <_realloc_r+0x14>

0800887e <memmove>:
 800887e:	b510      	push	{r4, lr}
 8008880:	4288      	cmp	r0, r1
 8008882:	d806      	bhi.n	8008892 <memmove+0x14>
 8008884:	2300      	movs	r3, #0
 8008886:	429a      	cmp	r2, r3
 8008888:	d008      	beq.n	800889c <memmove+0x1e>
 800888a:	5ccc      	ldrb	r4, [r1, r3]
 800888c:	54c4      	strb	r4, [r0, r3]
 800888e:	3301      	adds	r3, #1
 8008890:	e7f9      	b.n	8008886 <memmove+0x8>
 8008892:	188b      	adds	r3, r1, r2
 8008894:	4298      	cmp	r0, r3
 8008896:	d2f5      	bcs.n	8008884 <memmove+0x6>
 8008898:	3a01      	subs	r2, #1
 800889a:	d200      	bcs.n	800889e <memmove+0x20>
 800889c:	bd10      	pop	{r4, pc}
 800889e:	5c8b      	ldrb	r3, [r1, r2]
 80088a0:	5483      	strb	r3, [r0, r2]
 80088a2:	e7f9      	b.n	8008898 <memmove+0x1a>

080088a4 <_sbrk_r>:
 80088a4:	2300      	movs	r3, #0
 80088a6:	b570      	push	{r4, r5, r6, lr}
 80088a8:	4d06      	ldr	r5, [pc, #24]	@ (80088c4 <_sbrk_r+0x20>)
 80088aa:	0004      	movs	r4, r0
 80088ac:	0008      	movs	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7fb fa64 	bl	8003d7c <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d103      	bne.n	80088c0 <_sbrk_r+0x1c>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d000      	beq.n	80088c0 <_sbrk_r+0x1c>
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	bd70      	pop	{r4, r5, r6, pc}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	20000410 	.word	0x20000410

080088c8 <memchr>:
 80088c8:	b2c9      	uxtb	r1, r1
 80088ca:	1882      	adds	r2, r0, r2
 80088cc:	4290      	cmp	r0, r2
 80088ce:	d101      	bne.n	80088d4 <memchr+0xc>
 80088d0:	2000      	movs	r0, #0
 80088d2:	4770      	bx	lr
 80088d4:	7803      	ldrb	r3, [r0, #0]
 80088d6:	428b      	cmp	r3, r1
 80088d8:	d0fb      	beq.n	80088d2 <memchr+0xa>
 80088da:	3001      	adds	r0, #1
 80088dc:	e7f6      	b.n	80088cc <memchr+0x4>

080088de <memcpy>:
 80088de:	2300      	movs	r3, #0
 80088e0:	b510      	push	{r4, lr}
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d100      	bne.n	80088e8 <memcpy+0xa>
 80088e6:	bd10      	pop	{r4, pc}
 80088e8:	5ccc      	ldrb	r4, [r1, r3]
 80088ea:	54c4      	strb	r4, [r0, r3]
 80088ec:	3301      	adds	r3, #1
 80088ee:	e7f8      	b.n	80088e2 <memcpy+0x4>

080088f0 <_free_r>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	0005      	movs	r5, r0
 80088f4:	1e0c      	subs	r4, r1, #0
 80088f6:	d010      	beq.n	800891a <_free_r+0x2a>
 80088f8:	3c04      	subs	r4, #4
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da00      	bge.n	8008902 <_free_r+0x12>
 8008900:	18e4      	adds	r4, r4, r3
 8008902:	0028      	movs	r0, r5
 8008904:	f7ff ff7c 	bl	8008800 <__malloc_lock>
 8008908:	4a1d      	ldr	r2, [pc, #116]	@ (8008980 <_free_r+0x90>)
 800890a:	6813      	ldr	r3, [r2, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d105      	bne.n	800891c <_free_r+0x2c>
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	6014      	str	r4, [r2, #0]
 8008914:	0028      	movs	r0, r5
 8008916:	f7ff ff7b 	bl	8008810 <__malloc_unlock>
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	42a3      	cmp	r3, r4
 800891e:	d908      	bls.n	8008932 <_free_r+0x42>
 8008920:	6820      	ldr	r0, [r4, #0]
 8008922:	1821      	adds	r1, r4, r0
 8008924:	428b      	cmp	r3, r1
 8008926:	d1f3      	bne.n	8008910 <_free_r+0x20>
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	1809      	adds	r1, r1, r0
 800892e:	6021      	str	r1, [r4, #0]
 8008930:	e7ee      	b.n	8008910 <_free_r+0x20>
 8008932:	001a      	movs	r2, r3
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <_free_r+0x4e>
 800893a:	42a3      	cmp	r3, r4
 800893c:	d9f9      	bls.n	8008932 <_free_r+0x42>
 800893e:	6811      	ldr	r1, [r2, #0]
 8008940:	1850      	adds	r0, r2, r1
 8008942:	42a0      	cmp	r0, r4
 8008944:	d10b      	bne.n	800895e <_free_r+0x6e>
 8008946:	6820      	ldr	r0, [r4, #0]
 8008948:	1809      	adds	r1, r1, r0
 800894a:	1850      	adds	r0, r2, r1
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	4283      	cmp	r3, r0
 8008950:	d1e0      	bne.n	8008914 <_free_r+0x24>
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	1841      	adds	r1, r0, r1
 8008958:	6011      	str	r1, [r2, #0]
 800895a:	6053      	str	r3, [r2, #4]
 800895c:	e7da      	b.n	8008914 <_free_r+0x24>
 800895e:	42a0      	cmp	r0, r4
 8008960:	d902      	bls.n	8008968 <_free_r+0x78>
 8008962:	230c      	movs	r3, #12
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	e7d5      	b.n	8008914 <_free_r+0x24>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	1821      	adds	r1, r4, r0
 800896c:	428b      	cmp	r3, r1
 800896e:	d103      	bne.n	8008978 <_free_r+0x88>
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	1809      	adds	r1, r1, r0
 8008976:	6021      	str	r1, [r4, #0]
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6054      	str	r4, [r2, #4]
 800897c:	e7ca      	b.n	8008914 <_free_r+0x24>
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	2000040c 	.word	0x2000040c

08008984 <_malloc_usable_size_r>:
 8008984:	1f0b      	subs	r3, r1, #4
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1f18      	subs	r0, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	da01      	bge.n	8008992 <_malloc_usable_size_r+0xe>
 800898e:	580b      	ldr	r3, [r1, r0]
 8008990:	18c0      	adds	r0, r0, r3
 8008992:	4770      	bx	lr

08008994 <_init>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	46c0      	nop			@ (mov r8, r8)
 8008998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899a:	bc08      	pop	{r3}
 800899c:	469e      	mov	lr, r3
 800899e:	4770      	bx	lr

080089a0 <_fini>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr
